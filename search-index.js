var searchIndex = {};
searchIndex["compiler_builtins"] = {"doc":"","items":[[0,"int","compiler_builtins","",null,null],[0,"mul","compiler_builtins::int","",null,null],[5,"__muldi3","compiler_builtins::int::mul","Returns `a * b`",null,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"u64"}}],[5,"__mulosi4","","Returns `a * b` and sets `*overflow = 1` if `a * b` overflows",null,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"__mulodi4","","Returns `a * b` and sets `*overflow = 1` if `a * b` overflows",null,{"inputs":[{"name":"i64"},{"name":"i64"},{"name":"i32"}],"output":{"name":"i64"}}],[0,"sdiv","compiler_builtins::int","",null,null],[5,"__divsi3","compiler_builtins::int::sdiv","Returns `a / b`",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"__divdi3","","Returns `a / b`",null,{"inputs":[{"name":"i64"},{"name":"i64"}],"output":{"name":"i64"}}],[5,"__modsi3","","Returns `a % b`",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"__moddi3","","Returns `a % b`",null,{"inputs":[{"name":"i64"},{"name":"i64"}],"output":{"name":"i64"}}],[5,"__divmodsi4","","Returns `a / b` and sets `*rem = n % d`",null,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"__divmoddi4","","Returns `a / b` and sets `*rem = n % d`",null,{"inputs":[{"name":"i64"},{"name":"i64"},{"name":"i64"}],"output":{"name":"i64"}}],[0,"shift","compiler_builtins::int","",null,null],[5,"__ashldi3","compiler_builtins::int::shift","Returns `a << b`, requires `b < $ty::bits()`",null,{"inputs":[{"name":"u64"},{"name":"u32"}],"output":{"name":"u64"}}],[5,"__ashrdi3","","Returns arithmetic `a >> b`, requires `b < $ty::bits()`",null,{"inputs":[{"name":"i64"},{"name":"u32"}],"output":{"name":"i64"}}],[5,"__lshrdi3","","Returns logical `a >> b`, requires `b < $ty::bits()`",null,{"inputs":[{"name":"u64"},{"name":"u32"}],"output":{"name":"u64"}}],[0,"udiv","compiler_builtins::int","",null,null],[5,"__udivsi3","compiler_builtins::int::udiv","Returns `n / d`",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"u32"}}],[5,"__umodsi3","","Returns `n % d`",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"u32"}}],[5,"__udivmodsi4","","Returns `n / d` and sets `*rem = n % d`",null,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"option"}],"output":{"name":"u32"}}],[5,"__udivdi3","","Returns `n / d`",null,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"u64"}}],[5,"__umoddi3","","Returns `n % d`",null,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"u64"}}],[5,"__udivmoddi4","","Returns `n / d` and sets `*rem = n % d`",null,{"inputs":[{"name":"u64"},{"name":"u64"},{"name":"option"}],"output":{"name":"u64"}}],[8,"Int","compiler_builtins::int","Trait for some basic operations on integers",null,null],[10,"bits","","Returns the bitwidth of the int type",0,{"inputs":[],"output":{"name":"u32"}}],[8,"LargeInt","","Trait to convert an integer to/from smaller parts",null,null],[16,"LowHalf","","",1,null],[16,"HighHalf","","",1,null],[10,"low","","",1,null],[10,"high","","",1,null],[10,"from_parts","","",1,null],[0,"float","compiler_builtins","",null,null],[0,"add","compiler_builtins::float","",null,null],[5,"__addsf3","compiler_builtins::float::add","Returns `a + b`",null,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"__adddf3","","Returns `a + b`",null,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[0,"pow","compiler_builtins::float","",null,null],[5,"__powisf2","compiler_builtins::float::pow","Returns `a` raised to the power `b`",null,{"inputs":[{"name":"f32"},{"name":"i32"}],"output":{"name":"f32"}}],[5,"__powidf2","","Returns `a` raised to the power `b`",null,{"inputs":[{"name":"f64"},{"name":"i32"}],"output":{"name":"f64"}}],[8,"Float","compiler_builtins::float","Trait for some basic operations on floats",null,null],[16,"Int","","A uint of the same with as the float",2,null],[10,"bits","","Returns the bitwidth of the float type",2,{"inputs":[],"output":{"name":"u32"}}],[10,"significand_bits","","Returns the bitwidth of the significand",2,{"inputs":[],"output":{"name":"u32"}}],[11,"exponent_bits","","Returns the bitwidth of the exponent",2,{"inputs":[],"output":{"name":"u32"}}],[10,"sign_mask","","Returns a mask for the sign bit",2,null],[10,"significand_mask","","Returns a mask for the significand",2,null],[10,"exponent_mask","","Returns a mask for the exponent",2,null],[10,"repr","","Returns `self` transmuted to `Self::Int`",2,null],[10,"from_repr","","Returns a `Self::Int` transmuted back to `Self`",2,null],[10,"from_parts","","Constructs a `Self` from its parts. Inputs are treated as bits and shifted into position.",2,null],[10,"normalize","","Returns (normalized exponent, normalized significand)",2,null],[0,"mem","compiler_builtins","",null,null],[5,"memcpy","compiler_builtins::mem","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"memcmp","","",null,null],[0,"x86_64","compiler_builtins","",null,null]],"paths":[[8,"Int"],[8,"LargeInt"],[8,"Float"]]};
searchIndex["ralloc"] = {"doc":"**Ralloc:** The memory efficient allocator.","items":[[5,"alloc","ralloc","Allocate a block of memory.",null,null],[5,"free","","Free a buffer.",null,null],[5,"realloc","","Reallocate memory.",null,null],[5,"realloc_inplace","","Try to reallocate the buffer _inplace_.",null,null],[5,"sbrk","","`SBRK` symbol which can coexist with the allocator.",null,null],[5,"set_oom_handler","","Set the OOM handler.",null,null],[14,"log","","Log to the appropriate source.",null,null],[14,"bk_log","","Log with bookkeeper data to the appropriate source.",null,null]],"paths":[]};
searchIndex["ralloc_shim"] = {"doc":"Symbols and externs that `ralloc` depends on.","items":[[0,"config","ralloc_shim","Configuration.",null,null],[5,"default_oom_handler","ralloc_shim::config","The default OOM handler.",null,null],[5,"log","","Write to the log.",null,{"inputs":[{"name":"str"}],"output":{"name":"usize"}}],[5,"extra_fresh","","Canonicalize a fresh allocation.",null,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[5,"extra_brk","","Canonicalize a BRK request.",null,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[17,"OS_MEMTRIM_LIMIT","","The memtrim limit.",null,null],[17,"OS_MEMTRIM_WORTHY","","Minimum size before a block is worthy to memtrim.",null,null],[17,"FRAGMENTATION_SCALE","","The fragmentation scale constant.",null,null],[17,"LOCAL_MEMTRIM_LIMIT","","The local memtrim limit.",null,null],[17,"LOCAL_MEMTRIM_STOP","","The local memtrim chock.",null,null],[17,"MIN_LOG_LEVEL","","The minimum log level.",null,null],[0,"thread_destructor","ralloc_shim","Thread destructors.",null,null],[0,"arch","ralloc_shim::thread_destructor","Thread destructors for Linux/BSD.",null,null],[5,"register","ralloc_shim::thread_destructor::arch","Register a thread destructor.",null,null],[0,"debug","ralloc_shim","Bindings to debuggers.",null,null],[5,"mark_undefined","ralloc_shim::debug","Mark this segment undefined to the debugger.",null,null],[5,"mark_free","","Mark this segment free to the debugger.",null,null],[0,"syscalls","ralloc_shim","System calls.",null,null],[5,"brk","ralloc_shim::syscalls","Change the data segment. See `man brk`.",null,null],[5,"sched_yield","","Voluntarily give a time slice to the scheduler.",null,{"inputs":[],"output":{"name":"usize"}}]],"paths":[]};
searchIndex["sc"] = {"doc":"Raw system calls for Rust.","items":[[0,"platform","sc","This library was built for x86-64 Linux.",null,null],[5,"syscall0","sc::platform","",null,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[5,"syscall1","","",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[5,"syscall2","","",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[5,"syscall3","","",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[5,"syscall4","","",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[5,"syscall5","","",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"usize"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[5,"syscall6","","",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"usize"},{"name":"usize"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[0,"nr","","",null,null],[17,"_SYSCTL","sc::platform::nr","",null,null],[17,"ACCEPT","","",null,null],[17,"ACCEPT4","","",null,null],[17,"ACCESS","","",null,null],[17,"ACCT","","",null,null],[17,"ADD_KEY","","",null,null],[17,"ADJTIMEX","","",null,null],[17,"ALARM","","",null,null],[17,"BIND","","",null,null],[17,"BRK","","",null,null],[17,"CAPGET","","",null,null],[17,"CAPSET","","",null,null],[17,"CHDIR","","",null,null],[17,"CHMOD","","",null,null],[17,"CHOWN","","",null,null],[17,"CHROOT","","",null,null],[17,"CLOCK_ADJTIME","","",null,null],[17,"CLOCK_GETRES","","",null,null],[17,"CLOCK_GETTIME","","",null,null],[17,"CLOCK_NANOSLEEP","","",null,null],[17,"CLOCK_SETTIME","","",null,null],[17,"CLONE","","",null,null],[17,"CLOSE","","",null,null],[17,"CONNECT","","",null,null],[17,"CREAT","","",null,null],[17,"DELETE_MODULE","","",null,null],[17,"DUP","","",null,null],[17,"DUP2","","",null,null],[17,"DUP3","","",null,null],[17,"EPOLL_CREATE","","",null,null],[17,"EPOLL_CREATE1","","",null,null],[17,"EPOLL_CTL","","",null,null],[17,"EPOLL_PWAIT","","",null,null],[17,"EPOLL_WAIT","","",null,null],[17,"EVENTFD","","",null,null],[17,"EVENTFD2","","",null,null],[17,"EXECVE","","",null,null],[17,"EXIT","","",null,null],[17,"EXIT_GROUP","","",null,null],[17,"FACCESSAT","","",null,null],[17,"FALLOCATE","","",null,null],[17,"FANOTIFY_INIT","","",null,null],[17,"FANOTIFY_MARK","","",null,null],[17,"FCHDIR","","",null,null],[17,"FCHMOD","","",null,null],[17,"FCHMODAT","","",null,null],[17,"FCHOWN","","",null,null],[17,"FCHOWNAT","","",null,null],[17,"FCNTL","","",null,null],[17,"FDATASYNC","","",null,null],[17,"FGETXATTR","","",null,null],[17,"FINIT_MODULE","","",null,null],[17,"FLISTXATTR","","",null,null],[17,"FLOCK","","",null,null],[17,"FORK","","",null,null],[17,"FREMOVEXATTR","","",null,null],[17,"FSETXATTR","","",null,null],[17,"FSTAT","","",null,null],[17,"FSTATFS","","",null,null],[17,"FSYNC","","",null,null],[17,"FTRUNCATE","","",null,null],[17,"FUTEX","","",null,null],[17,"FUTIMESAT","","",null,null],[17,"GET_MEMPOLICY","","",null,null],[17,"GET_ROBUST_LIST","","",null,null],[17,"GETCPU","","",null,null],[17,"GETCWD","","",null,null],[17,"GETDENTS","","",null,null],[17,"GETDENTS64","","",null,null],[17,"GETEGID","","",null,null],[17,"GETEUID","","",null,null],[17,"GETGID","","",null,null],[17,"GETGROUPS","","",null,null],[17,"GETITIMER","","",null,null],[17,"GETPEERNAME","","",null,null],[17,"GETPGID","","",null,null],[17,"GETPGRP","","",null,null],[17,"GETPID","","",null,null],[17,"GETPPID","","",null,null],[17,"GETPRIORITY","","",null,null],[17,"GETRESGID","","",null,null],[17,"GETRESUID","","",null,null],[17,"GETRLIMIT","","",null,null],[17,"GETRUSAGE","","",null,null],[17,"GETSID","","",null,null],[17,"GETSOCKNAME","","",null,null],[17,"GETSOCKOPT","","",null,null],[17,"GETTID","","",null,null],[17,"GETTIMEOFDAY","","",null,null],[17,"GETUID","","",null,null],[17,"GETXATTR","","",null,null],[17,"INIT_MODULE","","",null,null],[17,"INOTIFY_ADD_WATCH","","",null,null],[17,"INOTIFY_INIT","","",null,null],[17,"INOTIFY_INIT1","","",null,null],[17,"INOTIFY_RM_WATCH","","",null,null],[17,"IO_CANCEL","","",null,null],[17,"IO_DESTROY","","",null,null],[17,"IO_GETEVENTS","","",null,null],[17,"IO_SETUP","","",null,null],[17,"IO_SUBMIT","","",null,null],[17,"IOCTL","","",null,null],[17,"IOPRIO_GET","","",null,null],[17,"IOPRIO_SET","","",null,null],[17,"KCMP","","",null,null],[17,"KEXEC_LOAD","","",null,null],[17,"KEYCTL","","",null,null],[17,"KILL","","",null,null],[17,"LCHOWN","","",null,null],[17,"LGETXATTR","","",null,null],[17,"LINK","","",null,null],[17,"LINKAT","","",null,null],[17,"LISTEN","","",null,null],[17,"LISTXATTR","","",null,null],[17,"LLISTXATTR","","",null,null],[17,"LOOKUP_DCOOKIE","","",null,null],[17,"LREMOVEXATTR","","",null,null],[17,"LSEEK","","",null,null],[17,"LSETXATTR","","",null,null],[17,"LSTAT","","",null,null],[17,"MADVISE","","",null,null],[17,"MBIND","","",null,null],[17,"MINCORE","","",null,null],[17,"MKDIR","","",null,null],[17,"MKDIRAT","","",null,null],[17,"MKNOD","","",null,null],[17,"MKNODAT","","",null,null],[17,"MLOCK","","",null,null],[17,"MLOCKALL","","",null,null],[17,"MMAP","","",null,null],[17,"MOUNT","","",null,null],[17,"MOVE_PAGES","","",null,null],[17,"MPROTECT","","",null,null],[17,"MQ_GETSETATTR","","",null,null],[17,"MQ_NOTIFY","","",null,null],[17,"MQ_OPEN","","",null,null],[17,"MQ_TIMEDRECEIVE","","",null,null],[17,"MQ_TIMEDSEND","","",null,null],[17,"MQ_UNLINK","","",null,null],[17,"MREMAP","","",null,null],[17,"MSGCTL","","",null,null],[17,"MSGGET","","",null,null],[17,"MSGRCV","","",null,null],[17,"MSGSND","","",null,null],[17,"MSYNC","","",null,null],[17,"MUNLOCK","","",null,null],[17,"MUNLOCKALL","","",null,null],[17,"MUNMAP","","",null,null],[17,"NAME_TO_HANDLE_AT","","",null,null],[17,"NANOSLEEP","","",null,null],[17,"NFSSERVCTL","","",null,null],[17,"OPEN","","",null,null],[17,"OPEN_BY_HANDLE_AT","","",null,null],[17,"OPENAT","","",null,null],[17,"PAUSE","","",null,null],[17,"PERF_EVENT_OPEN","","",null,null],[17,"PERSONALITY","","",null,null],[17,"PIPE","","",null,null],[17,"PIPE2","","",null,null],[17,"PIVOT_ROOT","","",null,null],[17,"POLL","","",null,null],[17,"PPOLL","","",null,null],[17,"PRCTL","","",null,null],[17,"PREAD64","","",null,null],[17,"PREADV","","",null,null],[17,"PRLIMIT64","","",null,null],[17,"PROCESS_VM_READV","","",null,null],[17,"PROCESS_VM_WRITEV","","",null,null],[17,"PSELECT6","","",null,null],[17,"PTRACE","","",null,null],[17,"PWRITE64","","",null,null],[17,"PWRITEV","","",null,null],[17,"QUOTACTL","","",null,null],[17,"READ","","",null,null],[17,"READAHEAD","","",null,null],[17,"READLINK","","",null,null],[17,"READLINKAT","","",null,null],[17,"READV","","",null,null],[17,"REBOOT","","",null,null],[17,"RECVFROM","","",null,null],[17,"RECVMMSG","","",null,null],[17,"RECVMSG","","",null,null],[17,"REMAP_FILE_PAGES","","",null,null],[17,"REMOVEXATTR","","",null,null],[17,"RENAME","","",null,null],[17,"RENAMEAT","","",null,null],[17,"REQUEST_KEY","","",null,null],[17,"RESTART_SYSCALL","","",null,null],[17,"RMDIR","","",null,null],[17,"RT_SIGACTION","","",null,null],[17,"RT_SIGPENDING","","",null,null],[17,"RT_SIGPROCMASK","","",null,null],[17,"RT_SIGQUEUEINFO","","",null,null],[17,"RT_SIGRETURN","","",null,null],[17,"RT_SIGSUSPEND","","",null,null],[17,"RT_SIGTIMEDWAIT","","",null,null],[17,"RT_TGSIGQUEUEINFO","","",null,null],[17,"SCHED_GET_PRIORITY_MAX","","",null,null],[17,"SCHED_GET_PRIORITY_MIN","","",null,null],[17,"SCHED_GETAFFINITY","","",null,null],[17,"SCHED_GETPARAM","","",null,null],[17,"SCHED_GETSCHEDULER","","",null,null],[17,"SCHED_RR_GET_INTERVAL","","",null,null],[17,"SCHED_SETAFFINITY","","",null,null],[17,"SCHED_SETPARAM","","",null,null],[17,"SCHED_SETSCHEDULER","","",null,null],[17,"SCHED_YIELD","","",null,null],[17,"SELECT","","",null,null],[17,"SEMCTL","","",null,null],[17,"SEMGET","","",null,null],[17,"SEMOP","","",null,null],[17,"SEMTIMEDOP","","",null,null],[17,"SENDFILE","","",null,null],[17,"SENDMMSG","","",null,null],[17,"SENDMSG","","",null,null],[17,"SENDTO","","",null,null],[17,"SET_MEMPOLICY","","",null,null],[17,"SET_ROBUST_LIST","","",null,null],[17,"SET_TID_ADDRESS","","",null,null],[17,"SETDOMAINNAME","","",null,null],[17,"SETFSGID","","",null,null],[17,"SETFSUID","","",null,null],[17,"SETGID","","",null,null],[17,"SETGROUPS","","",null,null],[17,"SETHOSTNAME","","",null,null],[17,"SETITIMER","","",null,null],[17,"SETNS","","",null,null],[17,"SETPGID","","",null,null],[17,"SETPRIORITY","","",null,null],[17,"SETREGID","","",null,null],[17,"SETRESGID","","",null,null],[17,"SETRESUID","","",null,null],[17,"SETREUID","","",null,null],[17,"SETRLIMIT","","",null,null],[17,"SETSID","","",null,null],[17,"SETSOCKOPT","","",null,null],[17,"SETTIMEOFDAY","","",null,null],[17,"SETUID","","",null,null],[17,"SETXATTR","","",null,null],[17,"SHMAT","","",null,null],[17,"SHMCTL","","",null,null],[17,"SHMDT","","",null,null],[17,"SHMGET","","",null,null],[17,"SHUTDOWN","","",null,null],[17,"SIGALTSTACK","","",null,null],[17,"SIGNALFD","","",null,null],[17,"SIGNALFD4","","",null,null],[17,"SOCKET","","",null,null],[17,"SOCKETPAIR","","",null,null],[17,"SPLICE","","",null,null],[17,"STAT","","",null,null],[17,"STATFS","","",null,null],[17,"SWAPOFF","","",null,null],[17,"SWAPON","","",null,null],[17,"SYMLINK","","",null,null],[17,"SYMLINKAT","","",null,null],[17,"SYNC","","",null,null],[17,"SYNCFS","","",null,null],[17,"SYSFS","","",null,null],[17,"SYSINFO","","",null,null],[17,"SYSLOG","","",null,null],[17,"TEE","","",null,null],[17,"TGKILL","","",null,null],[17,"TIME","","",null,null],[17,"TIMER_CREATE","","",null,null],[17,"TIMER_DELETE","","",null,null],[17,"TIMER_GETOVERRUN","","",null,null],[17,"TIMER_GETTIME","","",null,null],[17,"TIMER_SETTIME","","",null,null],[17,"TIMERFD_CREATE","","",null,null],[17,"TIMERFD_GETTIME","","",null,null],[17,"TIMERFD_SETTIME","","",null,null],[17,"TIMES","","",null,null],[17,"TKILL","","",null,null],[17,"TRUNCATE","","",null,null],[17,"UMASK","","",null,null],[17,"UMOUNT2","","",null,null],[17,"UNAME","","",null,null],[17,"UNLINK","","",null,null],[17,"UNLINKAT","","",null,null],[17,"UNSHARE","","",null,null],[17,"USELIB","","",null,null],[17,"USTAT","","",null,null],[17,"UTIME","","",null,null],[17,"UTIMENSAT","","",null,null],[17,"UTIMES","","",null,null],[17,"VFORK","","",null,null],[17,"VHANGUP","","",null,null],[17,"VMSPLICE","","",null,null],[17,"VSERVER","","",null,null],[17,"WAIT4","","",null,null],[17,"WAITID","","",null,null],[17,"WRITE","","",null,null],[17,"WRITEV","","",null,null],[14,"syscall","sc","",null,null]],"paths":[]};
searchIndex["std"] = {"doc":"","items":[[0,"any","std","This module implements the `Any` trait, which enables dynamic typing of any `'static` type through runtime reflection.",null,null],[8,"Any","std::any","A type to emulate dynamic typing.",null,null],[10,"get_type_id","","Gets the `TypeId` of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"typeid"}}],[3,"TypeId","","A `TypeId` represents a globally unique identifier for a type.",null,null],[0,"cell","std","Shareable mutable containers.",null,null],[3,"Cell","std::cell","A mutable memory location that admits only `Copy` data.",null,null],[3,"RefCell","","A mutable memory location with dynamically checked borrow rules",null,null],[4,"BorrowState","","An enumeration of values returned from the `state` method on a `RefCell<T>`.",null,null],[13,"Reading","","The cell is currently being read, there is at least one active `borrow`.",1,null],[13,"Writing","","The cell is currently being written to, there is an active `borrow_mut`.",1,null],[13,"Unused","","There are no outstanding borrows on this cell.",1,null],[3,"BorrowError","","An error returned by `RefCell::try_borrow`.",null,null],[3,"BorrowMutError","","An error returned by `RefCell::try_borrow_mut`.",null,null],[3,"Ref","","Wraps a borrowed reference to a value in a `RefCell` box. A wrapper type for an immutably borrowed value from a `RefCell<T>`.",null,null],[3,"RefMut","","A wrapper type for a mutably borrowed value from a `RefCell<T>`.",null,null],[3,"UnsafeCell","","The core primitive for interior mutability in Rust.",null,null],[0,"clone","std","The `Clone` trait for types that cannot be 'implicitly copied'.",null,null],[8,"Clone","std::clone","A common trait for the ability to explicitly duplicate an object.",null,null],[10,"clone","","Returns a copy of the value.",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","Performs copy-assignment from `source`.",2,null],[0,"cmp","std","Functionality for ordering and comparison.",null,null],[8,"PartialEq","std::cmp","Trait for equality comparisons which are partial equivalence relations.",null,null],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used by `==`.",3,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ne","","This method tests for `!=`.",3,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[8,"Eq","","Trait for equality comparisons which are equivalence relations.",null,null],[4,"Ordering","","An `Ordering` is the result of a comparison between two values.",null,null],[13,"Less","","An ordering where a compared value is less [than another].",4,null],[13,"Equal","","An ordering where a compared value is equal [to another].",4,null],[13,"Greater","","An ordering where a compared value is greater [than another].",4,null],[8,"Ord","","Trait for types that form a total order.",null,null],[10,"cmp","","This method returns an `Ordering` between `self` and `other`.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",null,null],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values if one exists.",6,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"option"}}],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `<` operator.",6,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator.",6,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `>` operator.",6,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator.",6,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[5,"min","","Compare and return the minimum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"max","","Compare and return the maximum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"convert","std","Traits for conversions between types.",null,null],[8,"AsRef","std::convert","A cheap, reference-to-reference conversion.",null,null],[10,"as_ref","","Performs the conversion.",7,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"AsMut","","A cheap, mutable reference-to-mutable reference conversion.",null,null],[10,"as_mut","","Performs the conversion.",8,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"Into","","A conversion that consumes `self`, which may or may not be expensive.",null,null],[10,"into","","Performs the conversion.",9,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"From","","Construct `Self` via a conversion.",null,null],[10,"from","","Performs the conversion.",10,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"TryInto","","An attempted conversion that consumes `self`, which may or may not be expensive.",null,null],[16,"Err","","The type returned in the event of a conversion error.",11,null],[10,"try_into","","Performs the conversion.",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"TryFrom","","Attempt to construct `Self` via a conversion.",null,null],[16,"Err","","The type returned in the event of a conversion error.",12,null],[10,"try_from","","Performs the conversion.",12,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[0,"default","std","The `Default` trait for types which may have meaningful default values.",null,null],[8,"Default","std::default","A trait for giving a type a useful default value.",null,null],[10,"default","","Returns the \"default value\" for a type.",13,{"inputs":[],"output":{"name":"self"}}],[0,"hash","std","Generic hashing support.",null,null],[8,"Hash","std::hash","A hashable type.",null,null],[10,"hash","","Feeds this value into the state given, updating the hasher as necessary.",14,null],[11,"hash_slice","","Feeds a slice of this type into the state provided.",14,null],[8,"Hasher","","A trait which represents the ability to hash an arbitrary stream of bytes.",null,null],[10,"finish","","Completes a round of hashing, producing the output hash generated.",15,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"write","","Writes some data into this `Hasher`.",15,null],[11,"write_u8","","Write a single `u8` into this hasher.",15,null],[11,"write_u16","","Writes a single `u16` into this hasher.",15,null],[11,"write_u32","","Writes a single `u32` into this hasher.",15,null],[11,"write_u64","","Writes a single `u64` into this hasher.",15,null],[11,"write_u128","","Writes a single `u128` into this hasher.",15,null],[11,"write_usize","","Writes a single `usize` into this hasher.",15,null],[11,"write_i8","","Writes a single `i8` into this hasher.",15,null],[11,"write_i16","","Writes a single `i16` into this hasher.",15,null],[11,"write_i32","","Writes a single `i32` into this hasher.",15,null],[11,"write_i64","","Writes a single `i64` into this hasher.",15,null],[11,"write_i128","","Writes a single `i128` into this hasher.",15,null],[11,"write_isize","","Writes a single `isize` into this hasher.",15,null],[8,"BuildHasher","","A `BuildHasher` is typically used as a factory for instances of `Hasher` which a `HashMap` can then use to hash keys independently.",null,null],[16,"Hasher","","Type of the hasher that will be created.",16,null],[10,"build_hasher","","Creates a new hasher.",16,null],[3,"BuildHasherDefault","","The `BuildHasherDefault` structure is used in scenarios where one has a type that implements [`Hasher`] and [`Default`], but needs that type to implement [`BuildHasher`].",null,null],[3,"SipHasher24","","An implementation of SipHash 2-4.",null,null],[3,"SipHasher13","","An implementation of SipHash 1-3.",null,null],[3,"SipHasher","","An implementation of SipHash 2-4.",null,null],[0,"intrinsics","std","rustc compiler intrinsics.",null,null],[5,"atomic_cxchg","std::intrinsics","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::SeqCst` as both the `success` and `failure` parameters. For example, `AtomicBool::compare_exchange`.",null,null],[5,"atomic_cxchg_acq","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::Acquire` as both the `success` and `failure` parameters. For example, `AtomicBool::compare_exchange`.",null,null],[5,"atomic_cxchg_rel","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::Release` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, `AtomicBool::compare_exchange`.",null,null],[5,"atomic_cxchg_acqrel","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::AcqRel` as the `success` and `Ordering::Acquire` as the `failure` parameters. For example, `AtomicBool::compare_exchange`.",null,null],[5,"atomic_cxchg_relaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::Relaxed` as both the `success` and `failure` parameters. For example, `AtomicBool::compare_exchange`.",null,null],[5,"atomic_cxchg_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::SeqCst` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, `AtomicBool::compare_exchange`.",null,null],[5,"atomic_cxchg_failacq","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::SeqCst` as the `success` and `Ordering::Acquire` as the `failure` parameters. For example, `AtomicBool::compare_exchange`.",null,null],[5,"atomic_cxchg_acq_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::Acquire` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, `AtomicBool::compare_exchange`.",null,null],[5,"atomic_cxchg_acqrel_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::AcqRel` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, `AtomicBool::compare_exchange`.",null,null],[5,"atomic_cxchgweak","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::SeqCst` as both the `success` and `failure` parameters. For example, `AtomicBool::compare_exchange_weak`.",null,null],[5,"atomic_cxchgweak_acq","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::Acquire` as both the `success` and `failure` parameters. For example, `AtomicBool::compare_exchange_weak`.",null,null],[5,"atomic_cxchgweak_rel","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::Release` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, `AtomicBool::compare_exchange_weak`.",null,null],[5,"atomic_cxchgweak_acqrel","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::AcqRel` as the `success` and `Ordering::Acquire` as the `failure` parameters. For example, `AtomicBool::compare_exchange_weak`.",null,null],[5,"atomic_cxchgweak_relaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::Relaxed` as both the `success` and `failure` parameters. For example, `AtomicBool::compare_exchange_weak`.",null,null],[5,"atomic_cxchgweak_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::SeqCst` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, `AtomicBool::compare_exchange_weak`.",null,null],[5,"atomic_cxchgweak_failacq","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::SeqCst` as the `success` and `Ordering::Acquire` as the `failure` parameters. For example, `AtomicBool::compare_exchange_weak`.",null,null],[5,"atomic_cxchgweak_acq_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::Acquire` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, `AtomicBool::compare_exchange_weak`.",null,null],[5,"atomic_cxchgweak_acqrel_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::AcqRel` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, `AtomicBool::compare_exchange_weak`.",null,null],[5,"atomic_load","","Loads the current value of the pointer. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `load` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::load`.",null,null],[5,"atomic_load_acq","","Loads the current value of the pointer. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `load` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::load`.",null,null],[5,"atomic_load_relaxed","","Loads the current value of the pointer. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `load` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::load`.",null,null],[5,"atomic_load_unordered","","",null,null],[5,"atomic_store","","Stores the value at the specified memory location. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `store` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::store`.",null,null],[5,"atomic_store_rel","","Stores the value at the specified memory location. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `store` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::store`.",null,null],[5,"atomic_store_relaxed","","Stores the value at the specified memory location. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `store` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::store`.",null,null],[5,"atomic_store_unordered","","",null,null],[5,"atomic_xchg","","Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `swap` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::swap`.",null,null],[5,"atomic_xchg_acq","","Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `swap` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::swap`.",null,null],[5,"atomic_xchg_rel","","Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `swap` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::swap`.",null,null],[5,"atomic_xchg_acqrel","","Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `swap` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicBool::swap`.",null,null],[5,"atomic_xchg_relaxed","","Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `swap` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::swap`.",null,null],[5,"atomic_xadd","","Add to the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_add` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicIsize::fetch_add`.",null,null],[5,"atomic_xadd_acq","","Add to the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_add` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicIsize::fetch_add`.",null,null],[5,"atomic_xadd_rel","","Add to the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_add` method by passing `Ordering::Release` as the `order`. For example, `AtomicIsize::fetch_add`.",null,null],[5,"atomic_xadd_acqrel","","Add to the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_add` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicIsize::fetch_add`.",null,null],[5,"atomic_xadd_relaxed","","Add to the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_add` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicIsize::fetch_add`.",null,null],[5,"atomic_xsub","","Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_sub` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicIsize::fetch_sub`.",null,null],[5,"atomic_xsub_acq","","Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_sub` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicIsize::fetch_sub`.",null,null],[5,"atomic_xsub_rel","","Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_sub` method by passing `Ordering::Release` as the `order`. For example, `AtomicIsize::fetch_sub`.",null,null],[5,"atomic_xsub_acqrel","","Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_sub` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicIsize::fetch_sub`.",null,null],[5,"atomic_xsub_relaxed","","Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_sub` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicIsize::fetch_sub`.",null,null],[5,"atomic_and","","Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_and` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::fetch_and`.",null,null],[5,"atomic_and_acq","","Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_and` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::fetch_and`.",null,null],[5,"atomic_and_rel","","Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_and` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::fetch_and`.",null,null],[5,"atomic_and_acqrel","","Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_and` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicBool::fetch_and`.",null,null],[5,"atomic_and_relaxed","","Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_and` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::fetch_and`.",null,null],[5,"atomic_nand","","Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::fetch_nand`.",null,null],[5,"atomic_nand_acq","","Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::fetch_nand`.",null,null],[5,"atomic_nand_rel","","Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::fetch_nand`.",null,null],[5,"atomic_nand_acqrel","","Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicBool::fetch_nand`.",null,null],[5,"atomic_nand_relaxed","","Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::fetch_nand`.",null,null],[5,"atomic_or","","Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_or` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::fetch_or`.",null,null],[5,"atomic_or_acq","","Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_or` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::fetch_or`.",null,null],[5,"atomic_or_rel","","Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_or` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::fetch_or`.",null,null],[5,"atomic_or_acqrel","","Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_or` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicBool::fetch_or`.",null,null],[5,"atomic_or_relaxed","","Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_or` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::fetch_or`.",null,null],[5,"atomic_xor","","Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_xor` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::fetch_xor`.",null,null],[5,"atomic_xor_acq","","Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_xor` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::fetch_xor`.",null,null],[5,"atomic_xor_rel","","Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_xor` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::fetch_xor`.",null,null],[5,"atomic_xor_acqrel","","Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_xor` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicBool::fetch_xor`.",null,null],[5,"atomic_xor_relaxed","","Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_xor` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::fetch_xor`.",null,null],[5,"atomic_max","","",null,null],[5,"atomic_max_acq","","",null,null],[5,"atomic_max_rel","","",null,null],[5,"atomic_max_acqrel","","",null,null],[5,"atomic_max_relaxed","","",null,null],[5,"atomic_min","","",null,null],[5,"atomic_min_acq","","",null,null],[5,"atomic_min_rel","","",null,null],[5,"atomic_min_acqrel","","",null,null],[5,"atomic_min_relaxed","","",null,null],[5,"atomic_umin","","",null,null],[5,"atomic_umin_acq","","",null,null],[5,"atomic_umin_rel","","",null,null],[5,"atomic_umin_acqrel","","",null,null],[5,"atomic_umin_relaxed","","",null,null],[5,"atomic_umax","","",null,null],[5,"atomic_umax_acq","","",null,null],[5,"atomic_umax_rel","","",null,null],[5,"atomic_umax_acqrel","","",null,null],[5,"atomic_umax_relaxed","","",null,null],[5,"atomic_fence","","",null,null],[5,"atomic_fence_acq","","",null,null],[5,"atomic_fence_rel","","",null,null],[5,"atomic_fence_acqrel","","",null,null],[5,"atomic_singlethreadfence","","A compiler-only memory barrier.",null,null],[5,"atomic_singlethreadfence_acq","","",null,null],[5,"atomic_singlethreadfence_rel","","",null,null],[5,"atomic_singlethreadfence_acqrel","","",null,null],[5,"rustc_peek","","Magic intrinsic that derives its meaning from attributes attached to the function.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abort","","Aborts the execution of the process.",null,null],[5,"unreachable","","Tells LLVM that this point in the code is not reachable, enabling further optimizations.",null,null],[5,"assume","","Informs the optimizer that a condition is always true. If the condition is false, the behavior is undefined.",null,null],[5,"likely","","Hints to the compiler that branch condition is likely to be true. Returns the value passed to it.",null,{"inputs":[{"name":"bool"}],"output":{"name":"bool"}}],[5,"unlikely","","Hints to the compiler that branch condition is likely to be false. Returns the value passed to it.",null,{"inputs":[{"name":"bool"}],"output":{"name":"bool"}}],[5,"breakpoint","","Executes a breakpoint trap, for inspection by a debugger.",null,null],[5,"size_of","","The size of a type in bytes.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"move_val_init","","Moves a value to an uninitialized memory location.",null,null],[5,"min_align_of","","",null,{"inputs":[],"output":{"name":"usize"}}],[5,"pref_align_of","","",null,{"inputs":[],"output":{"name":"usize"}}],[5,"size_of_val","","",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"min_align_of_val","","",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"drop_in_place","","Executes the destructor (if any) of the pointed-to value.",null,null],[5,"type_name","","Gets a static string slice containing the name of a type.",null,{"inputs":[],"output":{"name":"str"}}],[5,"type_id","","Gets an identifier which is globally unique to the specified type. This function will return the same value for a type regardless of whichever crate it is invoked in.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"init","","Creates a value initialized to zero.",null,{"inputs":[],"output":{"name":"t"}}],[5,"uninit","","Creates an uninitialized value.",null,{"inputs":[],"output":{"name":"t"}}],[5,"forget","","Moves a value out of scope without running drop glue.",null,null],[5,"transmute","","Reinterprets the bits of a value of one type as another type.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[5,"needs_drop","","Returns `true` if the actual type given as `T` requires drop glue; returns `false` if the actual type provided for `T` implements `Copy`.",null,{"inputs":[],"output":{"name":"bool"}}],[5,"offset","","Calculates the offset from a pointer.",null,null],[5,"arith_offset","","Calculates the offset from a pointer, potentially wrapping.",null,null],[5,"copy_nonoverlapping","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source and destination may *not* overlap.",null,null],[5,"copy","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source and destination may overlap.",null,null],[5,"write_bytes","","Invokes memset on the specified pointer, setting `count * size_of::<T>()` bytes of memory starting at `dst` to `val`.",null,null],[5,"volatile_copy_nonoverlapping_memory","","Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*` intrinsic, with a size of `count` * `size_of::<T>()` and an alignment of `min_align_of::<T>()`",null,null],[5,"volatile_copy_memory","","Equivalent to the appropriate `llvm.memmove.p0i8.0i8.*` intrinsic, with a size of `count` * `size_of::<T>()` and an alignment of `min_align_of::<T>()`",null,null],[5,"volatile_set_memory","","Equivalent to the appropriate `llvm.memset.p0i8.*` intrinsic, with a size of `count` * `size_of::<T>()` and an alignment of `min_align_of::<T>()`.",null,null],[5,"volatile_load","","Perform a volatile load from the `src` pointer. The stabilized version of this intrinsic is `std::ptr::read_volatile`.",null,null],[5,"volatile_store","","Perform a volatile store to the `dst` pointer. The stabilized version of this intrinsic is `std::ptr::write_volatile`.",null,null],[5,"sqrtf32","","Returns the square root of an `f32`",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"sqrtf64","","Returns the square root of an `f64`",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"powif32","","Raises an `f32` to an integer power.",null,{"inputs":[{"name":"f32"},{"name":"i32"}],"output":{"name":"f32"}}],[5,"powif64","","Raises an `f64` to an integer power.",null,{"inputs":[{"name":"f64"},{"name":"i32"}],"output":{"name":"f64"}}],[5,"sinf32","","Returns the sine of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"sinf64","","Returns the sine of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"cosf32","","Returns the cosine of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"cosf64","","Returns the cosine of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"powf32","","Raises an `f32` to an `f32` power.",null,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"powf64","","Raises an `f64` to an `f64` power.",null,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"expf32","","Returns the exponential of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"expf64","","Returns the exponential of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"exp2f32","","Returns 2 raised to the power of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"exp2f64","","Returns 2 raised to the power of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"logf32","","Returns the natural logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"logf64","","Returns the natural logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"log10f32","","Returns the base 10 logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"log10f64","","Returns the base 10 logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"log2f32","","Returns the base 2 logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"log2f64","","Returns the base 2 logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"fmaf32","","Returns `a * b + c` for `f32` values.",null,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"fmaf64","","Returns `a * b + c` for `f64` values.",null,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"fabsf32","","Returns the absolute value of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"fabsf64","","Returns the absolute value of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"copysignf32","","Copies the sign from `y` to `x` for `f32` values.",null,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"copysignf64","","Copies the sign from `y` to `x` for `f64` values.",null,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"floorf32","","Returns the largest integer less than or equal to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"floorf64","","Returns the largest integer less than or equal to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"ceilf32","","Returns the smallest integer greater than or equal to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"ceilf64","","Returns the smallest integer greater than or equal to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"truncf32","","Returns the integer part of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"truncf64","","Returns the integer part of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"rintf32","","Returns the nearest integer to an `f32`. May raise an inexact floating-point exception if the argument is not an integer.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"rintf64","","Returns the nearest integer to an `f64`. May raise an inexact floating-point exception if the argument is not an integer.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"nearbyintf32","","Returns the nearest integer to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"nearbyintf64","","Returns the nearest integer to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"roundf32","","Returns the nearest integer to an `f32`. Rounds half-way cases away from zero.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"roundf64","","Returns the nearest integer to an `f64`. Rounds half-way cases away from zero.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"fadd_fast","","Float addition that allows optimizations based on algebraic rules. May assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"fsub_fast","","Float subtraction that allows optimizations based on algebraic rules. May assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"fmul_fast","","Float multiplication that allows optimizations based on algebraic rules. May assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"fdiv_fast","","Float division that allows optimizations based on algebraic rules. May assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"frem_fast","","Float remainder that allows optimizations based on algebraic rules. May assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"ctpop","","Returns the number of bits set in an integer type `T`",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"ctlz","","Returns the number of leading unset bits (zeroes) in an integer type `T`.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"cttz","","Returns the number of trailing unset bits (zeroes) in an integer type `T`.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"bswap","","Reverses the bytes in an integer type `T`.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"add_with_overflow","","Performs checked integer addition. The stabilized versions of this intrinsic are available on the integer primitives via the `overflowing_add` method. For example, `std::u32::overflowing_add`",null,null],[5,"sub_with_overflow","","Performs checked integer subtraction The stabilized versions of this intrinsic are available on the integer primitives via the `overflowing_sub` method. For example, `std::u32::overflowing_sub`",null,null],[5,"mul_with_overflow","","Performs checked integer multiplication The stabilized versions of this intrinsic are available on the integer primitives via the `overflowing_mul` method. For example, `std::u32::overflowing_mul`",null,null],[5,"unchecked_div","","Performs an unchecked division, resulting in undefined behavior where y = 0 or x = `T::min_value()` and y = -1",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"unchecked_rem","","Returns the remainder of an unchecked division, resulting in undefined behavior where y = 0 or x = `T::min_value()` and y = -1",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_add","","Returns (a + b) mod 2^N, where N is the width of T in bits. The stabilized versions of this intrinsic are available on the integer primitives via the `wrapping_add` method. For example, `std::u32::wrapping_add`",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_sub","","Returns (a - b) mod 2^N, where N is the width of T in bits. The stabilized versions of this intrinsic are available on the integer primitives via the `wrapping_sub` method. For example, `std::u32::wrapping_sub`",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_mul","","Returns (a * b) mod 2^N, where N is the width of T in bits. The stabilized versions of this intrinsic are available on the integer primitives via the `wrapping_mul` method. For example, `std::u32::wrapping_mul`",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"discriminant_value","","Returns the value of the discriminant for the variant in 'v', cast to a `u64`; if `T` has no discriminant, returns 0.",null,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[5,"try","","Rust's \"try catch\" construct which invokes the function pointer `f` with the data pointer `data`.",null,null],[0,"iter","std","Composable external iteration.",null,null],[3,"Rev","std::iter","An double-ended iterator with the direction inverted.",null,null],[3,"Cloned","","An iterator that clones the elements of an underlying iterator.",null,null],[3,"Cycle","","An iterator that repeats endlessly.",null,null],[3,"Chain","","An iterator that strings two iterators together.",null,null],[3,"Zip","","An iterator that iterates two other iterators simultaneously.",null,null],[3,"Map","","An iterator that maps the values of `iter` with `f`.",null,null],[3,"Filter","","An iterator that filters the elements of `iter` with `predicate`.",null,null],[3,"FilterMap","","An iterator that uses `f` to both filter and map elements from `iter`.",null,null],[3,"Enumerate","","An iterator that yields the current count and the element during iteration.",null,null],[3,"Peekable","","An iterator with a `peek()` that returns an optional reference to the next element.",null,null],[3,"SkipWhile","","An iterator that rejects elements while `predicate` is true.",null,null],[3,"TakeWhile","","An iterator that only accepts elements while `predicate` is true.",null,null],[3,"Skip","","An iterator that skips over `n` elements of `iter`.",null,null],[3,"Take","","An iterator that only iterates over the first `n` iterations of `iter`.",null,null],[3,"Scan","","An iterator to maintain state while iterating another iterator.",null,null],[3,"FlatMap","","An iterator that maps each element to an iterator, and yields the elements of the produced iterators.",null,null],[3,"Fuse","","An iterator that yields `None` forever after the underlying iterator yields `None` once.",null,null],[3,"Inspect","","An iterator that calls a function with a reference to each element before yielding it.",null,null],[8,"ExactSizeIterator","","An iterator that knows its exact length.",null,null],[11,"len","","Returns the exact number of times the iterator will iterate.",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the iterator is empty.",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[3,"Empty","","An iterator that yields nothing.",null,null],[8,"Step","","Objects that can be stepped over in both directions.",null,null],[10,"step","","Steps `self` if possible.",18,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[10,"steps_between","","Returns the number of steps between two step objects. The count is inclusive of `start` and exclusive of `end`.",18,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[10,"steps_between_by_one","","Same as `steps_between`, but with a `by` of 1",18,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[10,"is_negative","","Tests whether this step is negative or not (going backwards)",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"replace_one","","Replaces this step with `1`, returning itself",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"replace_zero","","Replaces this step with `0`, returning itself",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"add_one","","Adds one to this step, returning the result",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sub_one","","Subtracts one to this step, returning the result",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[8,"IntoIterator","","Conversion into an `Iterator`.",null,null],[16,"Item","","The type of the elements being iterated over.",19,null],[16,"IntoIter","","Which kind of iterator are we turning this into?",19,null],[10,"into_iter","","Creates an iterator from a value.",19,null],[8,"DoubleEndedIterator","","An iterator able to yield elements from both ends.",null,null],[10,"next_back","","Removes and returns an element from the end of the iterator.",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[3,"StepBy","","An adapter for stepping range iterators by a custom amount.",null,null],[8,"Product","","Trait to represent types that can be created by multiplying elements of an iterator.",null,null],[10,"product","","Method which takes an iterator and generates `Self` from the elements by multiplying the items.",21,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[3,"Once","","An iterator that yields an element exactly once.",null,null],[5,"once","","Creates an iterator that yields an element exactly once.",null,{"inputs":[{"name":"t"}],"output":{"name":"once"}}],[8,"Sum","","Trait to represent types that can be created by summing up an iterator.",null,null],[10,"sum","","Method which takes an iterator and generates `Self` from the elements by \"summing up\" the items.",22,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[8,"Extend","","Extend a collection with the contents of an iterator.",null,null],[10,"extend","","Extends a collection with the contents of an iterator.",23,null],[8,"TrustedLen","","An iterator that reports an accurate length using size_hint.",null,null],[8,"FusedIterator","","An iterator that always continues to yield `None` when exhausted.",null,null],[8,"Iterator","","An interface for dealing with iterators.",null,null],[16,"Item","","The type of the elements being iterated over.",24,null],[10,"next","","Advances the iterator and returns the next value.",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",24,null],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",24,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","Consumes the iterator, returning the last element.",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","Returns the `n`th element of the iterator.",24,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",24,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"chain"}}],[11,"zip","","'Zips up' two iterators into a single iterator of pairs.",24,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"zip"}}],[11,"map","","Takes a closure and creates an iterator which calls that closure on each element.",24,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"filter","","Creates an iterator which uses a closure to determine if an element should be yielded.",24,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"filter"}}],[11,"filter_map","","Creates an iterator that both filters and maps.",24,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as the next value.",24,{"inputs":[{"name":"self"}],"output":{"name":"enumerate"}}],[11,"peekable","","Creates an iterator which can use `peek` to look at the next element of the iterator without consuming it.",24,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"skip_while","","Creates an iterator that [`skip()`]s elements based on a predicate.",24,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",24,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"skip","","Creates an iterator that skips the first `n` elements.",24,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"take","","Creates an iterator that yields its first `n` elements.",24,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"take"}}],[11,"scan","","An iterator adaptor similar to [`fold()`] that holds internal state and produces a new iterator.",24,{"inputs":[{"name":"self"},{"name":"st"},{"name":"f"}],"output":{"name":"scan"}}],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",24,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"flatmap"}}],[11,"fuse","","Creates an iterator which ends after the first [`None`].",24,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with each element of an iterator, passing the value on.",24,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"by_ref","","Borrows an iterator, rather than consuming it.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"collect","","Transforms an iterator into a collection.",24,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"partition","","Consumes an iterator, creating two collections from it.",24,null],[11,"fold","","An iterator adaptor that applies a function, producing a single, final value.",24,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"all","","Tests if every element of the iterator matches a predicate.",24,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","Tests if any element of the iterator matches a predicate.",24,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",24,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"position","","Searches for an element in an iterator, returning its index.",24,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"rposition","","Searches for an element in an iterator from the right, returning its index.",24,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"max","","Returns the maximum element of an iterator.",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"min","","Returns the minimum element of an iterator.",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"max_by_key","","Returns the element that gives the maximum value from the specified function.",24,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"max_by","","Returns the element that gives the maximum value with respect to the specified comparison function.",24,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by_key","","Returns the element that gives the minimum value from the specified function.",24,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by","","Returns the element that gives the minimum value with respect to the specified comparison function.",24,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"rev","","Reverses an iterator's direction.",24,{"inputs":[{"name":"self"}],"output":{"name":"rev"}}],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",24,null],[11,"cloned","","Creates an iterator which [`clone()`]s all of its elements.",24,{"inputs":[{"name":"self"}],"output":{"name":"cloned"}}],[11,"cycle","","Repeats an iterator endlessly.",24,{"inputs":[{"name":"self"}],"output":{"name":"cycle"}}],[11,"sum","","Sums the elements of an iterator.",24,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"product","","Iterates over the entire iterator, multiplying all the elements",24,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those of another.",24,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those of another.",24,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of another.",24,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of another.",24,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically less than those of another.",24,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"le","","Determines if the elements of this `Iterator` are lexicographically less or equal to those of another.",24,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically greater than those of another.",24,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically greater than or equal to those of another.",24,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[5,"repeat","","Creates a new iterator that endlessly repeats a single element.",null,{"inputs":[{"name":"t"}],"output":{"name":"repeat"}}],[3,"Repeat","","An iterator that repeats an element endlessly.",null,null],[5,"empty","","Creates an iterator that yields nothing.",null,{"inputs":[],"output":{"name":"empty"}}],[8,"FromIterator","","Conversion from an `Iterator`.",null,null],[10,"from_iter","","Creates a value from an iterator.",25,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"marker","std","Primitive traits and types representing basic properties of types.",null,null],[8,"Send","std::marker","Types that can be transferred across thread boundaries.",null,null],[8,"Sized","","Types with a constant size known at compile time.",null,null],[8,"Unsize","","Types that can be \"unsized\" to a dynamically-sized type.",null,null],[8,"Copy","","Types whose values can be duplicated simply by copying bits.",null,null],[8,"Sync","","Types for which it is safe to share references between threads.",null,null],[3,"PhantomData","","Zero-sized type used to mark things that \"act like\" they own a `T`.",null,null],[8,"Reflect","","Types that can be reflected over.",null,null],[0,"mem","std","Basic functions for dealing with memory.",null,null],[5,"forget","std::mem","Leaks a value: takes ownership and \"forgets\" about the value **without running its destructor**.",null,null],[5,"size_of","","Returns the size of a type in bytes.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"size_of_val","","Returns the size of the pointed-to value in bytes.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"min_align_of","","Returns the [ABI]-required minimum alignment of a type.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"min_align_of_val","","Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"align_of","","Returns the [ABI]-required minimum alignment of a type.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"align_of_val","","Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"zeroed","","Creates a value whose bytes are all zero.",null,{"inputs":[],"output":{"name":"t"}}],[5,"uninitialized","","Bypasses Rust's normal memory-initialization checks by pretending to produce a value of type `T`, while doing nothing at all.",null,{"inputs":[],"output":{"name":"t"}}],[5,"swap","","Swaps the values at two mutable locations, without deinitializing either one.",null,null],[5,"replace","","Replaces the value at a mutable location with a new one, returning the old value, without deinitializing either one.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"drop","","Disposes of a value.",null,null],[5,"transmute_copy","","Interprets `src` as having type `&U`, and then reads `src` without moving the contained value.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[3,"Discriminant","","Opaque type representing the discriminant of an enum.",null,null],[5,"discriminant","","Returns a value uniquely identifying the enum variant in `v`.",null,{"inputs":[{"name":"t"}],"output":{"name":"discriminant"}}],[5,"transmute","","Reinterprets the bits of a value of one type as another type.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[0,"ops","std","Overloadable operators.",null,null],[8,"Drop","std::ops","The `Drop` trait is used to run some code when a value goes out of scope. This is sometimes called a 'destructor'.",null,null],[10,"drop","","A method called when the value goes out of scope.",26,null],[8,"Add","","The `Add` trait is used to specify the functionality of `+`.",null,null],[16,"Output","","The resulting type after applying the `+` operator",27,null],[10,"add","","The method for the `+` operator",27,null],[8,"Sub","","The `Sub` trait is used to specify the functionality of `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator",28,null],[10,"sub","","The method for the `-` operator",28,null],[8,"Mul","","The `Mul` trait is used to specify the functionality of `*`.",null,null],[16,"Output","","The resulting type after applying the `*` operator",29,null],[10,"mul","","The method for the `*` operator",29,null],[8,"Div","","The `Div` trait is used to specify the functionality of `/`.",null,null],[16,"Output","","The resulting type after applying the `/` operator",30,null],[10,"div","","The method for the `/` operator",30,null],[8,"Rem","","The `Rem` trait is used to specify the functionality of `%`.",null,null],[16,"Output","","The resulting type after applying the `%` operator",31,null],[10,"rem","","The method for the `%` operator",31,null],[8,"Neg","","The `Neg` trait is used to specify the functionality of unary `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator",32,null],[10,"neg","","The method for the unary `-` operator",32,null],[8,"Not","","The `Not` trait is used to specify the functionality of unary `!`.",null,null],[16,"Output","","The resulting type after applying the `!` operator",33,null],[10,"not","","The method for the unary `!` operator",33,null],[8,"BitAnd","","The `BitAnd` trait is used to specify the functionality of `&`.",null,null],[16,"Output","","The resulting type after applying the `&` operator",34,null],[10,"bitand","","The method for the `&` operator",34,null],[8,"BitOr","","The `BitOr` trait is used to specify the functionality of `|`.",null,null],[16,"Output","","The resulting type after applying the `|` operator",35,null],[10,"bitor","","The method for the `|` operator",35,null],[8,"BitXor","","The `BitXor` trait is used to specify the functionality of `^`.",null,null],[16,"Output","","The resulting type after applying the `^` operator",36,null],[10,"bitxor","","The method for the `^` operator",36,null],[8,"Shl","","The `Shl` trait is used to specify the functionality of `<<`.",null,null],[16,"Output","","The resulting type after applying the `<<` operator",37,null],[10,"shl","","The method for the `<<` operator",37,null],[8,"Shr","","The `Shr` trait is used to specify the functionality of `>>`.",null,null],[16,"Output","","The resulting type after applying the `>>` operator",38,null],[10,"shr","","The method for the `>>` operator",38,null],[8,"AddAssign","","The `AddAssign` trait is used to specify the functionality of `+=`.",null,null],[10,"add_assign","","The method for the `+=` operator",39,null],[8,"SubAssign","","The `SubAssign` trait is used to specify the functionality of `-=`.",null,null],[10,"sub_assign","","The method for the `-=` operator",40,null],[8,"MulAssign","","The `MulAssign` trait is used to specify the functionality of `*=`.",null,null],[10,"mul_assign","","The method for the `*=` operator",41,null],[8,"DivAssign","","The `DivAssign` trait is used to specify the functionality of `/=`.",null,null],[10,"div_assign","","The method for the `/=` operator",42,null],[8,"RemAssign","","The `RemAssign` trait is used to specify the functionality of `%=`.",null,null],[10,"rem_assign","","The method for the `%=` operator",43,null],[8,"BitAndAssign","","The `BitAndAssign` trait is used to specify the functionality of `&=`.",null,null],[10,"bitand_assign","","The method for the `&=` operator",44,null],[8,"BitOrAssign","","The `BitOrAssign` trait is used to specify the functionality of `|=`.",null,null],[10,"bitor_assign","","The method for the `|=` operator",45,null],[8,"BitXorAssign","","The `BitXorAssign` trait is used to specify the functionality of `^=`.",null,null],[10,"bitxor_assign","","The method for the `^=` operator",46,null],[8,"ShlAssign","","The `ShlAssign` trait is used to specify the functionality of `<<=`.",null,null],[10,"shl_assign","","The method for the `<<=` operator",47,null],[8,"ShrAssign","","The `ShrAssign` trait is used to specify the functionality of `>>=`.",null,null],[10,"shr_assign","","The method for the `>>=` operator",48,null],[8,"Index","","The `Index` trait is used to specify the functionality of indexing operations like `container[index]` when used in an immutable context.",null,null],[16,"Output","","The returned type after indexing",49,null],[10,"index","","The method for the indexing (`container[index]`) operation",49,null],[8,"IndexMut","","The `IndexMut` trait is used to specify the functionality of indexing operations like `container[index]` when used in a mutable context.",null,null],[10,"index_mut","","The method for the mutable indexing (`container[index]`) operation",50,null],[3,"RangeFull","","An unbounded range. Use `..` (two dots) for its shorthand.",null,null],[3,"Range","","A (half-open) range which is bounded at both ends: { x | start <= x < end }. Use `start..end` (two dots) for its shorthand.",null,null],[12,"start","","The lower bound of the range (inclusive).",51,null],[12,"end","","The upper bound of the range (exclusive).",51,null],[3,"RangeFrom","","A range which is only bounded below: { x | start <= x }. Use `start..` for its shorthand.",null,null],[12,"start","","The lower bound of the range (inclusive).",52,null],[3,"RangeTo","","A range which is only bounded above: { x | x < end }. Use `..end` (two dots) for its shorthand.",null,null],[12,"end","","The upper bound of the range (exclusive).",53,null],[4,"RangeInclusive","","An inclusive range which is bounded at both ends: { x | start <= x <= end }. Use `start...end` (three dots) for its shorthand.",null,null],[13,"Empty","","Empty range (iteration has finished)",54,null],[12,"at","std::ops::RangeInclusive","The point at which iteration finished",54,null],[13,"NonEmpty","std::ops","Non-empty range (iteration will yield value(s))",54,null],[12,"start","std::ops::RangeInclusive","The lower bound of the range (inclusive).",54,null],[12,"end","","The upper bound of the range (inclusive).",54,null],[3,"RangeToInclusive","std::ops","An inclusive range which is only bounded above: { x | x <= end }. Use `...end` (three dots) for its shorthand.",null,null],[12,"end","","The upper bound of the range (inclusive)",55,null],[8,"Deref","","The `Deref` trait is used to specify the functionality of dereferencing operations, like `*v`.",null,null],[16,"Target","","The resulting type after dereferencing",56,null],[10,"deref","","The method called to dereference a value",56,null],[8,"DerefMut","","The `DerefMut` trait is used to specify the functionality of dereferencing mutably like `*v = 1;`",null,null],[10,"deref_mut","","The method called to mutably dereference a value",57,null],[8,"Fn","","A version of the call operator that takes an immutable receiver.",null,null],[10,"call","","This is called when the call operator is used.",58,null],[8,"FnMut","","A version of the call operator that takes a mutable receiver.",null,null],[10,"call_mut","","This is called when the call operator is used.",59,null],[8,"FnOnce","","A version of the call operator that takes a by-value receiver.",null,null],[16,"Output","","The returned type after the call operator is used.",60,null],[10,"call_once","","This is called when the call operator is used.",60,null],[8,"CoerceUnsized","","Trait that indicates that this is a pointer or a wrapper for one, where unsizing can be performed on the pointee.",null,null],[8,"Place","","Both `in (PLACE) EXPR` and `box EXPR` desugar into expressions that allocate an intermediate \"place\" that holds uninitialized state.  The desugaring evaluates EXPR, and writes the result at the address returned by the `pointer` method of this trait.",null,null],[10,"pointer","","Returns the address where the input value will be written. Note that the data at this address is generally uninitialized, and thus one should use `ptr::write` for initializing it.",61,null],[8,"Placer","","Interface to implementations of  `in (PLACE) EXPR`.",null,null],[16,"Place","","`Place` is the intermedate agent guarding the uninitialized state for `Data`.",62,null],[10,"make_place","","Creates a fresh place from `self`.",62,null],[8,"InPlace","","Specialization of `Place` trait supporting `in (PLACE) EXPR`.",null,null],[16,"Owner","","`Owner` is the type of the end value of `in (PLACE) EXPR`",63,null],[10,"finalize","","Converts self into the final value, shifting deallocation/cleanup responsibilities (if any remain), over to the returned instance of `Owner` and forgetting self.",63,null],[8,"Boxed","","Core trait for the `box EXPR` form.",null,null],[16,"Data","","The kind of data that is stored in this kind of box.",64,null],[16,"Place","","The place that will negotiate the storage of the data.",64,null],[10,"finalize","","Converts filled place into final owning value, shifting deallocation/cleanup responsibilities (if any remain), over to returned instance of `Self` and forgetting `filled`.",64,null],[8,"BoxPlace","","Specialization of `Place` trait supporting `box EXPR`.",null,null],[10,"make_place","","Creates a globally fresh place.",65,{"inputs":[],"output":{"name":"self"}}],[8,"Carrier","","A trait for types which have success and error states and are meant to work with the question mark operator. When the `?` operator is used with a value, whether the value is in the success or error state is determined by calling `translate`.",null,null],[16,"Success","","The type of the value when computation succeeds.",66,null],[16,"Error","","The type of the value when computation errors out.",66,null],[10,"from_success","","Create a `Carrier` from a success value.",66,null],[10,"from_error","","Create a `Carrier` from an error value.",66,null],[10,"translate","","Translate this `Carrier` to another implementation of `Carrier` with the same associated types.",66,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[0,"ptr","std","Raw, unsafe pointers, `*const T`, and `*mut T`.",null,null],[5,"null","std::ptr","Creates a null raw pointer.",null,null],[5,"null_mut","","Creates a null mutable raw pointer.",null,null],[5,"swap","","Swaps the values at two mutable locations of the same type, without deinitializing either. They may overlap, unlike `mem::swap` which is otherwise equivalent.",null,null],[5,"replace","","Replaces the value at `dest` with `src`, returning the old value, without dropping either.",null,null],[5,"read","","Reads the value from `src` without moving it. This leaves the memory in `src` unchanged.",null,null],[5,"read_unaligned","","Reads the value from `src` without moving it. This leaves the memory in `src` unchanged.",null,null],[5,"write","","Overwrites a memory location with the given value without reading or dropping the old value.",null,null],[5,"write_unaligned","","Overwrites a memory location with the given value without reading or dropping the old value.",null,null],[5,"read_volatile","","Performs a volatile read of the value from `src` without moving it. This leaves the memory in `src` unchanged.",null,null],[5,"write_volatile","","Performs a volatile write of a memory location with the given value without reading or dropping the old value.",null,null],[5,"eq","","Compare raw pointers for equality.",null,null],[3,"Unique","","A wrapper around a raw non-null `*mut T` that indicates that the possessor of this wrapper owns the referent. This in turn implies that the `Unique<T>` is `Send`/`Sync` if `T` is `Send`/`Sync`, unlike a raw `*mut T` (which conveys no particular ownership semantics).  It also implies that the referent of the pointer should not be modified without a unique path to the `Unique` reference. Useful for building abstractions like `Vec<T>` or `Box<T>`, which internally use raw pointers to manage the memory that they own.",null,null],[3,"Shared","","A wrapper around a raw non-null `*mut T` that indicates that the possessor of this wrapper has shared ownership of the referent. Useful for building abstractions like `Rc<T>` or `Arc<T>`, which internally use raw pointers to manage the memory that they own.",null,null],[5,"copy","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source and destination may overlap.",null,null],[5,"write_bytes","","Invokes memset on the specified pointer, setting `count * size_of::<T>()` bytes of memory starting at `dst` to `val`.",null,null],[5,"drop_in_place","","Executes the destructor (if any) of the pointed-to value.",null,null],[5,"copy_nonoverlapping","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source and destination may *not* overlap.",null,null],[0,"raw","std","Contains struct definitions for the layout of compiler built-in types.",null,null],[3,"TraitObject","std::raw","The representation of a trait object like `&SomeTrait`.",null,null],[12,"data","","",67,null],[12,"vtable","","",67,null],[0,"result","std","Error handling with the `Result` type.",null,null],[4,"Result","std::result","`Result` is a type that represents either success (`Ok`) or failure (`Err`).",null,null],[13,"Ok","","Contains the success value",68,null],[13,"Err","","Contains the error value",68,null],[3,"Iter","","An iterator over a reference to the [`Ok`] variant of a [`Result`].",null,null],[3,"IterMut","","An iterator over a mutable reference to the [`Ok`] variant of a [`Result`].",null,null],[3,"IntoIter","","An iterator over the value in a [`Ok`] variant of a [`Result`].",null,null],[0,"option","std","Optional values.",null,null],[4,"Option","std::option","The `Option` type. See the module level documentation for more.",null,null],[13,"None","","No value",69,null],[13,"Some","","Some value `T`",69,null],[3,"Iter","","An iterator over a reference of the contained item in an [`Option`].",null,null],[3,"IterMut","","An iterator over a mutable reference of the contained item in an [`Option`].",null,null],[3,"IntoIter","","An iterator over the item contained inside an [`Option`].",null,null],[0,"isize","std","The pointer-sized signed integer type.",null,null],[17,"MIN","std::isize","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"i8","std","The 8-bit signed integer type.",null,null],[17,"MIN","std::i8","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"i16","std","The 16-bit signed integer type.",null,null],[17,"MIN","std::i16","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"i32","std","The 32-bit signed integer type.",null,null],[17,"MIN","std::i32","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"i64","std","The 64-bit signed integer type.",null,null],[17,"MIN","std::i64","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"usize","std","The pointer-sized unsigned integer type.",null,null],[17,"MIN","std::usize","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"u8","std","The 8-bit unsigned integer type.",null,null],[17,"MIN","std::u8","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"u16","std","The 16-bit unsigned integer type.",null,null],[17,"MIN","std::u16","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"u32","std","The 32-bit unsigned integer type.",null,null],[17,"MIN","std::u32","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"u64","std","The 64-bit unsigned integer type.",null,null],[17,"MIN","std::u64","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"boxed","std","A pointer type for heap allocation.",null,null],[17,"HEAP","std::boxed","A value that represents the heap. This is the default place that the `box` keyword allocates into when no place is supplied.",null,null],[3,"ExchangeHeapSingleton","","This the singleton type used solely for `boxed::HEAP`.",null,null],[3,"Box","","A pointer type for heap allocation.",null,null],[3,"IntermediateBox","","`IntermediateBox` represents uninitialized backing storage for `Box`.",null,null],[8,"FnBox","","`FnBox` is a version of the `FnOnce` intended for use with boxed closure objects. The idea is that where one would normally store a `Box<FnOnce()>` in a data structure, you should use `Box<FnBox()>`. The two traits behave essentially the same, except that a `FnBox` closure can only be called if it is boxed. (Note that `FnBox` may be deprecated in the future if `Box<FnOnce()>` closures become directly usable.)",null,null],[16,"Output","","",70,null],[10,"call_box","","",70,null],[0,"rc","std","Single-threaded reference-counting pointers.",null,null],[3,"Rc","std::rc","A single-threaded reference-counting pointer.",null,null],[3,"Weak","","A weak version of [`Rc`][rc].",null,null],[0,"borrow","std","A module for working with borrowed data.",null,null],[8,"ToOwned","std::borrow","A generalization of `Clone` to borrowed data.",null,null],[16,"Owned","","",71,null],[10,"to_owned","","Creates owned data from borrowed data, usually by cloning.",71,null],[4,"Cow","","A clone-on-write smart pointer.",null,null],[13,"Borrowed","","Borrowed data.",72,null],[13,"Owned","","Owned data.",72,null],[8,"Borrow","","A trait for borrowing data.",null,null],[10,"borrow","","Immutably borrows from an owned value.",73,{"inputs":[{"name":"self"}],"output":{"name":"borrowed"}}],[8,"BorrowMut","","A trait for mutably borrowing data.",null,null],[10,"borrow_mut","","Mutably borrows from an owned value.",74,{"inputs":[{"name":"self"}],"output":{"name":"borrowed"}}],[0,"fmt","std","Utilities for formatting and printing `String`s",null,null],[5,"format","std::fmt","The format function takes a precompiled format string and a list of arguments, to return the resulting formatted string.",null,{"inputs":[{"name":"arguments"}],"output":{"name":"string"}}],[3,"DebugTuple","","A struct to help with `fmt::Debug` implementations.",null,null],[8,"UpperExp","","Format trait for the `E` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Result","","The type returned by formatter methods.",null,null],[3,"DebugSet","","A struct to help with `fmt::Debug` implementations.",null,null],[8,"Binary","","Format trait for the `b` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Display","","Format trait for an empty format, `{}`.",null,null],[10,"fmt","","Formats the value using the given formatter.",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"DebugMap","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugStruct","","A struct to help with `fmt::Debug` implementations.",null,null],[8,"LowerExp","","Format trait for the `e` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Write","","A collection of methods that are required to format a message into a stream.",null,null],[10,"write_str","","Writes a slice of bytes into this writer, returning whether the write succeeded.",79,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","Writes a `char` into this writer, returning whether the write succeeded.",79,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","Glue for usage of the `write!` macro with implementors of this trait.",79,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[8,"UpperHex","","Format trait for the `X` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"DebugList","","A struct to help with `fmt::Debug` implementations.",null,null],[8,"Debug","","Format trait for the `?` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Error","","The error type which is returned from formatting a message into a stream.",null,null],[3,"Arguments","","This structure represents a safely precompiled version of a format string and its arguments. This cannot be generated at runtime because it cannot safely be done so, so no constructors are given and the fields are private to prevent modification.",null,null],[3,"Formatter","","A struct to represent both where to emit formatting strings to and how they should be formatted. A mutable version of this is passed to all formatting traits.",null,null],[8,"Octal","","Format trait for the `o` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Pointer","","Format trait for the `p` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"LowerHex","","Format trait for the `x` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[5,"write","","The `write` function takes an output stream, a precompiled format string, and a list of arguments. The arguments will be formatted according to the specified format string into the output stream provided.",null,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[0,"slice","std","A dynamically-sized view into a contiguous sequence, `[T]`.",null,null],[8,"SliceConcatExt","std::slice","An extension trait for concatenating slices",null,null],[16,"Output","","The resulting type after concatenation",85,null],[10,"concat","","Flattens a slice of `T` into a single value `Self::Output`.",85,null],[10,"join","","Flattens a slice of `T` into a single value `Self::Output`, placing a given separator between each.",85,null],[10,"connect","","",85,null],[3,"RSplitN","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits, starting from the end of the slice.",null,null],[8,"SliceIndex","","A helper trait used for indexing operations.",null,null],[16,"Output","","The output type returned by methods.",86,null],[10,"get","","Returns a shared reference to the output at this location, if in bounds.",86,null],[10,"get_mut","","Returns a mutable reference to the output at this location, if in bounds.",86,null],[10,"get_unchecked","","Returns a shared reference to the output at this location, without performing any bounds checking.",86,null],[10,"get_unchecked_mut","","Returns a mutable reference to the output at this location, without performing any bounds checking.",86,null],[10,"index","","Returns a shared reference to the output at this location, panicking if out of bounds.",86,null],[10,"index_mut","","Returns a mutable reference to the output at this location, panicking if out of bounds.",86,null],[3,"Split","","An iterator over subslices separated by elements that match a predicate function.",null,null],[3,"SplitN","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits.",null,null],[3,"IterMut","","Mutable slice iterator.",null,null],[5,"from_raw_parts","","Forms a slice from a pointer and a length.",null,null],[3,"Iter","","Immutable slice iterator",null,null],[3,"Chunks","","An iterator over a slice in (non-overlapping) chunks (`size` elements at a time).",null,null],[3,"SplitMut","","An iterator over the subslices of the vector which are separated by elements that match `pred`.",null,null],[3,"SplitNMut","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits.",null,null],[5,"from_raw_parts_mut","","Performs the same functionality as `from_raw_parts`, except that a mutable slice is returned.",null,null],[3,"Windows","","An iterator over overlapping subslices of length `size`.",null,null],[3,"ChunksMut","","An iterator over a slice in (non-overlapping) mutable chunks (`size` elements at a time). When the slice len is not evenly divided by the chunk size, the last slice of the iteration will be the remainder.",null,null],[3,"RSplitNMut","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits, starting from the end of the slice.",null,null],[0,"str","std","Unicode string slices.",null,null],[3,"EncodeUtf16","std::str","External iterator for a string's UTF-16 code units.",null,null],[3,"CharIndices","","Iterator for a string's characters and their byte offsets.",null,null],[3,"RMatchIndices","","Created with the method [`rmatch_indices()`].",null,null],[3,"Split","","Created with the method [`split()`].",null,null],[3,"SplitWhitespace","","An iterator over the non-whitespace substrings of a string, separated by any amount of whitespace.",null,null],[3,"Utf8Error","","Errors which can occur when attempting to interpret a sequence of `u8` as a string.",null,null],[3,"SplitN","","Created with the method [`splitn()`].",null,null],[3,"SplitTerminator","","Created with the method [`split_terminator()`].",null,null],[3,"Chars","","Iterator for the char (representing *Unicode Scalar Values*) of a string",null,null],[3,"ParseBoolError","","An error returned when parsing a `bool` from a string fails.",null,null],[3,"MatchIndices","","Created with the method [`match_indices()`].",null,null],[8,"FromStr","","A trait to abstract the idea of creating a new instance of a type from a string.",null,null],[16,"Err","","The associated error which can be returned from parsing.",87,null],[10,"from_str","","Parses a string `s` to return a value of this type.",87,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[3,"RSplit","","Created with the method [`rsplit()`].",null,null],[3,"RMatches","","Created with the method [`rmatches()`].",null,null],[0,"pattern","","The string Pattern API.",null,null],[8,"Pattern","std::str::pattern","A string pattern.",null,null],[16,"Searcher","","Associated searcher for this pattern",88,null],[10,"into_searcher","","Constructs the associated searcher from `self` and the `haystack` to search in.",88,null],[11,"is_contained_in","","Checks whether the pattern matches anywhere in the haystack",88,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the haystack",88,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the haystack",88,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[4,"SearchStep","","Result of calling `Searcher::next()` or `ReverseSearcher::next_back()`.",null,null],[13,"Match","","Expresses that a match of the pattern has been found at `haystack[a..b]`.",89,null],[13,"Reject","","Expresses that `haystack[a..b]` has been rejected as a possible match of the pattern.",89,null],[13,"Done","","Expresses that every byte of the haystack has been visted, ending the iteration.",89,null],[8,"Searcher","","A searcher for a string pattern.",null,null],[10,"haystack","","Getter for the underlaying string to be searched in",90,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[10,"next","","Performs the next search step starting from the front.",90,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","Find the next `Match` result. See `next()`",90,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","Find the next `Reject` result. See `next()`",90,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"ReverseSearcher","","A reverse searcher for a string pattern.",null,null],[10,"next_back","","Performs the next search step starting from the back.",91,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","Find the next `Match` result. See `next_back()`",91,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","Find the next `Reject` result. See `next_back()`",91,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"DoubleEndedSearcher","","A marker trait to express that a `ReverseSearcher` can be used for a `DoubleEndedIterator` implementation.",null,null],[3,"CharSearcher","","Associated type for `<char as Pattern<'a>>::Searcher`.",null,null],[3,"CharSliceSearcher","","Associated type for `<&[char] as Pattern<'a>>::Searcher`.",null,null],[3,"CharPredicateSearcher","","Associated type for `<F as Pattern<'a>>::Searcher`.",null,null],[3,"StrSearcher","","Associated type for `<&str as Pattern<'a>>::Searcher`.",null,null],[3,"LinesAny","std::str","Created with the method [`lines_any()`].",null,null],[3,"Matches","","Created with the method [`matches()`].",null,null],[5,"from_utf8","","Converts a slice of bytes to a string slice.",null,null],[3,"Bytes","","External iterator for a string's bytes. Use with the `std::iter` module.",null,null],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without checking that the string contains valid UTF-8.",null,null],[3,"Lines","","Created with the method [`lines()`].",null,null],[3,"RSplitTerminator","","Created with the method [`rsplit_terminator()`].",null,null],[3,"RSplitN","","Created with the method [`rsplitn()`].",null,null],[0,"string","std","A UTF-8 encoded, growable string.",null,null],[3,"String","std::string","A UTF-8 encoded, growable string.",null,null],[3,"FromUtf8Error","","A possible error value when converting a `String` from a UTF-8 byte vector.",null,null],[3,"FromUtf16Error","","A possible error value when converting a `String` from a UTF-16 byte slice.",null,null],[4,"ParseError","","An error when parsing a `String`.",null,null],[8,"ToString","","A trait for converting a value to a `String`.",null,null],[10,"to_string","","Converts the given value to a `String`.",92,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[3,"Drain","","A draining iterator for `String`.",null,null],[0,"vec","std","A contiguous growable array type with heap-allocated contents, written `Vec<T>` but pronounced 'vector.'",null,null],[3,"Vec","std::vec","A contiguous growable array type, written `Vec<T>` but pronounced 'vector'.",null,null],[3,"IntoIter","","An iterator that moves out of a vector.",null,null],[3,"Drain","","A draining iterator for `Vec<T>`.",null,null],[3,"PlaceBack","","A place for insertion at the back of a `Vec`.",null,null],[0,"char","std","A character type.",null,null],[3,"ToLowercase","std::char","Returns an iterator that yields the lowercase equivalent of a `char`.",null,null],[3,"ToUppercase","","Returns an iterator that yields the uppercase equivalent of a `char`.",null,null],[3,"DecodeUtf16","","An iterator that decodes UTF-16 encoded code points from an iterator of `u16`s.",null,null],[3,"DecodeUtf16Error","","An iterator that decodes UTF-16 encoded code points from an iterator of `u16`s.",null,null],[5,"decode_utf16","","Create an iterator over the UTF-16 encoded code points in `iter`, returning unpaired surrogates as `Err`s.",null,{"inputs":[{"name":"i"}],"output":{"name":"decodeutf16"}}],[17,"REPLACEMENT_CHARACTER","","`U+FFFD REPLACEMENT CHARACTER` (�) is used in Unicode to represent a decoding error.",null,null],[3,"CharTryFromError","","The error type returned when a conversion from u32 to char fails.",null,null],[17,"MAX","","The highest valid code point a `char` can have.",null,null],[5,"decode_utf8","","Decodes an `Iterator` of bytes as UTF-8.",null,{"inputs":[{"name":"i"}],"output":{"name":"decodeutf8"}}],[5,"from_u32","","Converts a `u32` to a `char`.",null,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[3,"EscapeDefault","","An iterator that yields the literal escape code of a `char`.",null,null],[5,"from_u32_unchecked","","Converts a `u32` to a `char`, ignoring validity.",null,{"inputs":[{"name":"u32"}],"output":{"name":"char"}}],[3,"EscapeDebug","","An iterator that yields the literal escape code of a `char`.",null,null],[3,"EscapeUnicode","","Returns an iterator that yields the hexadecimal Unicode escape of a character, as `char`s.",null,null],[5,"from_digit","","Converts a digit in the given radix to a `char`.",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[3,"DecodeUtf8","","An iterator over an iterator of bytes of the characters the bytes represent as UTF-8",null,null],[17,"UNICODE_VERSION","","The version of Unicode that the unicode parts of `CharExt` and `UnicodeStrPrelude` traits are based on.",null,null],[0,"prelude","std","The Rust Prelude.",null,null],[0,"v1","std::prelude","The first version of the prelude of The Rust Standard Library.",null,null],[0,"entry","std","Program's entry point",null,null],[5,"start","std::entry","",null,null],[5,"entry","","",null,null],[0,"fs","std","",null,null],[3,"File","std::fs","",null,null],[3,"OpenOptions","","",null,null],[4,"Metadata","","",null,null],[4,"ReadDir","","",null,null],[5,"metadata","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"symlink_metadata","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"read_link","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"canonicalize","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"read_dir","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"create","","NOTE `path` must be null terminated",93,null],[11,"open","","NOTE `path` must be null terminated",93,null],[11,"drop","","",93,{"inputs":[{"name":"self"}],"output":null}],[11,"read","","",93,null],[11,"write","","",93,null],[11,"new","","",94,{"inputs":[],"output":{"name":"self"}}],[11,"read","","",94,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"write","","",94,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"append","","",94,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"truncate","","",94,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"create","","",94,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"open","","",94,null],[11,"is_dir","","",95,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_file","","",95,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"io","std","",null,null],[3,"Error","std::io","The error type for I/O operations of the `Read`, `Write`, `Seek`, and associated traits.",null,null],[3,"Stderr","","",null,null],[3,"Stdin","","",null,null],[3,"Stdout","","",null,null],[4,"ErrorKind","","A list specifying general categories of I/O error.",null,null],[13,"NotFound","","An entity was not found, often a file.",96,null],[13,"PermissionDenied","","The operation lacked the necessary privileges to complete.",96,null],[13,"ConnectionRefused","","The connection was refused by the remote server.",96,null],[13,"ConnectionReset","","The connection was reset by the remote server.",96,null],[13,"ConnectionAborted","","The connection was aborted (terminated) by the remote server.",96,null],[13,"NotConnected","","The network operation failed because it was not connected yet.",96,null],[13,"AddrInUse","","A socket address could not be bound because the address is already in use elsewhere.",96,null],[13,"AddrNotAvailable","","A nonexistent interface was requested or the requested address was not local.",96,null],[13,"BrokenPipe","","The operation failed because a pipe was closed.",96,null],[13,"AlreadyExists","","An entity already exists, often a file.",96,null],[13,"WouldBlock","","The operation needs to block to complete, but the blocking operation was requested to not occur.",96,null],[13,"InvalidInput","","A parameter was incorrect.",96,null],[13,"InvalidData","","Data not valid for the operation were encountered.",96,null],[13,"TimedOut","","The I/O operation's timeout expired, causing it to be canceled.",96,null],[13,"WriteZero","","An error returned when an operation could not be completed because a call to [`write()`] returned [`Ok(0)`].",96,null],[13,"Interrupted","","This operation was interrupted.",96,null],[13,"Other","","Any I/O error not part of this list.",96,null],[13,"UnexpectedEof","","An error returned when an operation could not be completed because an \"end of file\" was reached prematurely.",96,null],[5,"stderr","","",null,{"inputs":[],"output":{"name":"stderr"}}],[5,"stdin","","",null,{"inputs":[],"output":{"name":"stdin"}}],[5,"stdout","","",null,{"inputs":[],"output":{"name":"stdout"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",96,null],[11,"cmp","","",96,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"ordering"}}],[11,"eq","","",96,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",96,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"option"}}],[11,"from","","",97,{"inputs":[{"name":"errorkind"}],"output":{"name":"error"}}],[11,"new","","Creates a new I/O error from a known kind of error as well as an arbitrary error payload.",97,{"inputs":[{"name":"errorkind"},{"name":"e"}],"output":{"name":"error"}}],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",97,{"inputs":[],"output":{"name":"error"}}],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS error code.",97,{"inputs":[{"name":"i32"}],"output":{"name":"error"}}],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",97,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",97,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error (if any).",97,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",97,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",97,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",97,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",97,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[6,"Result","","A specialized `Result` type for I/O operations.",null,null],[8,"Read","","",null,null],[10,"read","","",98,null],[8,"Write","","",null,null],[10,"write","","",99,null],[11,"write_all","","",99,null],[11,"write","","",100,null],[11,"write_str","","",100,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"read","","",101,null],[11,"write","","",102,null],[11,"write_str","","",102,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[0,"process","std","",null,null],[5,"exit","std::process","",null,null],[0,"ascii","std","Operations on ASCII strings and characters.",null,null],[3,"EscapeDefault","std::ascii","An iterator over the escaped version of a byte, constructed via `std::ascii::escape_default`.",null,null],[5,"escape_default","","Returns an iterator that produces an escaped version of a `u8`.",null,{"inputs":[{"name":"u8"}],"output":{"name":"escapedefault"}}],[8,"AsciiExt","","Extension methods for ASCII-subset only operations on string slices.",null,null],[16,"Owned","","Container type for copied ASCII characters.",103,null],[10,"is_ascii","","Checks if the value is within the ASCII range.",103,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"to_ascii_uppercase","","Makes a copy of the string in ASCII upper case.",103,null],[10,"to_ascii_lowercase","","Makes a copy of the string in ASCII lower case.",103,null],[10,"eq_ignore_ascii_case","","Checks that two strings are an ASCII case-insensitive match.",103,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"make_ascii_uppercase","","Converts this type to its ASCII upper case equivalent in-place.",103,{"inputs":[{"name":"self"}],"output":null}],[10,"make_ascii_lowercase","","Converts this type to its ASCII lower case equivalent in-place.",103,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",104,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",104,null],[11,"next_back","","",104,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"collections","std","Collection types.",null,null],[4,"Bound","std::collections","An endpoint of a range of keys.",null,null],[13,"Included","","An inclusive bound.",105,null],[13,"Excluded","","An exclusive bound.",105,null],[13,"Unbounded","","An infinite endpoint. Indicates that there is no bound in this direction.",105,null],[3,"BinaryHeap","","A priority queue implemented with a binary heap.",null,null],[3,"BTreeMap","","A map based on a B-Tree.",null,null],[3,"BTreeSet","","A set based on a B-Tree.",null,null],[3,"LinkedList","","A doubly-linked list with owned nodes.",null,null],[3,"VecDeque","","`VecDeque` is a growable ring buffer, which can be used as a double-ended queue efficiently.",null,null],[0,"binary_heap","","A priority queue implemented with a binary heap.",null,null],[3,"BinaryHeap","std::collections::binary_heap","A priority queue implemented with a binary heap.",null,null],[3,"PeekMut","","A container object that represents the result of the [`peek_mut()`] method on `BinaryHeap`. See its documentation for details.",null,null],[3,"Iter","","`BinaryHeap` iterator.",null,null],[3,"IntoIter","","An iterator that moves out of a `BinaryHeap`.",null,null],[3,"Drain","","An iterator that drains a `BinaryHeap`.",null,null],[0,"btree_map","std::collections","A map based on a B-Tree.",null,null],[3,"OccupiedEntry","std::collections::btree_map","An occupied Entry. It is part of the [`Entry`] enum.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied. This enum is constructed from the [`entry`] method on [`BTreeMap`].",null,null],[13,"Vacant","","A vacant Entry",106,null],[13,"Occupied","","An occupied Entry",106,null],[3,"Values","","An iterator over a BTreeMap's values.",null,null],[3,"BTreeMap","","A map based on a B-Tree.",null,null],[3,"RangeMut","","A mutable iterator over a sub-range of BTreeMap's entries.",null,null],[3,"Keys","","An iterator over a BTreeMap's keys.",null,null],[3,"Range","","An iterator over a sub-range of BTreeMap's entries.",null,null],[3,"IterMut","","A mutable iterator over a BTreeMap's entries.",null,null],[3,"VacantEntry","","A vacant Entry. It is part of the [`Entry`] enum.",null,null],[3,"ValuesMut","","A mutable iterator over a BTreeMap's values.",null,null],[3,"IntoIter","","An owning iterator over a BTreeMap's entries.",null,null],[3,"Iter","","An iterator over a BTreeMap's entries.",null,null],[0,"btree_set","std::collections","A set based on a B-Tree.",null,null],[3,"Union","std::collections::btree_set","A lazy iterator producing elements in the set union (in-order).",null,null],[3,"Difference","","A lazy iterator producing elements in the set difference (in-order).",null,null],[3,"Range","","An iterator over a sub-range of `BTreeSet`'s items.",null,null],[3,"SymmetricDifference","","A lazy iterator producing elements in the set symmetric difference (in-order).",null,null],[3,"IntoIter","","An owning iterator over a `BTreeSet`'s items.",null,null],[3,"Iter","","An iterator over a `BTreeSet`'s items.",null,null],[3,"Intersection","","A lazy iterator producing elements in the set intersection (in-order).",null,null],[3,"BTreeSet","","A set based on a B-Tree.",null,null],[0,"linked_list","std::collections","A doubly-linked list with owned nodes.",null,null],[3,"LinkedList","std::collections::linked_list","A doubly-linked list with owned nodes.",null,null],[3,"Iter","","An iterator over references to the elements of a `LinkedList`.",null,null],[3,"IterMut","","An iterator over mutable references to the elements of a `LinkedList`.",null,null],[3,"IntoIter","","An iterator over the elements of a `LinkedList`.",null,null],[3,"FrontPlace","","A place for insertion at the front of a `LinkedList`.",null,null],[3,"BackPlace","","A place for insertion at the back of a `LinkedList`.",null,null],[0,"vec_deque","std::collections","VecDeque is a double-ended queue, which is implemented with the help of a growing ring buffer.",null,null],[3,"VecDeque","std::collections::vec_deque","`VecDeque` is a growable ring buffer, which can be used as a double-ended queue efficiently.",null,null],[3,"Iter","","`VecDeque` iterator.",null,null],[3,"IterMut","","`VecDeque` mutable iterator.",null,null],[3,"IntoIter","","A by-value VecDeque iterator",null,null],[3,"Drain","","A draining VecDeque iterator",null,null],[0,"range","std::collections","Range syntax.",null,null],[8,"RangeArgument","std::collections::range","**RangeArgument** is implemented by Rust's built-in range types, produced by range syntax like `..`, `a..`, `..b` or `c..d`.",null,null],[10,"start","","Start index bound",107,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[10,"end","","End index bound",107,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[0,"error","std","Traits for working with Errors.",null,null],[8,"Error","std::error","Base functionality for all errors in Rust.",null,null],[10,"description","","A short description of the error.",108,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","The lower-level cause of this error, if any.",108,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","std::boxed","",109,{"inputs":[{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",109,{"inputs":[{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",109,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",109,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",109,{"inputs":[{"name":"str"}],"output":{"name":"box"}}],[11,"from","","",109,{"inputs":[{"name":"str"}],"output":{"name":"box"}}],[11,"description","std::str","",110,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",111,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","std::string","",112,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",113,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",114,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","std::char","",115,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","std::boxed","",109,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",109,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"description","std::fmt","",116,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","std::cell","",117,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",118,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","std::char","",119,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is","std::error","Returns true if the boxed type is the same as `T`",108,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or `None` if it isn't.",108,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or `None` if it isn't.",108,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",108,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",108,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",108,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",108,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",108,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",108,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",108,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",108,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",108,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[0,"ffi","std","Utilities related to FFI bindings.",null,null],[3,"CString","std::ffi","A type representing an owned C-compatible string",null,null],[3,"CStr","","Representation of a borrowed C string.",null,null],[3,"NulError","","An error returned from `CString::new` to indicate that a nul byte was found in the vector provided.",null,null],[3,"IntoStringError","","An error returned from `CString::into_string` to indicate that a UTF-8 error was encountered during the conversion.",null,null],[3,"FromBytesWithNulError","","An error returned from `CStr::from_bytes_with_nul` to indicate that a nul byte was found too early in the slice provided or one wasn't found at all.",null,null],[3,"OsString","","A type that can represent owned, mutable platform-native strings, but is cheaply inter-convertible with Rust strings.",null,null],[3,"OsStr","","Slices into OS strings (see `OsString`).",null,null],[11,"eq","","",120,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"ne","","",120,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",120,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"option"}}],[11,"lt","","",120,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"le","","",120,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"gt","","",120,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"ge","","",120,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"cmp","","",120,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"ordering"}}],[11,"hash","","",120,null],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"cstring"}}],[11,"hash","","",121,null],[11,"clone","","",122,{"inputs":[{"name":"self"}],"output":{"name":"nulerror"}}],[11,"eq","","",122,{"inputs":[{"name":"self"},{"name":"nulerror"}],"output":{"name":"bool"}}],[11,"ne","","",122,{"inputs":[{"name":"self"},{"name":"nulerror"}],"output":{"name":"bool"}}],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",123,{"inputs":[{"name":"self"}],"output":{"name":"frombyteswithnulerror"}}],[11,"eq","","",123,{"inputs":[{"name":"self"},{"name":"frombyteswithnulerror"}],"output":{"name":"bool"}}],[11,"ne","","",123,{"inputs":[{"name":"self"},{"name":"frombyteswithnulerror"}],"output":{"name":"bool"}}],[11,"fmt","","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",124,{"inputs":[{"name":"self"}],"output":{"name":"intostringerror"}}],[11,"eq","","",124,{"inputs":[{"name":"self"},{"name":"intostringerror"}],"output":{"name":"bool"}}],[11,"ne","","",124,{"inputs":[{"name":"self"},{"name":"intostringerror"}],"output":{"name":"bool"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new C-compatible string from a container of bytes.",120,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[11,"from_vec_unchecked","","Creates a C-compatible string from a byte vector without checking for interior 0 bytes.",120,{"inputs":[{"name":"vec"}],"output":{"name":"cstring"}}],[11,"from_raw","","Retakes ownership of a `CString` that was transferred to C.",120,null],[11,"into_raw","","Transfers ownership of the string to a C caller.",120,null],[11,"into_string","","Converts the `CString` into a `String` if it contains valid Unicode data.",120,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"into_bytes","","Returns the underlying byte buffer.",120,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"into_bytes_with_nul","","Equivalent to the `into_bytes` function except that the returned vector includes the trailing nul byte.",120,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"as_bytes","","Returns the contents of this `CString` as a slice of bytes.",120,null],[11,"as_bytes_with_nul","","Equivalent to the `as_bytes` function except that the returned slice includes the trailing nul byte.",120,null],[11,"drop","","",120,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",120,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","std::vec","",125,{"inputs":[{"name":"cstring"}],"output":{"name":"vec"}}],[11,"fmt","std::ffi","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","Creates an empty `CString`.",120,{"inputs":[],"output":{"name":"cstring"}}],[11,"borrow","","",120,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"nul_position","","Returns the position of the nul byte in the slice that was provided to `CString::new`.",122,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_vec","","Consumes this error, returning the underlying vector of bytes which generated the error in the first place.",122,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"description","","",122,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_cstring","","Consumes this error, returning original `CString` which generated the error.",124,{"inputs":[{"name":"self"}],"output":{"name":"cstring"}}],[11,"utf8_error","","Access the underlying UTF-8 error that was the cause of this error.",124,{"inputs":[{"name":"self"}],"output":{"name":"utf8error"}}],[11,"description","","",124,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",124,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_ptr","","Casts a raw C string to a safe C string wrapper.",121,null],[11,"from_bytes_with_nul","","Creates a C string wrapper from a byte slice.",121,null],[11,"from_bytes_with_nul_unchecked","","Unsafely creates a C string wrapper from a byte slice.",121,null],[11,"as_ptr","","Returns the inner pointer to this C string.",121,null],[11,"to_bytes","","Converts this C string to a byte slice.",121,null],[11,"to_bytes_with_nul","","Converts this C string to a byte slice containing the trailing 0 byte.",121,null],[11,"to_str","","Yields a `&str` slice if the `CStr` contains valid UTF-8.",121,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_string_lossy","","Converts a `CStr` into a `Cow<str>`.",121,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"eq","","",121,{"inputs":[{"name":"self"},{"name":"cstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",121,{"inputs":[{"name":"self"},{"name":"cstr"}],"output":{"name":"option"}}],[11,"cmp","","",121,{"inputs":[{"name":"self"},{"name":"cstr"}],"output":{"name":"ordering"}}],[11,"to_owned","","",121,{"inputs":[{"name":"self"}],"output":{"name":"cstring"}}],[11,"from","","",120,{"inputs":[{"name":"cstr"}],"output":{"name":"cstring"}}],[11,"index","","",120,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"cstr"}}],[11,"as_ref","","",121,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"as_ref","","",120,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"clone","","",126,{"inputs":[{"name":"self"}],"output":{"name":"osstring"}}],[11,"new","","Constructs a new empty `OsString`.",126,{"inputs":[],"output":{"name":"osstring"}}],[11,"as_os_str","","Converts to an `OsStr` slice.",126,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"into_string","","Converts the `OsString` into a `String` if it contains valid Unicode data.",126,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"push","","Extends the string with the given `&OsStr` slice.",126,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"with_capacity","","Creates a new `OsString` with the given capacity.",126,{"inputs":[{"name":"usize"}],"output":{"name":"osstring"}}],[11,"clear","","Truncates the `OsString` to zero length.",126,{"inputs":[{"name":"self"}],"output":null}],[11,"capacity","","Returns the capacity this `OsString` can hold without reallocating.",126,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more capacity to be inserted in the given `OsString`.",126,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more capacity to be inserted in the given `OsString`. Does nothing if the capacity is already sufficient.",126,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"from","","",126,{"inputs":[{"name":"string"}],"output":{"name":"osstring"}}],[11,"from","","",126,{"inputs":[{"name":"t"}],"output":{"name":"osstring"}}],[11,"index","","",126,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"osstr"}}],[11,"deref","","",126,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"default","","Constructs an empty `OsString`.",126,{"inputs":[],"output":{"name":"osstring"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",126,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","","",126,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",126,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"option"}}],[11,"lt","","",126,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"le","","",126,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"gt","","",126,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"ge","","",126,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",126,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"cmp","","",126,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"ordering"}}],[11,"hash","","",126,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"new","","Coerces into an `OsStr` slice.",127,{"inputs":[{"name":"s"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a `&str` slice if the `OsStr` is valid Unicode.",127,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Converts an `OsStr` to a `Cow<str>`.",127,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"to_os_string","","Copies the slice into an owned `OsString`.",127,{"inputs":[{"name":"self"}],"output":{"name":"osstring"}}],[11,"is_empty","","Checks whether the `OsStr` is empty.",127,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of this `OsStr`.",127,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"eq","","",127,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","","",127,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",127,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"lt","","",127,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"le","","",127,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"gt","","",127,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"ge","","",127,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",127,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"cmp","","",127,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"ordering"}}],[11,"eq","","",126,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","","",127,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",126,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"partial_cmp","","",127,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"option"}}],[11,"eq","","",126,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",126,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"eq","std::borrow","",72,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","std::ffi","",127,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::borrow","",72,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"partial_cmp","std::ffi","",127,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"option"}}],[11,"eq","std::borrow","",72,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",72,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","std::ffi","",126,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::borrow","",72,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"option"}}],[11,"partial_cmp","std::ffi","",126,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"option"}}],[11,"hash","","",127,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow","","",126,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"to_owned","","",127,{"inputs":[{"name":"self"}],"output":{"name":"osstring"}}],[11,"as_ref","","",127,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"as_ref","","",126,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"as_ref","std::string","",128,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[0,"num","std","Additional functionality for numerics.",null,null],[8,"Zero","std::num","Types that have a \"zero\" value.",null,null],[10,"zero","","The \"zero\" (usually, additive identity) for this type.",129,{"inputs":[],"output":{"name":"self"}}],[8,"One","","Types that have a \"one\" value.",null,null],[10,"one","","The \"one\" (usually, multiplicative identity) for this type.",130,{"inputs":[],"output":{"name":"self"}}],[4,"FpCategory","","A classification of floating point numbers.",null,null],[13,"Nan","","\"Not a Number\", often obtained by dividing by zero.",131,null],[13,"Infinite","","Positive or negative infinity.",131,null],[13,"Zero","","Positive or negative zero.",131,null],[13,"Subnormal","","De-normalized floating point representation (less precise than `Normal`).",131,null],[13,"Normal","","A regular floating point number.",131,null],[3,"ParseIntError","","An error which can be returned when parsing an integer.",null,null],[3,"ParseFloatError","","An error which can be returned when parsing a float.",null,null],[3,"TryFromIntError","","The error type returned when a checked integral type conversion fails.",null,null],[3,"Wrapping","","Provides intentionally-wrapped arithmetic on `T`.",null,null],[12,"0","","",132,null],[0,"memchr","std","",null,null],[5,"memchr","std::memchr","A safe interface to `memchr`.",null,null],[5,"memrchr","","A safe interface to `memrchr`.",null,null],[0,"path","std","Cross-platform path manipulation.",null,null],[3,"PrefixComponent","std::path","A Windows path prefix, e.g. `C:` or `\\server\\share`.",null,null],[3,"Components","","The core iterator giving the components of a path.",null,null],[3,"Iter","","An iterator over the components of a path, as `OsStr` slices.",null,null],[3,"PathBuf","","An owned, mutable path (akin to [`String`]).",null,null],[3,"Path","","A slice of a path (akin to [`str`]).",null,null],[3,"StripPrefixError","","An error returned from the `Path::strip_prefix` method indicating that the prefix was not found in `self`.",null,null],[3,"Display","","Helper struct for safely printing paths with `format!()` and `{}`",null,null],[4,"Prefix","","Path prefixes (Windows only).",null,null],[13,"Verbatim","","Prefix `\\?`, together with the given component immediately following it.",133,null],[13,"VerbatimUNC","","Prefix `\\?\\UNC`, with the \"server\" and \"share\" components following it.",133,null],[13,"VerbatimDisk","","Prefix like `\\?\\C:`, for the given drive letter",133,null],[13,"DeviceNS","","Prefix `\\.`, together with the given component immediately following it.",133,null],[13,"UNC","","Prefix `\\server\\share`, with the given \"server\" and \"share\" components.",133,null],[13,"Disk","","Prefix `C:` for the given disk drive.",133,null],[4,"Component","","A single component of a path.",null,null],[13,"Prefix","","A Windows path prefix, e.g. `C:` or `\\server\\share`.",134,null],[13,"RootDir","","The root directory component, appears after any prefix and before anything else",134,null],[13,"CurDir","","A reference to the current directory, i.e. `.`",134,null],[13,"ParentDir","","A reference to the parent directory, i.e. `..`",134,null],[13,"Normal","","A normal component, i.e. `a` and `b` in `a/b`",134,null],[5,"is_separator","","Determines whether the character is one of the permitted path separators for the current platform.",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[17,"MAIN_SEPARATOR","","The primary separator for the current platform",null,null],[11,"clone","","",133,{"inputs":[{"name":"self"}],"output":{"name":"prefix"}}],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",133,null],[11,"partial_cmp","","",133,{"inputs":[{"name":"self"},{"name":"prefix"}],"output":{"name":"option"}}],[11,"lt","","",133,{"inputs":[{"name":"self"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"le","","",133,{"inputs":[{"name":"self"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"gt","","",133,{"inputs":[{"name":"self"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"ge","","",133,{"inputs":[{"name":"self"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"cmp","","",133,{"inputs":[{"name":"self"},{"name":"prefix"}],"output":{"name":"ordering"}}],[11,"eq","","",133,{"inputs":[{"name":"self"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"ne","","",133,{"inputs":[{"name":"self"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"is_verbatim","","Determines if the prefix is verbatim, i.e. begins with `\\?`.",133,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",135,{"inputs":[{"name":"self"}],"output":{"name":"prefixcomponent"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"kind","","The parsed prefix data.",135,{"inputs":[{"name":"self"}],"output":{"name":"prefix"}}],[11,"as_os_str","","The raw `OsStr` slice for this prefix.",135,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"eq","","",135,{"inputs":[{"name":"self"},{"name":"prefixcomponent"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",135,{"inputs":[{"name":"self"},{"name":"prefixcomponent"}],"output":{"name":"option"}}],[11,"cmp","","",135,{"inputs":[{"name":"self"},{"name":"prefixcomponent"}],"output":{"name":"ordering"}}],[11,"hash","","",135,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",134,{"inputs":[{"name":"self"}],"output":{"name":"component"}}],[11,"eq","","",134,{"inputs":[{"name":"self"},{"name":"component"}],"output":{"name":"bool"}}],[11,"ne","","",134,{"inputs":[{"name":"self"},{"name":"component"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",134,{"inputs":[{"name":"self"},{"name":"component"}],"output":{"name":"option"}}],[11,"lt","","",134,{"inputs":[{"name":"self"},{"name":"component"}],"output":{"name":"bool"}}],[11,"le","","",134,{"inputs":[{"name":"self"},{"name":"component"}],"output":{"name":"bool"}}],[11,"gt","","",134,{"inputs":[{"name":"self"},{"name":"component"}],"output":{"name":"bool"}}],[11,"ge","","",134,{"inputs":[{"name":"self"},{"name":"component"}],"output":{"name":"bool"}}],[11,"cmp","","",134,{"inputs":[{"name":"self"},{"name":"component"}],"output":{"name":"ordering"}}],[11,"hash","","",134,null],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_os_str","","Extracts the underlying `OsStr` slice",134,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"as_ref","","",134,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"clone","","",136,{"inputs":[{"name":"self"}],"output":{"name":"components"}}],[11,"clone","","",137,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"fmt","","",136,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",136,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","","",136,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","","",136,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"fmt","","",137,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",137,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","","",137,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","","",137,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"next","","",137,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",137,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",136,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",136,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eq","","",136,{"inputs":[{"name":"self"},{"name":"components"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",136,{"inputs":[{"name":"self"},{"name":"components"}],"output":{"name":"option"}}],[11,"cmp","","",136,{"inputs":[{"name":"self"},{"name":"components"}],"output":{"name":"ordering"}}],[11,"clone","","",138,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"new","","Allocates an empty `PathBuf`.",138,{"inputs":[],"output":{"name":"pathbuf"}}],[11,"as_path","","Coerces to a [`Path`] slice.",138,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"push","","Extends `self` with `path`.",138,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[11,"pop","","Truncate `self` to [`self.parent()`].",138,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_file_name","","Updates [`self.file_name()`] to `file_name`.",138,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"set_extension","","Updates [`self.extension()`] to `extension`.",138,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"bool"}}],[11,"into_os_string","","Consumes the `PathBuf`, yielding its internal [`OsString`] storage.",138,{"inputs":[{"name":"self"}],"output":{"name":"osstring"}}],[11,"from","","",138,{"inputs":[{"name":"t"}],"output":{"name":"pathbuf"}}],[11,"from","","",138,{"inputs":[{"name":"osstring"}],"output":{"name":"pathbuf"}}],[11,"from","std::ffi","",126,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstring"}}],[11,"from","std::path","",138,{"inputs":[{"name":"string"}],"output":{"name":"pathbuf"}}],[11,"from_iter","","",138,{"inputs":[{"name":"i"}],"output":{"name":"pathbuf"}}],[11,"extend","","",138,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"fmt","","",138,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",138,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"borrow","","",138,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"from","std::borrow","",72,{"inputs":[{"name":"path"}],"output":{"name":"cow"}}],[11,"from","","",72,{"inputs":[{"name":"pathbuf"}],"output":{"name":"cow"}}],[11,"to_owned","std::path","",139,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"eq","","",138,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"hash","","",138,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"partial_cmp","","",138,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"option"}}],[11,"cmp","","",138,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"ordering"}}],[11,"as_ref","","",138,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"fmt","","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",140,{"inputs":[{"name":"self"}],"output":{"name":"stripprefixerror"}}],[11,"eq","","",140,{"inputs":[{"name":"self"},{"name":"stripprefixerror"}],"output":{"name":"bool"}}],[11,"ne","","",140,{"inputs":[{"name":"self"},{"name":"stripprefixerror"}],"output":{"name":"bool"}}],[11,"new","","Directly wrap a string slice as a `Path` slice.",139,{"inputs":[{"name":"s"}],"output":{"name":"path"}}],[11,"as_os_str","","Yields the underlying [`OsStr`] slice.",139,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a [`&str`] slice if the `Path` is valid unicode.",139,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Converts a `Path` to a [`Cow<str>`].",139,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"to_path_buf","","Converts a `Path` to an owned [`PathBuf`].",139,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"is_absolute","","A path is *absolute* if it is independent of the current directory.",139,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_relative","","A path is *relative* if it is not absolute.",139,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_root","","A path has a root if the body of the path begins with the directory separator.",139,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"parent","","The path without its final component, if any.",139,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"file_name","","The final component of the path, if it is a normal file.",139,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"strip_prefix","","Returns a path that, when joined onto `base`, yields `self`.",139,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"starts_with","","Determines whether `base` is a prefix of `self`.",139,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"ends_with","","Determines whether `child` is a suffix of `self`.",139,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"file_stem","","Extracts the stem (non-extension) portion of [`self.file_name()`].",139,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"extension","","Extracts the extension of [`self.file_name()`], if possible.",139,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"join","","Creates an owned [`PathBuf`] with `path` adjoined to `self`.",139,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"pathbuf"}}],[11,"with_file_name","","Creates an owned [`PathBuf`] like `self` but with the given file name.",139,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"pathbuf"}}],[11,"with_extension","","Creates an owned [`PathBuf`] like `self` but with the given extension.",139,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"pathbuf"}}],[11,"components","","Produce an iterator over the components of the path.",139,{"inputs":[{"name":"self"}],"output":{"name":"components"}}],[11,"iter","","Produce an iterator over the path's components viewed as [`OsStr`] slices.",139,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"display","","Returns an object that implements [`Display`] for safely printing paths that may contain non-Unicode data.",139,{"inputs":[{"name":"self"}],"output":{"name":"display"}}],[11,"metadata","","Query the file system to get information about a file, directory, etc.",139,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"symlink_metadata","","Query the metadata about a file without following symlinks.",139,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"canonicalize","","Returns the canonical form of the path with all intermediate components normalized and symbolic links resolved.",139,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_link","","Reads a symbolic link, returning the file that the link points to.",139,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_dir","","Returns an iterator over the entries within a directory.",139,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"exists","","Returns whether the path points at an existing entity.",139,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_file","","Returns whether the path is pointing at a regular file.",139,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_dir","","Returns whether the path is pointing at a directory.",139,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ref","","",139,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"fmt","","",139,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",141,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",141,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",139,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"hash","","",139,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"partial_cmp","","",139,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"option"}}],[11,"cmp","","",139,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"ordering"}}],[11,"as_ref","","",139,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","std::ffi","",127,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","std::borrow","",72,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","std::ffi","",126,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","std::string","",128,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","std::path","",138,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"eq","","",138,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","","",139,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",138,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"option"}}],[11,"partial_cmp","","",139,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"option"}}],[11,"eq","","",138,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",138,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"option"}}],[11,"eq","std::borrow","",72,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","std::path","",139,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::borrow","",72,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"option"}}],[11,"partial_cmp","std::path","",139,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"option"}}],[11,"eq","std::borrow","",72,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",72,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"option"}}],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"eq","std::path","",138,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::borrow","",72,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"option"}}],[11,"partial_cmp","std::path","",138,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"option"}}],[11,"eq","","",138,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","std::ffi","",127,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::path","",138,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"partial_cmp","std::ffi","",127,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"option"}}],[11,"eq","std::path","",138,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",138,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"eq","","",138,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","std::borrow","",72,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::path","",138,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"option"}}],[11,"partial_cmp","std::borrow","",72,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"option"}}],[11,"eq","std::path","",138,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","std::ffi","",126,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::path","",138,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"option"}}],[11,"partial_cmp","std::ffi","",126,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"option"}}],[11,"eq","std::path","",139,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","std::ffi","",127,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::path","",139,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"partial_cmp","std::ffi","",127,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"option"}}],[11,"eq","std::path","",139,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",139,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"eq","","",139,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","std::borrow","",72,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::path","",139,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"option"}}],[11,"partial_cmp","std::borrow","",72,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"option"}}],[11,"eq","std::path","",139,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","std::ffi","",126,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::path","",139,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"option"}}],[11,"partial_cmp","std::ffi","",126,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"option"}}],[11,"eq","","",127,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",127,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"option"}}],[11,"eq","std::borrow","",72,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",72,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"option"}}],[11,"eq","std::ffi","",126,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",126,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"option"}}],[11,"eq","std::borrow","",72,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","std::ffi","",127,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::borrow","",72,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"partial_cmp","std::ffi","",127,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"option"}}],[11,"eq","std::borrow","",72,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",72,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","std::ffi","",126,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::borrow","",72,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"option"}}],[11,"partial_cmp","std::ffi","",126,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"option"}}],[11,"fmt","std::path","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",140,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"time","std","Temporal quantification.",null,null],[3,"Duration","std::time","A duration type to represent a span of time, typically used for system timeouts.",null,null],[3,"Instant","","A measurement of a monotonically increasing clock.  Opaque and useful only with `Duration`.",null,null],[3,"SystemTime","","A measurement of the system clock, useful for talking to external entities like the file system or other processes.",null,null],[3,"SystemTimeError","","An error returned from the `duration_since` method on `SystemTime`, used to learn how far in the opposite direction a system time lies.",null,null],[11,"clone","","",142,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"eq","","",142,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",142,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",142,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",142,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",142,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",142,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",142,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"cmp","","",142,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"fmt","","",142,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",142,null],[11,"new","","Creates a new `Duration` from the specified number of seconds and additional nanosecond precision.",142,{"inputs":[{"name":"u64"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"from_secs","","Creates a new `Duration` from the specified number of seconds.",142,{"inputs":[{"name":"u64"}],"output":{"name":"duration"}}],[11,"from_millis","","Creates a new `Duration` from the specified number of milliseconds.",142,{"inputs":[{"name":"u64"}],"output":{"name":"duration"}}],[11,"as_secs","","Returns the number of whole seconds represented by this duration.",142,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"subsec_nanos","","Returns the nanosecond precision represented by this duration.",142,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"checked_add","","Checked duration addition. Computes `self + other`, returning `None` if overflow occurred.",142,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Checked duration subtraction. Computes `self + other`, returning `None` if the result would be negative or if underflow occurred.",142,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_mul","","Checked duration multiplication. Computes `self * other`, returning `None` if underflow or overflow occurred.",142,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"checked_div","","Checked duration division. Computes `self / other`, returning `None` if `other == 0` or the operation results in underflow or overflow.",142,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"add","","",142,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"add_assign","","",142,{"inputs":[{"name":"self"},{"name":"duration"}],"output":null}],[11,"sub","","",142,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub_assign","","",142,{"inputs":[{"name":"self"},{"name":"duration"}],"output":null}],[11,"mul","","",142,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"mul_assign","","",142,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"div","","",142,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"div_assign","","",142,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[17,"UNIX_EPOCH","","An anchor in time which can be used to create new `SystemTime` instances or learn about where in time a `SystemTime` lies.",null,null],[11,"clone","","",143,{"inputs":[{"name":"self"}],"output":{"name":"instant"}}],[11,"eq","","",143,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"ne","","",143,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",143,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"option"}}],[11,"lt","","",143,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"le","","",143,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"gt","","",143,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"ge","","",143,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"cmp","","",143,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"ordering"}}],[11,"clone","","",144,{"inputs":[{"name":"self"}],"output":{"name":"systemtime"}}],[11,"eq","","",144,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"ne","","",144,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",144,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"name":"option"}}],[11,"lt","","",144,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"le","","",144,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"gt","","",144,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"ge","","",144,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"cmp","","",144,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"name":"ordering"}}],[11,"clone","","",145,{"inputs":[{"name":"self"}],"output":{"name":"systemtimeerror"}}],[11,"fmt","","",145,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"now","","Returns an instant corresponding to \"now\".",143,{"inputs":[],"output":{"name":"instant"}}],[11,"duration_since","","Returns the amount of time elapsed from another instant to this one.",143,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"duration"}}],[11,"elapsed","","Returns the amount of time elapsed since this instant was created.",143,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"add","","",143,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"instant"}}],[11,"add_assign","","",143,{"inputs":[{"name":"self"},{"name":"duration"}],"output":null}],[11,"sub","","",143,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"instant"}}],[11,"sub_assign","","",143,{"inputs":[{"name":"self"},{"name":"duration"}],"output":null}],[11,"sub","","",143,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"duration"}}],[11,"fmt","","",143,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"now","","Returns the system time corresponding to \"now\".",144,{"inputs":[],"output":{"name":"systemtime"}}],[11,"duration_since","","Returns the amount of time elapsed from an earlier point in time.",144,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"name":"result"}}],[11,"elapsed","","Returns the amount of time elapsed since this system time was created.",144,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"add","","",144,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"systemtime"}}],[11,"add_assign","","",144,{"inputs":[{"name":"self"},{"name":"duration"}],"output":null}],[11,"sub","","",144,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"systemtime"}}],[11,"sub_assign","","",144,{"inputs":[{"name":"self"},{"name":"duration"}],"output":null}],[11,"fmt","","",144,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"duration","","Returns the positive duration which represents how far forward the second system time was from the first.",145,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"description","","",145,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",145,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"vec","std","Creates a `Vec` containing the arguments.",null,null],[14,"print","","Macro for printing to the standard output.",null,null],[14,"println","","Macro for printing to the standard output, with a newline. On all platforms, the newline is the LINE FEED character (`\\n`/`U+000A`) alone (no additional CARRIAGE RETURN (`\\r`/`U+000D`).",null,null],[14,"select","","A macro to select an event from a number of receivers.",null,null],[11,"is","std::any","Returns true if the boxed type is the same as `T`.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or `None` if it isn't.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or `None` if it isn't.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"hash","std::boxed","",109,null],[11,"hash","std::rc","",146,null],[11,"default","std::boxed","Creates a `Box<T>`, with the `Default` value for T.",109,{"inputs":[],"output":{"name":"box"}}],[11,"default","","",109,{"inputs":[],"output":{"name":"box"}}],[11,"default","std::rc","Creates a new `Rc<T>`, with the `Default` value for `T`.",146,{"inputs":[],"output":{"name":"rc"}}],[11,"default","","Constructs a new `Weak<T>`, without an accompanying instance of `T`.",147,{"inputs":[],"output":{"name":"weak"}}],[11,"fmt","std::boxed","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::rc","",146,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"make_place","std::boxed","",148,{"inputs":[],"output":{"name":"intermediatebox"}}],[11,"eq","","",109,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",109,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"eq","std::rc","Equality for two `Rc`s.",146,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Rc`s.",146,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"pointer","std::boxed","",148,null],[11,"len","","",109,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",109,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",109,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"option"}}],[11,"lt","","",109,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",109,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",109,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",109,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::rc","Partial comparison for two `Rc`s.",146,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Rc`s.",146,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"le","","'Less than or equal to' comparison for two `Rc`s.",146,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Rc`s.",146,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater than or equal to' comparison for two `Rc`s.",146,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"next","std::boxed","",109,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",109,null],[11,"nth","","",109,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"from","","",109,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from","std::rc","",146,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"call_once","std::boxed","",109,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",109,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"r"}}],[11,"finalize","","",148,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",109,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",109,null],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"clone","std::rc","Makes a clone of the `Rc` pointer.",146,{"inputs":[{"name":"self"}],"output":{"name":"rc"}}],[11,"clone","","Makes a clone of the `Weak` pointer.",147,{"inputs":[{"name":"self"}],"output":{"name":"weak"}}],[11,"clone","std::boxed","",149,{"inputs":[{"name":"self"}],"output":{"name":"exchangeheapsingleton"}}],[11,"deref","","",109,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","std::rc","",146,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","std::boxed","",148,null],[11,"drop","std::rc","Drops the `Rc`.",146,null],[11,"drop","","Drops the `Weak` pointer.",147,null],[11,"finalize","std::boxed","",109,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::rc","",146,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",147,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::boxed","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::rc","",146,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","std::boxed","",109,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","std::rc","",146,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow","std::boxed","",109,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow","std::rc","",146,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"cmp","std::boxed","",109,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"cmp","std::rc","Comparison for two `Rc`s.",146,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"ordering"}}],[11,"deref_mut","std::boxed","",109,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"make_place","","",149,{"inputs":[{"name":"self"}],"output":{"name":"intermediatebox"}}],[11,"next_back","","",109,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_mut","","",109,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow_mut","","",109,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","std::char","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",150,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",151,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",115,{"inputs":[{"name":"self"},{"name":"decodeutf16error"}],"output":{"name":"bool"}}],[11,"ne","","",115,{"inputs":[{"name":"self"},{"name":"decodeutf16error"}],"output":{"name":"bool"}}],[11,"next","std::str","",152,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","std::char","",150,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",151,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",153,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",153,null],[11,"next_back","std::str","",152,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","std::char","",153,{"inputs":[{"name":"self"}],"output":{"name":"decodeutf16"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"decodeutf16error"}}],[11,"fmt","std::num","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::mem","",154,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::ops","",155,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::any","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::cell","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::iter","",156,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",157,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",158,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",159,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",160,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",161,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",162,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",163,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",164,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::slice","",165,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",166,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",167,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",168,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",169,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",170,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",171,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",172,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::str::pattern","",173,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::hash","",174,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::fmt","",175,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::marker","",176,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::cell","",177,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",178,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",179,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",180,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",181,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::num","",182,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",183,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",184,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::cmp","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::any","",185,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::cell","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::char","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",186,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",187,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",188,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",189,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::iter","",190,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",191,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",192,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",193,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",194,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",195,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",196,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",197,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",198,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",199,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",200,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",201,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",202,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::option","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",203,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",204,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",205,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::result","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",206,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",207,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",208,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::slice","",209,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",210,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",211,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::str::pattern","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",212,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",213,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",214,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::str","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",215,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",216,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",217,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",218,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",219,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",220,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",221,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",222,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",223,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",224,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",225,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",226,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",227,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",228,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",229,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::hash","",230,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",231,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",232,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::fmt","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bitor_assign","std::num","",132,null],[11,"bitor_assign","","",132,null],[11,"bitor_assign","","",132,null],[11,"bitor_assign","","",132,null],[11,"bitor_assign","","",132,null],[11,"bitor_assign","","",132,null],[11,"bitor_assign","","",132,null],[11,"bitor_assign","","",132,null],[11,"bitor_assign","","",132,null],[11,"bitor_assign","","",132,null],[11,"bitor_assign","","",132,null],[11,"bitor_assign","","",132,null],[11,"write_str","std::fmt","",233,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",233,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",233,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"cmp","std::cmp","",4,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","std::cell","",177,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"ordering"}}],[11,"cmp","","",178,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"ordering"}}],[11,"cmp","std::num","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"cmp","std::marker","",176,{"inputs":[{"name":"self"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"cmp","std::option","",69,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"cmp","std::result","",68,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"cmp","std::fmt","",116,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"ordering"}}],[11,"add_assign","std::num","",132,null],[11,"add_assign","","",132,null],[11,"add_assign","","",132,null],[11,"add_assign","","",132,null],[11,"add_assign","","",132,null],[11,"add_assign","","",132,null],[11,"add_assign","","",132,null],[11,"add_assign","","",132,null],[11,"add_assign","","",132,null],[11,"add_assign","","",132,null],[11,"add_assign","","",132,null],[11,"add_assign","","",132,null],[11,"shr","","",132,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",132,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",132,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",132,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",132,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",132,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",132,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",132,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",132,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",132,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",132,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",132,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",132,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",132,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",132,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",132,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",132,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",132,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",132,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",132,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",132,null],[11,"bitxor","","",132,null],[11,"bitxor","","",132,null],[11,"bitxor","","",132,null],[11,"bitxor","","",132,null],[11,"bitxor","","",132,null],[11,"bitxor","","",132,null],[11,"bitxor","","",132,null],[11,"bitxor","","",132,null],[11,"bitxor","","",132,null],[11,"bitxor","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",132,null],[11,"bitxor","","",132,null],[11,"bitor","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",132,null],[11,"bitor","","",132,null],[11,"bitor","","",132,null],[11,"bitor","","",132,null],[11,"bitor","","",132,null],[11,"bitor","","",132,null],[11,"bitor","","",132,null],[11,"bitor","","",132,null],[11,"bitor","","",132,null],[11,"bitor","","",132,null],[11,"bitor","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",132,null],[11,"bitor","","",132,null],[11,"get","std::ops","",51,null],[11,"get_mut","","",51,null],[11,"get_unchecked","","",51,null],[11,"get_unchecked_mut","","",51,null],[11,"index","","",51,null],[11,"index_mut","","",51,null],[11,"get","","",53,null],[11,"get_mut","","",53,null],[11,"get_unchecked","","",53,null],[11,"get_unchecked_mut","","",53,null],[11,"index","","",53,null],[11,"index_mut","","",53,null],[11,"get","","",52,null],[11,"get_mut","","",52,null],[11,"get_unchecked","","",52,null],[11,"get_unchecked_mut","","",52,null],[11,"index","","",52,null],[11,"index_mut","","",52,null],[11,"get","","",155,null],[11,"get_mut","","",155,null],[11,"get_unchecked","","",155,null],[11,"get_unchecked_mut","","",155,null],[11,"index","","",155,null],[11,"index_mut","","",155,null],[11,"get","","",54,null],[11,"get_mut","","",54,null],[11,"get_unchecked","","",54,null],[11,"get_unchecked_mut","","",54,null],[11,"index","","",54,null],[11,"index_mut","","",54,null],[11,"get","","",55,null],[11,"get_mut","","",55,null],[11,"get_unchecked","","",55,null],[11,"get_unchecked_mut","","",55,null],[11,"index","","",55,null],[11,"index_mut","","",55,null],[11,"next_back","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",54,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::iter","",191,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",192,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",193,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",194,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",196,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",197,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",157,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",158,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",198,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",200,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",163,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",202,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",202,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",164,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::option","",203,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",204,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",205,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::result","",206,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",207,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",208,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::slice","",167,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",168,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",209,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",210,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",211,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::str","",215,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",216,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",217,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",228,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",229,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::slice","",165,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",166,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::str","",218,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",219,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",220,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",221,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",224,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",225,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",226,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",227,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitand","std::num","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",132,null],[11,"bitand","","",132,null],[11,"bitand","","",132,null],[11,"bitand","","",132,null],[11,"bitand","","",132,null],[11,"bitand","","",132,null],[11,"bitand","","",132,null],[11,"bitand","","",132,null],[11,"bitand","","",132,null],[11,"bitand","","",132,null],[11,"bitand","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",132,null],[11,"bitand","","",132,null],[11,"bitand_assign","","",132,null],[11,"bitand_assign","","",132,null],[11,"bitand_assign","","",132,null],[11,"bitand_assign","","",132,null],[11,"bitand_assign","","",132,null],[11,"bitand_assign","","",132,null],[11,"bitand_assign","","",132,null],[11,"bitand_assign","","",132,null],[11,"bitand_assign","","",132,null],[11,"bitand_assign","","",132,null],[11,"bitand_assign","","",132,null],[11,"bitand_assign","","",132,null],[11,"partial_cmp","std::cmp","",4,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"partial_cmp","std::cell","",177,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"option"}}],[11,"lt","","",177,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"le","","",177,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"gt","","",177,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"ge","","",177,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",178,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"option"}}],[11,"lt","","",178,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"le","","",178,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"gt","","",178,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"ge","","",178,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::num","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::marker","",176,{"inputs":[{"name":"self"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"partial_cmp","std::option","",69,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",69,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",69,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",69,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",69,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::result","",68,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",68,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",68,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",68,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",68,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::fmt","",116,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"option"}}],[11,"hash","std::mem","",154,null],[11,"hash","std::num","",132,null],[11,"hash","std::marker","",176,null],[11,"hash","std::ops","",155,null],[11,"hash","","",51,null],[11,"hash","","",52,null],[11,"hash","","",53,null],[11,"hash","","",54,null],[11,"hash","","",55,null],[11,"hash","std::cmp","",4,null],[11,"hash","std::any","",185,null],[11,"hash","std::option","",69,null],[11,"hash","std::result","",68,null],[11,"hash","std::fmt","",116,null],[11,"fmt","std::num","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","std::mem","",154,{"inputs":[{"name":"self"},{"name":"discriminant"}],"output":{"name":"bool"}}],[11,"eq","std::cell","",177,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"eq","","",178,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"eq","std::num","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"eq","","",182,{"inputs":[{"name":"self"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"ne","","",182,{"inputs":[{"name":"self"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"eq","","",131,{"inputs":[{"name":"self"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"eq","","",184,{"inputs":[{"name":"self"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",184,{"inputs":[{"name":"self"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"eq","std::marker","",176,{"inputs":[{"name":"self"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"eq","std::ops","",155,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"rangeinclusive"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"rangeinclusive"}],"output":{"name":"bool"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"rangetoinclusive"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"rangetoinclusive"}],"output":{"name":"bool"}}],[11,"eq","std::cmp","",4,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"eq","std::any","",185,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",185,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"eq","std::cell","",1,{"inputs":[{"name":"self"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"eq","std::char","",119,{"inputs":[{"name":"self"},{"name":"chartryfromerror"}],"output":{"name":"bool"}}],[11,"ne","","",119,{"inputs":[{"name":"self"},{"name":"chartryfromerror"}],"output":{"name":"bool"}}],[11,"eq","std::option","",69,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","std::result","",68,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","std::str::pattern","",89,{"inputs":[{"name":"self"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"self"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"eq","std::str","",110,{"inputs":[{"name":"self"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",110,{"inputs":[{"name":"self"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"eq","","",111,{"inputs":[{"name":"self"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",111,{"inputs":[{"name":"self"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"eq","std::fmt","",116,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"haystack","std::str::pattern","",212,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",212,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",212,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","",212,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"haystack","","",213,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",213,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",213,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","",213,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"haystack","","",173,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",173,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",173,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","",173,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"haystack","","",214,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",214,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",214,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rem_assign","std::num","",132,null],[11,"rem_assign","","",132,null],[11,"rem_assign","","",132,null],[11,"rem_assign","","",132,null],[11,"rem_assign","","",132,null],[11,"rem_assign","","",132,null],[11,"rem_assign","","",132,null],[11,"rem_assign","","",132,null],[11,"rem_assign","","",132,null],[11,"rem_assign","","",132,null],[11,"rem_assign","","",132,null],[11,"rem_assign","","",132,null],[11,"into_iter","std::option","Returns a consuming iterator over the possibly contained value.",69,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","std::result","Returns a consuming iterator over the possibly contained value.",68,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"default","std::cell","Creates a `Cell<T>`, with the `Default` value for T.",177,{"inputs":[],"output":{"name":"cell"}}],[11,"default","","Creates a `RefCell<T>`, with the `Default` value for T.",178,{"inputs":[],"output":{"name":"refcell"}}],[11,"default","","Creates an `UnsafeCell`, with the `Default` value for T.",181,{"inputs":[],"output":{"name":"unsafecell"}}],[11,"default","std::iter","",156,{"inputs":[],"output":{"name":"empty"}}],[11,"default","std::option","Returns None.",69,{"inputs":[],"output":{"name":"option"}}],[11,"default","std::hash","",174,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"default","std::num","",132,{"inputs":[],"output":{"name":"wrapping"}}],[11,"default","std::marker","",176,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"default","std::hash","",230,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"default","","",231,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"default","","",232,{"inputs":[],"output":{"name":"siphasher"}}],[11,"default","std::fmt","",116,{"inputs":[],"output":{"name":"error"}}],[11,"from_success","std::result","",68,{"inputs":[{"name":"u"}],"output":{"name":"result"}}],[11,"from_error","","",68,{"inputs":[{"name":"v"}],"output":{"name":"result"}}],[11,"translate","","",68,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","std::mem","",154,{"inputs":[{"name":"self"}],"output":{"name":"discriminant"}}],[11,"clone","std::ptr","",234,{"inputs":[{"name":"self"}],"output":{"name":"shared"}}],[11,"clone","std::cell","",177,{"inputs":[{"name":"self"}],"output":{"name":"cell"}}],[11,"clone","","",178,{"inputs":[{"name":"self"}],"output":{"name":"refcell"}}],[11,"clone","std::iter","",156,{"inputs":[{"name":"self"}],"output":{"name":"empty"}}],[11,"clone","std::option","",203,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","std::result","",206,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","std::slice","",165,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","","",167,{"inputs":[{"name":"self"}],"output":{"name":"split"}}],[11,"clone","","",209,{"inputs":[{"name":"self"}],"output":{"name":"windows"}}],[11,"clone","","",210,{"inputs":[{"name":"self"}],"output":{"name":"chunks"}}],[11,"clone","std::hash","",174,{"inputs":[{"name":"self"}],"output":{"name":"buildhasherdefault"}}],[11,"clone","std::num","",132,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"clone","","",182,{"inputs":[{"name":"self"}],"output":{"name":"parsefloaterror"}}],[11,"clone","","",131,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[11,"clone","","",183,{"inputs":[{"name":"self"}],"output":{"name":"tryfrominterror"}}],[11,"clone","","",184,{"inputs":[{"name":"self"}],"output":{"name":"parseinterror"}}],[11,"clone","std::marker","",176,{"inputs":[{"name":"self"}],"output":{"name":"phantomdata"}}],[11,"clone","std::ops","",155,{"inputs":[{"name":"self"}],"output":{"name":"rangefull"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"rangefrom"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"rangeto"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"rangeinclusive"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"rangetoinclusive"}}],[11,"clone","std::cmp","",4,{"inputs":[{"name":"self"}],"output":{"name":"ordering"}}],[11,"clone","std::any","",185,{"inputs":[{"name":"self"}],"output":{"name":"typeid"}}],[11,"clone","std::cell","",1,{"inputs":[{"name":"self"}],"output":{"name":"borrowstate"}}],[11,"clone","std::char","",119,{"inputs":[{"name":"self"}],"output":{"name":"chartryfromerror"}}],[11,"clone","","",186,{"inputs":[{"name":"self"}],"output":{"name":"escapeunicode"}}],[11,"clone","","",187,{"inputs":[{"name":"self"}],"output":{"name":"escapedefault"}}],[11,"clone","","",188,{"inputs":[{"name":"self"}],"output":{"name":"escapedebug"}}],[11,"clone","","",189,{"inputs":[{"name":"self"}],"output":{"name":"decodeutf8"}}],[11,"clone","std::iter","",190,{"inputs":[{"name":"self"}],"output":{"name":"stepby"}}],[11,"clone","","",191,{"inputs":[{"name":"self"}],"output":{"name":"repeat"}}],[11,"clone","","",192,{"inputs":[{"name":"self"}],"output":{"name":"once"}}],[11,"clone","","",193,{"inputs":[{"name":"self"}],"output":{"name":"rev"}}],[11,"clone","","",194,{"inputs":[{"name":"self"}],"output":{"name":"cloned"}}],[11,"clone","","",195,{"inputs":[{"name":"self"}],"output":{"name":"cycle"}}],[11,"clone","","",196,{"inputs":[{"name":"self"}],"output":{"name":"chain"}}],[11,"clone","","",197,{"inputs":[{"name":"self"}],"output":{"name":"zip"}}],[11,"clone","","",157,{"inputs":[{"name":"self"}],"output":{"name":"map"}}],[11,"clone","","",158,{"inputs":[{"name":"self"}],"output":{"name":"filter"}}],[11,"clone","","",159,{"inputs":[{"name":"self"}],"output":{"name":"filtermap"}}],[11,"clone","","",198,{"inputs":[{"name":"self"}],"output":{"name":"enumerate"}}],[11,"clone","","",199,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"clone","","",160,{"inputs":[{"name":"self"}],"output":{"name":"skipwhile"}}],[11,"clone","","",161,{"inputs":[{"name":"self"}],"output":{"name":"takewhile"}}],[11,"clone","","",200,{"inputs":[{"name":"self"}],"output":{"name":"skip"}}],[11,"clone","","",201,{"inputs":[{"name":"self"}],"output":{"name":"take"}}],[11,"clone","","",162,{"inputs":[{"name":"self"}],"output":{"name":"scan"}}],[11,"clone","","",163,{"inputs":[{"name":"self"}],"output":{"name":"flatmap"}}],[11,"clone","","",202,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"clone","","",164,{"inputs":[{"name":"self"}],"output":{"name":"inspect"}}],[11,"clone","std::option","",69,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",205,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","std::raw","",67,{"inputs":[{"name":"self"}],"output":{"name":"traitobject"}}],[11,"clone","std::result","",68,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","std::str::pattern","",89,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"clone","","",212,{"inputs":[{"name":"self"}],"output":{"name":"charsearcher"}}],[11,"clone","","",213,{"inputs":[{"name":"self"}],"output":{"name":"charslicesearcher"}}],[11,"clone","","",173,{"inputs":[{"name":"self"}],"output":{"name":"charpredicatesearcher"}}],[11,"clone","","",214,{"inputs":[{"name":"self"}],"output":{"name":"strsearcher"}}],[11,"clone","std::str","",110,{"inputs":[{"name":"self"}],"output":{"name":"parseboolerror"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"utf8error"}}],[11,"clone","","",215,{"inputs":[{"name":"self"}],"output":{"name":"chars"}}],[11,"clone","","",216,{"inputs":[{"name":"self"}],"output":{"name":"charindices"}}],[11,"clone","","",217,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"clone","","",218,{"inputs":[{"name":"self"}],"output":{"name":"split"}}],[11,"clone","","",219,{"inputs":[{"name":"self"}],"output":{"name":"rsplit"}}],[11,"clone","","",220,{"inputs":[{"name":"self"}],"output":{"name":"splitterminator"}}],[11,"clone","","",221,{"inputs":[{"name":"self"}],"output":{"name":"rsplitterminator"}}],[11,"clone","","",222,{"inputs":[{"name":"self"}],"output":{"name":"splitn"}}],[11,"clone","","",223,{"inputs":[{"name":"self"}],"output":{"name":"rsplitn"}}],[11,"clone","","",224,{"inputs":[{"name":"self"}],"output":{"name":"matchindices"}}],[11,"clone","","",225,{"inputs":[{"name":"self"}],"output":{"name":"rmatchindices"}}],[11,"clone","","",226,{"inputs":[{"name":"self"}],"output":{"name":"matches"}}],[11,"clone","","",227,{"inputs":[{"name":"self"}],"output":{"name":"rmatches"}}],[11,"clone","","",228,{"inputs":[{"name":"self"}],"output":{"name":"lines"}}],[11,"clone","","",229,{"inputs":[{"name":"self"}],"output":{"name":"linesany"}}],[11,"clone","std::hash","",230,{"inputs":[{"name":"self"}],"output":{"name":"siphasher13"}}],[11,"clone","","",231,{"inputs":[{"name":"self"}],"output":{"name":"siphasher24"}}],[11,"clone","","",232,{"inputs":[{"name":"self"}],"output":{"name":"siphasher"}}],[11,"clone","std::fmt","",116,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"clone","","",175,{"inputs":[{"name":"self"}],"output":{"name":"arguments"}}],[11,"shr_assign","std::num","",132,null],[11,"shr_assign","","",132,null],[11,"shr_assign","","",132,null],[11,"shr_assign","","",132,null],[11,"shr_assign","","",132,null],[11,"shr_assign","","",132,null],[11,"shr_assign","","",132,null],[11,"shr_assign","","",132,null],[11,"shr_assign","","",132,null],[11,"shr_assign","","",132,null],[11,"len","std::char","",186,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",187,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","std::iter","",156,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",192,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",193,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",193,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","",194,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",194,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","",157,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",157,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","",198,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",198,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","",202,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",202,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","",164,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",164,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","std::slice","",165,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","",166,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","std::str","",217,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",217,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"not","std::num","",132,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"not","","",132,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"not","","",132,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"not","","",132,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"not","","",132,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"not","","",132,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"not","","",132,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"not","","",132,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"not","","",132,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"not","","",132,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"not","","",132,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"not","","",132,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",132,null],[11,"div_assign","","",132,null],[11,"div_assign","","",132,null],[11,"div_assign","","",132,null],[11,"div_assign","","",132,null],[11,"div_assign","","",132,null],[11,"div_assign","","",132,null],[11,"div_assign","","",132,null],[11,"div_assign","","",132,null],[11,"div_assign","","",132,null],[11,"div_assign","","",132,null],[11,"div_assign","","",132,null],[11,"from_iter","std::option","Takes each element in the `Iterator`: if it is `None`, no further elements are taken, and the `None` is returned. Should no `None` occur, a container with the values of each `Option` is returned.",69,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"from_iter","std::result","Takes each element in the `Iterator`: if it is an `Err`, no further elements are taken, and the `Err` is returned. Should no `Err` occur, a container with the values of each `Result` is returned.",68,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"deref_mut","std::cell","",180,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"build_hasher","std::hash","",174,{"inputs":[{"name":"self"}],"output":{"name":"h"}}],[11,"product","std::result","",68,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"product","std::num","",132,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",132,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",132,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",132,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",132,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",132,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",132,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",132,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",132,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",132,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",132,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",132,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",132,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",132,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",132,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",132,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",132,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",132,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",132,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",132,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",182,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",183,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",184,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::cell","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::char","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",186,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",187,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",188,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::str","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::fmt","",175,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"shl_assign","std::num","",132,null],[11,"shl_assign","","",132,null],[11,"shl_assign","","",132,null],[11,"shl_assign","","",132,null],[11,"shl_assign","","",132,null],[11,"shl_assign","","",132,null],[11,"shl_assign","","",132,null],[11,"shl_assign","","",132,null],[11,"shl_assign","","",132,null],[11,"shl_assign","","",132,null],[11,"next_back","std::str::pattern","",212,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",212,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","",212,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",213,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",213,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","",213,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",173,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",173,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","",173,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",214,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",214,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","std::char","",186,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",186,null],[11,"count","","",186,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",186,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",187,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",187,null],[11,"count","","",187,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",187,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",187,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",188,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",188,null],[11,"next","","",189,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","std::iter","",190,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",190,null],[11,"next","","",190,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",190,null],[11,"next","","",190,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",190,null],[11,"next","std::ops","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",51,null],[11,"next","","",52,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",54,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",54,null],[11,"next","std::iter","",191,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",191,null],[11,"next","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",156,null],[11,"next","","",192,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",192,null],[11,"next","","",193,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",193,null],[11,"next","","",194,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",194,null],[11,"fold","","",194,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"next","","",195,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",195,null],[11,"next","","",196,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",196,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fold","","",196,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"nth","","",196,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"find","","",196,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"last","","",196,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",196,null],[11,"next","","",197,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",197,null],[11,"next","","",157,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",157,null],[11,"fold","","",157,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"next","","",158,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",158,null],[11,"next","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",159,null],[11,"next","","Overflow Behavior",198,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",198,null],[11,"nth","","",198,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",198,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",199,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",199,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",199,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",199,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",199,null],[11,"next","","",160,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",160,null],[11,"next","","",161,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",161,null],[11,"next","","",200,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",200,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",200,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",200,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",200,null],[11,"next","","",201,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",201,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",201,null],[11,"next","","",162,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",162,null],[11,"next","","",163,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",163,null],[11,"next","","",202,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",202,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",202,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",202,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",202,null],[11,"next","","",202,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",202,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",202,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",202,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",202,null],[11,"next","","",164,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",164,null],[11,"next","std::option","",203,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",203,null],[11,"next","","",204,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",204,null],[11,"next","","",205,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",205,null],[11,"next","std::result","",206,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",206,null],[11,"next","","",207,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",207,null],[11,"next","","",208,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",208,null],[11,"next","std::slice","",167,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",167,null],[11,"next","","",168,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",168,null],[11,"next","","",209,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",209,null],[11,"count","","",209,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",209,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",209,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",210,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",210,null],[11,"count","","",210,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",210,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",210,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",211,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",211,null],[11,"count","","",211,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",211,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",211,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","std::str","",215,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",215,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",215,null],[11,"last","","",215,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",216,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",216,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",216,null],[11,"last","","",216,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",217,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",217,null],[11,"count","","",217,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",217,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",217,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","","",228,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",228,null],[11,"next","","",229,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",229,null],[11,"next","std::slice","",165,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",165,null],[11,"count","","",165,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",165,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",165,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",166,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",166,null],[11,"count","","",166,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",166,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",166,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",169,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",169,null],[11,"next","","",170,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",170,null],[11,"next","","",171,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",171,null],[11,"next","","",172,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",172,null],[11,"next","std::str","",218,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",219,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",220,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",221,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",222,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",224,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",225,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",226,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",227,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"mul_assign","std::num","",132,null],[11,"mul_assign","","",132,null],[11,"mul_assign","","",132,null],[11,"mul_assign","","",132,null],[11,"mul_assign","","",132,null],[11,"mul_assign","","",132,null],[11,"mul_assign","","",132,null],[11,"mul_assign","","",132,null],[11,"mul_assign","","",132,null],[11,"mul_assign","","",132,null],[11,"mul_assign","","",132,null],[11,"mul_assign","","",132,null],[11,"sum","std::result","",68,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"sum","std::num","",132,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",132,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",132,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",132,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",132,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",132,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",132,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",132,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",132,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",132,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",132,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",132,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",132,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",132,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",132,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",132,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",132,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",132,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",132,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",132,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",132,null],[11,"bitxor_assign","","",132,null],[11,"bitxor_assign","","",132,null],[11,"bitxor_assign","","",132,null],[11,"bitxor_assign","","",132,null],[11,"bitxor_assign","","",132,null],[11,"bitxor_assign","","",132,null],[11,"bitxor_assign","","",132,null],[11,"bitxor_assign","","",132,null],[11,"bitxor_assign","","",132,null],[11,"bitxor_assign","","",132,null],[11,"bitxor_assign","","",132,null],[11,"from","std::cell","",177,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"from","","",178,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"from","","",181,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"from","std::option","",69,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"neg","std::num","",132,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"neg","","",132,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"neg","","",132,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"neg","","",132,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"neg","","",132,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"neg","","",132,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"neg","","",132,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"neg","","",132,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"neg","","",132,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"neg","","",132,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"neg","","",132,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"neg","","",132,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"rem","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",132,null],[11,"rem","","",132,null],[11,"rem","","",132,null],[11,"rem","","",132,null],[11,"rem","","",132,null],[11,"rem","","",132,null],[11,"rem","","",132,null],[11,"rem","","",132,null],[11,"rem","","",132,null],[11,"rem","","",132,null],[11,"rem","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",132,null],[11,"rem","","",132,null],[11,"as_ref","std::slice","",165,null],[11,"write","std::hash","",232,null],[11,"finish","","",232,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",230,null],[11,"finish","","",230,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",231,null],[11,"finish","","",231,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"div","std::num","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",132,null],[11,"div","","",132,null],[11,"div","","",132,null],[11,"div","","",132,null],[11,"div","","",132,null],[11,"div","","",132,null],[11,"div","","",132,null],[11,"div","","",132,null],[11,"div","","",132,null],[11,"div","","",132,null],[11,"div","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",132,null],[11,"div","","",132,null],[11,"mul","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",132,null],[11,"mul","","",132,null],[11,"mul","","",132,null],[11,"mul","","",132,null],[11,"mul","","",132,null],[11,"mul","","",132,null],[11,"mul","","",132,null],[11,"mul","","",132,null],[11,"mul","","",132,null],[11,"mul","","",132,null],[11,"mul","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",132,null],[11,"mul","","",132,null],[11,"sub_assign","","",132,null],[11,"sub_assign","","",132,null],[11,"sub_assign","","",132,null],[11,"sub_assign","","",132,null],[11,"sub_assign","","",132,null],[11,"sub_assign","","",132,null],[11,"sub_assign","","",132,null],[11,"sub_assign","","",132,null],[11,"sub_assign","","",132,null],[11,"sub_assign","","",132,null],[11,"sub_assign","","",132,null],[11,"sub_assign","","",132,null],[11,"sub","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",132,null],[11,"sub","","",132,null],[11,"sub","","",132,null],[11,"sub","","",132,null],[11,"sub","","",132,null],[11,"sub","","",132,null],[11,"sub","","",132,null],[11,"sub","","",132,null],[11,"sub","","",132,null],[11,"sub","","",132,null],[11,"sub","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",132,null],[11,"sub","","",132,null],[11,"fmt","std::ptr","",235,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",234,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"add","std::num","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",132,null],[11,"add","","",132,null],[11,"add","","",132,null],[11,"add","","",132,null],[11,"add","","",132,null],[11,"add","","",132,null],[11,"add","","",132,null],[11,"add","","",132,null],[11,"add","","",132,null],[11,"add","","",132,null],[11,"add","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",132,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",132,null],[11,"add","","",132,null],[11,"deref","std::ptr","",235,null],[11,"deref","","",234,null],[11,"deref","std::cell","",179,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",180,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"hash","std::collections::btree_map","",236,null],[11,"hash","std::borrow","",72,null],[11,"hash","std::collections::linked_list","",237,null],[11,"hash","std::string","",128,null],[11,"hash","std::vec","",125,null],[11,"hash","std::collections::vec_deque","",238,null],[11,"hash","std::collections::btree_set","",239,null],[11,"hash","std::collections","",105,null],[11,"add_assign","std::borrow","",72,null],[11,"add_assign","","",72,null],[11,"add_assign","std::string","",128,null],[11,"default","std::collections::binary_heap","Creates an empty `BinaryHeap<T>`.",240,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"default","std::collections::btree_map","Creates an empty `BTreeMap<K, V>`.",236,{"inputs":[],"output":{"name":"btreemap"}}],[11,"default","std::collections::btree_set","Makes an empty `BTreeSet<T>` with a reasonable choice of B.",239,{"inputs":[],"output":{"name":"btreeset"}}],[11,"default","std::borrow","Creates an owned Cow<'a, B> with the default value for the contained owned value.",72,{"inputs":[],"output":{"name":"cow"}}],[11,"default","std::collections::linked_list","Creates an empty `LinkedList<T>`.",237,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"default","std::string","Creates an empty `String`.",128,{"inputs":[],"output":{"name":"string"}}],[11,"default","std::vec","Creates an empty `Vec<T>`.",125,{"inputs":[],"output":{"name":"vec"}}],[11,"default","std::collections::vec_deque","Creates an empty `VecDeque<T>`.",238,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"index","std::collections::btree_map","",236,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"v"}}],[11,"index","std::string","",128,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"str"}}],[11,"index","","",128,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",128,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",128,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index","","",128,{"inputs":[{"name":"self"},{"name":"rangeinclusive"}],"output":{"name":"str"}}],[11,"index","","",128,{"inputs":[{"name":"self"},{"name":"rangetoinclusive"}],"output":{"name":"str"}}],[11,"index","std::vec","",125,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",125,null],[11,"index","","",125,null],[11,"index","","",125,null],[11,"index","","",125,null],[11,"index","","",125,null],[11,"index","","",125,null],[11,"index","std::collections::vec_deque","",238,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"a"}}],[11,"index_mut","std::string","",128,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"str"}}],[11,"index_mut","","",128,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index_mut","","",128,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index_mut","","",128,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index_mut","","",128,{"inputs":[{"name":"self"},{"name":"rangeinclusive"}],"output":{"name":"str"}}],[11,"index_mut","","",128,{"inputs":[{"name":"self"},{"name":"rangetoinclusive"}],"output":{"name":"str"}}],[11,"index_mut","std::vec","",125,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",125,null],[11,"index_mut","","",125,null],[11,"index_mut","","",125,null],[11,"index_mut","","",125,null],[11,"index_mut","","",125,null],[11,"index_mut","","",125,null],[11,"index_mut","std::collections::vec_deque","",238,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"a"}}],[11,"eq","std::collections::btree_map","",236,{"inputs":[{"name":"self"},{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"eq","std::borrow","",72,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","std::collections::linked_list","",237,{"inputs":[{"name":"self"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"ne","","",237,{"inputs":[{"name":"self"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"eq","std::string","",128,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",128,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",114,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"eq","std::collections::vec_deque","",238,{"inputs":[{"name":"self"},{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"eq","std::collections::btree_set","",239,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ne","","",239,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"eq","std::string","",128,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",128,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",128,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",128,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","std::borrow","",72,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","std::string","",128,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",128,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","std::vec","",125,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",125,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","std::borrow","",72,null],[11,"ne","","",72,null],[11,"eq","","",72,null],[11,"ne","","",72,null],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","std::vec","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","std::collections","",105,{"inputs":[{"name":"self"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"ne","","",105,{"inputs":[{"name":"self"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"pointer","std::collections::linked_list","",241,null],[11,"pointer","","",242,null],[11,"pointer","std::vec","",243,null],[11,"is_empty","std::collections::binary_heap","",244,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","",245,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","",246,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","std::collections::btree_map","",247,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",248,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",249,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",250,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",251,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",252,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","std::collections::btree_set","",253,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",254,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","std::vec","",255,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","",256,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","std::collections::vec_deque","",257,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","",258,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","",259,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next","std::collections::binary_heap","",244,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",244,null],[11,"next","","",245,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",245,null],[11,"next","","",246,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",246,null],[11,"next","std::collections::btree_map","",247,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",247,null],[11,"next","","",248,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",248,null],[11,"next","","",249,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",249,null],[11,"next","","",250,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",250,null],[11,"next","","",251,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",251,null],[11,"next","","",260,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",252,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",252,null],[11,"next","","",261,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","std::collections::btree_set","",253,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",253,null],[11,"next","","",254,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",254,null],[11,"next","","",262,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",263,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",263,null],[11,"next","","",264,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",264,null],[11,"next","","",265,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",265,null],[11,"next","","",266,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",266,null],[11,"next","std::collections::linked_list","",267,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",267,null],[11,"next","","",268,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",268,null],[11,"next","","",269,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",269,null],[11,"next","std::str","",270,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",270,null],[11,"next","std::string","",271,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",271,null],[11,"next","std::vec","",255,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",255,null],[11,"count","","",255,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",256,null],[11,"next","std::collections::vec_deque","",257,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",257,null],[11,"fold","","",257,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"next","","",258,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",258,null],[11,"fold","","",258,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"next","","",259,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",259,null],[11,"next","","",272,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",272,null],[11,"partial_cmp","std::collections::btree_map","",236,{"inputs":[{"name":"self"},{"name":"btreemap"}],"output":{"name":"option"}}],[11,"partial_cmp","std::borrow","",72,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"option"}}],[11,"partial_cmp","std::collections::linked_list","",237,{"inputs":[{"name":"self"},{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"partial_cmp","std::vec","",125,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"option"}}],[11,"partial_cmp","std::collections::vec_deque","",238,{"inputs":[{"name":"self"},{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"partial_cmp","std::collections::btree_set","",239,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"option"}}],[11,"lt","","",239,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"le","","",239,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"gt","","",239,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ge","","",239,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::string","",128,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"option"}}],[11,"lt","","",128,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"le","","",128,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"gt","","",128,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ge","","",128,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"from","std::collections::binary_heap","",240,{"inputs":[{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","std::vec","",125,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from","std::string","",128,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"from","","",128,{"inputs":[{"name":"cow"}],"output":{"name":"string"}}],[11,"from","std::borrow","",72,{"inputs":[{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",72,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"from","std::vec","",125,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"from","","",125,null],[11,"from","","",125,{"inputs":[{"name":"cow"}],"output":{"name":"vec"}}],[11,"from","","",125,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[11,"from","std::borrow","",72,null],[11,"from","","",72,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"from","std::collections::vec_deque","",238,{"inputs":[{"name":"vec"}],"output":{"name":"vecdeque"}}],[11,"from","std::vec","",125,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vec"}}],[11,"from_str","std::string","",128,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"finalize","std::collections::linked_list","",241,null],[11,"finalize","","",242,null],[11,"finalize","std::vec","",243,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"start","std::ops","",155,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"end","","",155,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"start","","",52,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"end","","",52,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"start","","",53,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"end","","",53,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"start","","",51,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"end","","",51,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"clone","std::collections::binary_heap","",240,{"inputs":[{"name":"self"}],"output":{"name":"binaryheap"}}],[11,"clone_from","","",240,null],[11,"clone","","",244,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","std::collections::btree_map","",236,{"inputs":[{"name":"self"}],"output":{"name":"btreemap"}}],[11,"clone","","",247,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","","",250,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"clone","","",251,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"clone","","",260,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"clone","std::collections::btree_set","",253,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","","",262,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"clone","","",263,{"inputs":[{"name":"self"}],"output":{"name":"difference"}}],[11,"clone","","",264,{"inputs":[{"name":"self"}],"output":{"name":"symmetricdifference"}}],[11,"clone","","",265,{"inputs":[{"name":"self"}],"output":{"name":"intersection"}}],[11,"clone","","",266,{"inputs":[{"name":"self"}],"output":{"name":"union"}}],[11,"clone","std::borrow","",72,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"clone","std::collections::linked_list","",267,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","","",237,{"inputs":[{"name":"self"}],"output":{"name":"linkedlist"}}],[11,"clone","std::string","",128,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"clone_from","","",128,null],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"clone","std::vec","",125,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"clone_from","","",125,null],[11,"clone","","",255,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","std::collections::vec_deque","",238,{"inputs":[{"name":"self"}],"output":{"name":"vecdeque"}}],[11,"clone","","",257,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","std::collections::binary_heap","",245,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","std::collections::btree_set","",239,{"inputs":[{"name":"self"}],"output":{"name":"btreeset"}}],[11,"clone","std::collections::linked_list","",269,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","std::str","",270,{"inputs":[{"name":"self"}],"output":{"name":"encodeutf16"}}],[11,"clone","std::collections::vec_deque","",259,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","std::collections","",105,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"add","std::borrow","",72,null],[11,"add","","",72,null],[11,"add","std::string","",128,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"drop","std::collections::binary_heap","",273,null],[11,"drop","std::collections::btree_map","",236,null],[11,"drop","","",249,null],[11,"drop","std::collections::linked_list","",237,null],[11,"drop","std::string","",271,null],[11,"drop","std::vec","",125,null],[11,"drop","","",255,null],[11,"drop","","",256,null],[11,"drop","std::collections::vec_deque","",238,null],[11,"drop","","",272,null],[11,"deref","std::collections::binary_heap","",273,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","std::borrow","",72,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"deref","std::string","",128,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","std::vec","",125,null],[11,"fmt","std::collections::binary_heap","",240,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::collections::btree_map","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",274,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",275,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",236,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::collections::btree_set","",239,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::borrow","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::collections::linked_list","",237,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::string","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::vec","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",255,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::collections::vec_deque","",238,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::string","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::collections","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::borrow","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::string","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_iter","std::collections::binary_heap","Creates a consuming iterator, that is, one that moves each value out of the binary heap in arbitrary order. The binary heap cannot be used after calling this.",240,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","std::collections::btree_map","",236,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","std::collections::btree_set","Gets an iterator for moving out the BtreeSet's contents.",239,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","std::collections::linked_list","Consumes the list into an iterator yielding elements by value.",237,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","std::vec","Creates a consuming iterator, that is, one that moves each value out of the vector (from start to end). The vector cannot be used after calling this.",125,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","std::collections::vec_deque","Consumes the list into a front-to-back iterator yielding elements by value.",238,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"as_ref","std::borrow","",72,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","std::string","",128,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_ref","","",128,null],[11,"as_ref","std::vec","",125,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"as_ref","","",125,null],[11,"borrow","std::borrow","",72,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"borrow","std::vec","",125,null],[11,"borrow","std::string","",128,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cmp","std::collections::btree_map","",236,{"inputs":[{"name":"self"},{"name":"btreemap"}],"output":{"name":"ordering"}}],[11,"cmp","std::borrow","",72,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"ordering"}}],[11,"cmp","std::collections::linked_list","",237,{"inputs":[{"name":"self"},{"name":"linkedlist"}],"output":{"name":"ordering"}}],[11,"cmp","std::vec","",125,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"cmp","std::collections::vec_deque","",238,{"inputs":[{"name":"self"},{"name":"vecdeque"}],"output":{"name":"ordering"}}],[11,"cmp","std::collections::btree_set","",239,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"ordering"}}],[11,"cmp","std::string","",128,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"ordering"}}],[11,"from_iter","std::collections::binary_heap","",240,{"inputs":[{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"from_iter","std::collections::btree_map","",236,{"inputs":[{"name":"t"}],"output":{"name":"btreemap"}}],[11,"from_iter","std::collections::btree_set","",239,{"inputs":[{"name":"i"}],"output":{"name":"btreeset"}}],[11,"from_iter","std::collections::linked_list","",237,{"inputs":[{"name":"i"}],"output":{"name":"linkedlist"}}],[11,"from_iter","std::string","",128,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",128,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",128,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","std::borrow","",72,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"from_iter","","",72,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"from_iter","","",72,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"from_iter","std::vec","",125,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"from_iter","std::borrow","",72,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"from_iter","std::collections::vec_deque","",238,{"inputs":[{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"write_str","std::string","",128,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",128,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"deref_mut","std::collections::binary_heap","",273,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","std::string","",128,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref_mut","std::vec","",125,null],[11,"make_place","std::collections::linked_list","",241,{"inputs":[{"name":"self"}],"output":{"name":"frontplace"}}],[11,"make_place","","",242,{"inputs":[{"name":"self"}],"output":{"name":"backplace"}}],[11,"make_place","std::vec","",243,{"inputs":[{"name":"self"}],"output":{"name":"placeback"}}],[11,"next_back","std::collections::binary_heap","",244,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",245,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",246,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::collections::btree_map","",247,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",248,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",249,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",250,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",251,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",252,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",260,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",261,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::collections::btree_set","",253,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",254,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",262,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::collections::linked_list","",267,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",268,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",269,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::string","",271,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::vec","",255,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::collections::vec_deque","",257,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",258,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",259,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",272,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_mut","std::vec","",125,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"as_mut","","",125,null],[11,"extend","std::collections::binary_heap","",240,null],[11,"extend","","",240,null],[11,"extend","std::collections::btree_map","",236,null],[11,"extend","","",236,null],[11,"extend","std::collections::btree_set","",239,null],[11,"extend","","",239,null],[11,"extend","std::collections::linked_list","",237,null],[11,"extend","","",237,null],[11,"extend","std::string","",128,null],[11,"extend","","",128,null],[11,"extend","","",128,null],[11,"extend","","",128,null],[11,"extend","std::vec","",125,null],[11,"extend","","",125,null],[11,"extend","std::collections::vec_deque","",238,null],[11,"extend","","",238,null],[11,"borrow_mut","std::vec","",125,null],[11,"of","std::any","Returns the `TypeId` of the type this generic function has been instantiated with.",185,{"inputs":[],"output":{"name":"typeid"}}],[11,"new","std::cell","Creates a new `Cell` containing the given value.",177,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",177,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",177,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",177,{"inputs":[{"name":"self"}],"output":{"name":"unsafecell"}}],[11,"as_ptr","","Returns a raw pointer to the underlying data in this cell.",177,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",177,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"new","","Creates a new `RefCell` containing `value`.",178,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",178,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",178,{"inputs":[{"name":"self"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",178,{"inputs":[{"name":"self"}],"output":{"name":"ref"}}],[11,"try_borrow","","Immutably borrows the wrapped value, returning an error if the value is currently mutably borrowed.",178,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",178,{"inputs":[{"name":"self"}],"output":{"name":"refmut"}}],[11,"try_borrow_mut","","Mutably borrows the wrapped value, returning an error if the value is currently borrowed.",178,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",178,{"inputs":[{"name":"self"}],"output":{"name":"unsafecell"}}],[11,"as_ptr","","Returns a raw pointer to the underlying data in this cell.",178,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",178,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",179,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",179,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum variant.",180,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified value.",181,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",181,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",181,null],[11,"reverse","std::cmp","Reverse the `Ordering`.",4,{"inputs":[{"name":"self"}],"output":{"name":"ordering"}}],[11,"then","","Chains two orderings.",4,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"then_with","","Chains the ordering with the given function.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"ordering"}}],[11,"new","std::hash","Creates a new `SipHasher24` with the two initial keys set to 0.",231,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"new_with_keys","","Creates a `SipHasher24` that is keyed off the provided keys.",231,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher24"}}],[11,"new","","Creates a new `SipHasher13` with the two initial keys set to 0.",230,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"new_with_keys","","Creates a `SipHasher13` that is keyed off the provided keys.",230,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher13"}}],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",232,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",232,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"peek","std::iter","Returns a reference to the next() value without advancing the iterator.",199,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"contains","std::ops","Examples",51,{"inputs":[{"name":"self"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the given amount at each iteration.",51,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"contains","","Examples",52,{"inputs":[{"name":"self"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"step_by","","Creates an iterator starting at the same point, but stepping by the given amount at each iteration.",52,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"contains","","Examples",53,{"inputs":[{"name":"self"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"contains","","Examples",54,{"inputs":[{"name":"self"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the given amount at each iteration.",54,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"contains","","Examples",55,{"inputs":[{"name":"self"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"new","std::ptr","Creates a new `Unique`.",235,null],[11,"get","","Dereferences the content.",235,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",235,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"new","","Creates a new `Shared`.",234,null],[11,"is_ok","std::result","Returns true if the result is `Ok`.",68,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`.",68,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result<T, E>` to [`Option<T>`].",68,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result<T, E>` to [`Option<E>`].",68,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result<T, E>` to `Result<&T, &E>`.",68,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result<T, E>` to `Result<&mut T, &mut E>`.",68,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to a contained `Ok` value, leaving an `Err` value untouched.",68,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a contained `Err` value, leaving an `Ok` value untouched.",68,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",68,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",68,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",68,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",68,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",68,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",68,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`. Else, it returns `optb`.",68,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`. If the value is an `Err` then it calls `op` with its value.",68,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",68,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",68,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",68,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"expect_err","","Unwraps a result, yielding the content of an `Err`.",68,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"e"}}],[11,"unwrap_or_default","","Returns the contained value or a default",68,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"is_some","std::option","Returns `true` if the option is a `Some` value.",69,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value.",69,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`.",69,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`.",69,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",69,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is `Some(v)`.",69,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",69,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",69,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value.",69,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any), or returns a `default` (if not).",69,{"inputs":[{"name":"self"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any), or computes a `default` (if not).",69,{"inputs":[{"name":"self"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a [`Result<T, E>`], mapping `Some(v)` to [`Ok(v)`] and `None` to [`Err(err)`][Err].",69,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a [`Result<T, E>`], mapping `Some(v)` to [`Ok(v)`] and `None` to [`Err(err())`][Err].",69,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",69,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",69,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",69,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the wrapped value and returns the result.",69,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",69,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and returns the result.",69,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",69,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the option.",69,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",69,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"new","std::boxed","Allocates memory on the heap and then places `x` into it.",109,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",109,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",109,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",109,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",109,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","std::rc","Constructs a new `Rc<T>`.",146,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"try_unwrap","","Returns the contained value, if the `Rc` has exactly one strong reference.",146,{"inputs":[{"name":"rc"}],"output":{"name":"result"}}],[11,"would_unwrap","","Checks whether [`Rc::try_unwrap`][try_unwrap] would return [`Ok`].",146,{"inputs":[{"name":"rc"}],"output":{"name":"bool"}}],[11,"into_raw","","Consumes the `Rc`, returning the wrapped pointer.",146,null],[11,"from_raw","","Constructs an `Rc` from a raw pointer.",146,null],[11,"downgrade","","Creates a new [`Weak`][weak] pointer to this value.",146,{"inputs":[{"name":"rc"}],"output":{"name":"weak"}}],[11,"weak_count","","Gets the number of [`Weak`][weak] pointers to this value.",146,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"strong_count","","Gets the number of strong (`Rc`) pointers to this value.",146,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"is_unique","","Returns true if there are no other `Rc` or [`Weak`][weak] pointers to this inner value.",146,{"inputs":[{"name":"rc"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the inner value, if there are no other `Rc` or [`Weak`][weak] pointers to the same value.",146,{"inputs":[{"name":"rc"}],"output":{"name":"option"}}],[11,"ptr_eq","","Returns true if the two `Rc`s point to the same value (not just values that compare as equal).",146,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"make_mut","","Makes a mutable reference into the given `Rc`.",146,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"new","","Constructs a new `Weak<T>`, without an accompanying instance of `T`.",147,{"inputs":[],"output":{"name":"weak"}}],[11,"upgrade","","Upgrades the `Weak` pointer to an [`Rc`][rc], if possible.",147,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_mut","std::borrow","Acquires a mutable reference to the owned form of the data.",72,null],[11,"into_owned","","Extracts the owned data.",72,null],[11,"field","std::fmt","Adds a new field to the generated tuple struct output.",276,{"inputs":[{"name":"self"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",276,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the set output.",277,{"inputs":[{"name":"self"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",277,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",277,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",278,{"inputs":[{"name":"self"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",278,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",278,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated struct output.",279,{"inputs":[{"name":"self"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",279,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",280,{"inputs":[{"name":"self"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",280,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",280,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been emitted into a str. The str should *not* contain the sign for the integer, that will be added by this method.",233,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer after applying the relevant formatting flags specified. The flags recognized for generic strings are:",233,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this formatter.",233,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",233,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",233,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fill","","Character used as 'fill' whenever there is alignment",233,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",233,{"inputs":[{"name":"self"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",233,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",233,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",233,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",233,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",233,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",233,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of `fmt::Debug` implementations for structs.",233,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of `fmt::Debug` implementations for tuple structs.",233,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of `fmt::Debug` implementations for list-like structures.",233,{"inputs":[{"name":"self"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of `fmt::Debug` implementations for set-like structures.",233,{"inputs":[{"name":"self"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of `fmt::Debug` implementations for map-like structures.",233,{"inputs":[{"name":"self"}],"output":{"name":"debugmap"}}],[11,"into_slice","std::slice","View the underlying data as a subslice of the original data.",166,null],[11,"as_slice","","View the underlying data as a subslice of the original data.",165,null],[11,"as_str","std::str","View the underlying data as a subslice of the original data.",216,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was verified.",111,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",215,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","std::string","Creates a new empty `String`.",128,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",128,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",128,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",128,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `Err` if `v` contains any invalid data.",128,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing invalid data with the replacement character (U+FFFD).",128,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",128,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the string contains valid UTF-8.",128,{"inputs":[{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",128,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"as_str","","Extracts a string slice containing the entire string.",128,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_mut_str","","Extracts a string slice containing the entire string.",128,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"push_str","","Appends a given string slice onto the end of this `String`.",128,null],[11,"capacity","","Returns this `String`'s capacity, in bytes.",128,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Ensures that this `String`'s capacity is at least `additional` bytes larger than its length.",128,null],[11,"reserve_exact","","Ensures that this `String`'s capacity is `additional` bytes larger than its length.",128,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",128,null],[11,"push","","Appends the given `char` to the end of this `String`.",128,null],[11,"as_bytes","","Returns a byte slice of this `String`'s contents.",128,null],[11,"truncate","","Shortens this `String` to the specified length.",128,null],[11,"pop","","Removes the last character from the string buffer and returns it.",128,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",128,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"char"}}],[11,"insert","","Inserts a character into this `String` at a byte position.",128,null],[11,"insert_str","","Inserts a string slice into this `String` at a byte position.",128,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",128,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of this `String`, in bytes.",128,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",128,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split_off","","Divide one string into two at an index.",128,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"string"}}],[11,"clear","","Truncates this `String`, removing all contents.",128,null],[11,"drain","","Create a draining iterator that removes the specified range in the string and yields the removed chars.",128,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_boxed_str","","Converts this `String` into a `Box<str>`.",128,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",112,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",112,{"inputs":[{"name":"self"}],"output":{"name":"utf8error"}}],[11,"new","std::vec","Constructs a new, empty `Vec<T>`.",125,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified capacity.",125,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of another vector.",125,null],[11,"capacity","","Returns the number of elements the vector can hold without reallocating.",125,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given `Vec<T>`. The collection may reserve more space to avoid frequent reallocations.",125,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `Vec<T>`. Does nothing if the capacity is already sufficient.",125,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",125,null],[11,"into_boxed_slice","","Converts the vector into [`Box<[T]>`][owned slice].",125,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"truncate","","Shortens the vector, keeping the first `len` elements and dropping the rest.",125,null],[11,"as_slice","","Extracts a slice containing the entire vector.",125,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",125,null],[11,"set_len","","Sets the length of a vector.",125,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing it with the last element.",125,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all elements after it to the right.",125,null],[11,"remove","","Removes and returns the element at position `index` within the vector, shifting all elements after it to the left.",125,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",125,null],[11,"dedup_by_key","","Removes consecutive elements in the vector that resolve to the same key.",125,null],[11,"dedup_by","","Removes consecutive elements in the vector that resolve to the same key.",125,null],[11,"push","","Appends an element to the back of a collection.",125,null],[11,"pop","","Removes the last element from a vector and returns it, or [`None`] if it is empty.",125,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",125,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector and yields the removed items.",125,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",125,null],[11,"len","","Returns the number of elements in the vector.",125,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",125,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the collection into two at the given index.",125,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",125,null],[11,"extend_from_slice","","Clones and appends all elements in a slice to the `Vec`.",125,null],[11,"place_back","","Returns a place for insertion at the back of the `Vec`.",125,{"inputs":[{"name":"self"}],"output":{"name":"placeback"}}],[11,"dedup","","Removes consecutive repeated elements in the vector.",125,null],[11,"as_slice","","Returns the remaining items of this iterator as a slice.",255,null],[11,"as_mut_slice","","Returns the remaining items of this iterator as a mutable slice.",255,null],[11,"unpaired_surrogate","std::char","Returns the unpaired surrogate which caused this error.",115,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"new","std::collections::binary_heap","Creates an empty `BinaryHeap` as a max-heap.",240,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity. This preallocates enough memory for `capacity` elements, so that the `BinaryHeap` does not have to be reallocated until it contains at least that many values.",240,{"inputs":[{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in arbitrary order.",240,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",240,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"peek_mut","","Returns a mutable reference to the greatest item in the binary heap, or `None` if it is empty.",240,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",240,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `BinaryHeap`. Does nothing if the capacity is already sufficient.",240,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the `BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",240,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",240,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it is empty.",240,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push","","Pushes an item onto the binary heap.",240,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in an optimized fashion.",240,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in an optimized fashion. The push is done regardless of whether the binary heap was empty.",240,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector in arbitrary order.",240,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted (ascending) order.",240,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of the binary heap.",240,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Checks if the binary heap is empty.",240,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",240,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"clear","","Drops all items from the binary heap.",240,null],[11,"append","","Moves all the elements of `other` into `self`, leaving `other` empty.",240,null],[11,"new","std::collections::btree_map","Makes a new empty BTreeMap with a reasonable choice for B.",236,{"inputs":[],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",236,null],[11,"get","","Returns a reference to the value corresponding to the key.",236,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",236,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",236,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",236,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",236,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",236,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map. The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will yield elements from min (inclusive) to max (exclusive). The range may also be entered as `(Bound<T>, Bound<T>)`, so for example `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive range from 4 to 10.",236,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"range"}}],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map. The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will yield elements from min (inclusive) to max (exclusive). The range may also be entered as `(Bound<T>, Bound<T>)`, so for example `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive range from 4 to 10.",236,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"rangemut"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",236,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"entry"}}],[11,"split_off","","Splits the collection into two at the given key. Returns everything after the given key, including the key.",236,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"btreemap"}}],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",236,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, sorted by key.",236,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",236,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Gets an iterator over the values of the map, in order by key.",236,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"values_mut","","Gets a mutable iterator over the values of the map, in order by key.",236,{"inputs":[{"name":"self"}],"output":{"name":"valuesmut"}}],[11,"len","","Returns the number of elements in the map.",236,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",236,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","std::collections::btree_set","Makes a new `BTreeSet` with a reasonable choice of B.",239,{"inputs":[],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator that visits the values in the `BTreeSet` in ascending order.",239,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set. The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will yield elements from min (inclusive) to max (exclusive). The range may also be entered as `(Bound<T>, Bound<T>)`, so for example `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive range from 4 to 10.",239,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"range"}}],[11,"difference","","Visits the values representing the difference, in ascending order.",239,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",239,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visits the values representing the intersection, in ascending order.",239,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"intersection"}}],[11,"union","","Visits the values representing the union, in ascending order.",239,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",239,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",239,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Clears the set, removing all values.",239,null],[11,"contains","","Returns `true` if the set contains a value.",239,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",239,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`. This is equivalent to checking for an empty intersection.",239,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",239,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",239,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set.",239,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given one. Returns the replaced value.",239,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was present in the set.",239,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",239,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",239,null],[11,"split_off","","Splits the collection into two at the given key. Returns everything after the given key, including the key.",239,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"btreeset"}}],[11,"new","std::collections::linked_list","Creates an empty `LinkedList`.",237,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",237,null],[11,"iter","","Provides a forward iterator.",237,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Provides a forward iterator with mutable references.",237,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",237,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of the `LinkedList`.",237,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clear","","Removes all elements from the `LinkedList`.",237,null],[11,"contains","","Returns `true` if the `LinkedList` contains an element equal to the given value.",237,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"front","","Provides a reference to the front element, or `None` if the list is empty.",237,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list is empty.",237,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the list is empty.",237,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list is empty.",237,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push_front","","Adds an element first in the list.",237,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is empty.",237,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push_back","","Appends an element to the back of a list",237,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if it is empty.",237,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index, including the index.",237,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"linkedlist"}}],[11,"front_place","","Returns a place for insertion at the front of the list.",237,{"inputs":[{"name":"self"}],"output":{"name":"frontplace"}}],[11,"back_place","","Returns a place for insertion at the back of the list.",237,{"inputs":[{"name":"self"}],"output":{"name":"backplace"}}],[11,"new","std::collections::vec_deque","Creates an empty `VecDeque`.",238,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",238,{"inputs":[{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",238,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",238,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap","","Swaps elements at indices `i` and `j`.",238,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without reallocating.",238,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `VecDeque`. Does nothing if the capacity is already sufficient.",238,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given `VecDeque`. The collection may reserve more space to avoid frequent reallocations.",238,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",238,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",238,null],[11,"iter","","Returns a front-to-back iterator.",238,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",238,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the `VecDeque`.",238,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the `VecDeque`.",238,null],[11,"len","","Returns the number of elements in the `VecDeque`.",238,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the buffer contains no elements",238,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","Create a draining iterator that removes the specified range in the `VecDeque` and yields the removed items.",238,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the buffer, removing all values.",238,null],[11,"contains","","Returns `true` if the `VecDeque` contains an element equal to the given value.",238,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"front","","Provides a reference to the front element, or `None` if the sequence is empty.",238,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the sequence is empty.",238,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the sequence is empty.",238,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the sequence is empty.",238,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is empty.",238,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push_front","","Inserts an element first in the sequence.",238,null],[11,"push_back","","Appends an element to the back of a buffer",238,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if it is empty.",238,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the last element.",238,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the first element.",238,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element at `index` within the `VecDeque`, shifting all elements with indices greater than or equal to `index` towards the back.",238,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`. Whichever end is closer to the removal point will be moved to make room, and all the affected elements will be moved to new positions. Returns `None` if `index` is out of bounds.",238,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"split_off","","Splits the collection into two at the given index.",238,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",238,null],[11,"retain","","Retains only the elements specified by the predicate.",238,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len, either by removing excess elements or by appending copies of a value to the back.",238,null],[11,"pop","std::collections::binary_heap","Removes the peeked value from the heap and returns it.",273,{"inputs":[{"name":"peekmut"}],"output":{"name":"t"}}],[11,"key","std::collections::btree_map","Gets a reference to the key in the entry.",275,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"remove_pair","","Deprecated, renamed to `remove_entry`",275,null],[11,"remove_entry","","Take ownership of the key and value from the map.",275,null],[11,"get","","Gets a reference to the value in the entry.",275,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",275,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",275,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the `OccupiedEntry`'s key, and returns the entry's old value.",275,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",275,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",106,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",106,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"v"}}],[11,"key","","Returns a reference to this entry's key.",106,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"key","","Gets a reference to the key that would be used when inserting a value through the VacantEntry.",274,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"into_key","","Take ownership of the key.",274,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"insert","","Sets the value of the entry with the `VacantEntry`'s key, and returns a mutable reference to it.",274,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"insert_next","std::collections::linked_list","Inserts the given element just after the element most recently returned by `.next()`. The inserted element does not appear in the iteration.",268,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",268,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"description","std::num","",184,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",183,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",182,{"inputs":[{"name":"self"}],"output":{"name":"str"}}]],"paths":[[8,"Any"],[4,"BorrowState"],[8,"Clone"],[8,"PartialEq"],[4,"Ordering"],[8,"Ord"],[8,"PartialOrd"],[8,"AsRef"],[8,"AsMut"],[8,"Into"],[8,"From"],[8,"TryInto"],[8,"TryFrom"],[8,"Default"],[8,"Hash"],[8,"Hasher"],[8,"BuildHasher"],[8,"ExactSizeIterator"],[8,"Step"],[8,"IntoIterator"],[8,"DoubleEndedIterator"],[8,"Product"],[8,"Sum"],[8,"Extend"],[8,"Iterator"],[8,"FromIterator"],[8,"Drop"],[8,"Add"],[8,"Sub"],[8,"Mul"],[8,"Div"],[8,"Rem"],[8,"Neg"],[8,"Not"],[8,"BitAnd"],[8,"BitOr"],[8,"BitXor"],[8,"Shl"],[8,"Shr"],[8,"AddAssign"],[8,"SubAssign"],[8,"MulAssign"],[8,"DivAssign"],[8,"RemAssign"],[8,"BitAndAssign"],[8,"BitOrAssign"],[8,"BitXorAssign"],[8,"ShlAssign"],[8,"ShrAssign"],[8,"Index"],[8,"IndexMut"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[8,"Deref"],[8,"DerefMut"],[8,"Fn"],[8,"FnMut"],[8,"FnOnce"],[8,"Place"],[8,"Placer"],[8,"InPlace"],[8,"Boxed"],[8,"BoxPlace"],[8,"Carrier"],[3,"TraitObject"],[4,"Result"],[4,"Option"],[8,"FnBox"],[8,"ToOwned"],[4,"Cow"],[8,"Borrow"],[8,"BorrowMut"],[8,"UpperExp"],[8,"Binary"],[8,"Display"],[8,"LowerExp"],[8,"Write"],[8,"UpperHex"],[8,"Debug"],[8,"Octal"],[8,"Pointer"],[8,"LowerHex"],[8,"SliceConcatExt"],[8,"SliceIndex"],[8,"FromStr"],[8,"Pattern"],[4,"SearchStep"],[8,"Searcher"],[8,"ReverseSearcher"],[8,"ToString"],[3,"File"],[3,"OpenOptions"],[4,"Metadata"],[4,"ErrorKind"],[3,"Error"],[8,"Read"],[8,"Write"],[3,"Stderr"],[3,"Stdin"],[3,"Stdout"],[8,"AsciiExt"],[3,"EscapeDefault"],[4,"Bound"],[4,"Entry"],[8,"RangeArgument"],[8,"Error"],[3,"Box"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"DecodeUtf16Error"],[3,"Error"],[3,"BorrowError"],[3,"BorrowMutError"],[3,"CharTryFromError"],[3,"CString"],[3,"CStr"],[3,"NulError"],[3,"FromBytesWithNulError"],[3,"IntoStringError"],[3,"Vec"],[3,"OsString"],[3,"OsStr"],[3,"String"],[8,"Zero"],[8,"One"],[4,"FpCategory"],[3,"Wrapping"],[4,"Prefix"],[4,"Component"],[3,"PrefixComponent"],[3,"Components"],[3,"Iter"],[3,"PathBuf"],[3,"Path"],[3,"StripPrefixError"],[3,"Display"],[3,"Duration"],[3,"Instant"],[3,"SystemTime"],[3,"SystemTimeError"],[3,"Rc"],[3,"Weak"],[3,"IntermediateBox"],[3,"ExchangeHeapSingleton"],[3,"ToLowercase"],[3,"ToUppercase"],[3,"SplitWhitespace"],[3,"DecodeUtf16"],[3,"Discriminant"],[3,"RangeFull"],[3,"Empty"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Scan"],[3,"FlatMap"],[3,"Inspect"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"CharPredicateSearcher"],[3,"BuildHasherDefault"],[3,"Arguments"],[3,"PhantomData"],[3,"Cell"],[3,"RefCell"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"ParseFloatError"],[3,"TryFromIntError"],[3,"ParseIntError"],[3,"TypeId"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EscapeDebug"],[3,"DecodeUtf8"],[3,"StepBy"],[3,"Repeat"],[3,"Once"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Enumerate"],[3,"Peekable"],[3,"Skip"],[3,"Take"],[3,"Fuse"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"StrSearcher"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"SipHasher13"],[3,"SipHasher24"],[3,"SipHasher"],[3,"Formatter"],[3,"Shared"],[3,"Unique"],[3,"BTreeMap"],[3,"LinkedList"],[3,"VecDeque"],[3,"BTreeSet"],[3,"BinaryHeap"],[3,"FrontPlace"],[3,"BackPlace"],[3,"PlaceBack"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"],[3,"Iter"],[3,"IntoIter"],[3,"IntoIter"],[3,"Drain"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Range"],[3,"RangeMut"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"EncodeUtf16"],[3,"Drain"],[3,"Drain"],[3,"PeekMut"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugMap"],[3,"DebugStruct"],[3,"DebugList"]]};
searchIndex["steed"] = {"doc":"","items":[[0,"any","steed","This module implements the `Any` trait, which enables dynamic typing of any `'static` type through runtime reflection.",null,null],[8,"Any","steed::any","A type to emulate dynamic typing.",null,null],[10,"get_type_id","","Gets the `TypeId` of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"typeid"}}],[3,"TypeId","","A `TypeId` represents a globally unique identifier for a type.",null,null],[0,"cell","steed","Shareable mutable containers.",null,null],[3,"Cell","steed::cell","A mutable memory location that admits only `Copy` data.",null,null],[3,"RefCell","","A mutable memory location with dynamically checked borrow rules",null,null],[4,"BorrowState","","An enumeration of values returned from the `state` method on a `RefCell<T>`.",null,null],[13,"Reading","","The cell is currently being read, there is at least one active `borrow`.",1,null],[13,"Writing","","The cell is currently being written to, there is an active `borrow_mut`.",1,null],[13,"Unused","","There are no outstanding borrows on this cell.",1,null],[3,"BorrowError","","An error returned by `RefCell::try_borrow`.",null,null],[3,"BorrowMutError","","An error returned by `RefCell::try_borrow_mut`.",null,null],[3,"Ref","","Wraps a borrowed reference to a value in a `RefCell` box. A wrapper type for an immutably borrowed value from a `RefCell<T>`.",null,null],[3,"RefMut","","A wrapper type for a mutably borrowed value from a `RefCell<T>`.",null,null],[3,"UnsafeCell","","The core primitive for interior mutability in Rust.",null,null],[0,"clone","steed","The `Clone` trait for types that cannot be 'implicitly copied'.",null,null],[8,"Clone","steed::clone","A common trait for the ability to explicitly duplicate an object.",null,null],[10,"clone","","Returns a copy of the value.",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","Performs copy-assignment from `source`.",2,null],[0,"cmp","steed","Functionality for ordering and comparison.",null,null],[8,"PartialEq","steed::cmp","Trait for equality comparisons which are partial equivalence relations.",null,null],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used by `==`.",3,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ne","","This method tests for `!=`.",3,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[8,"Eq","","Trait for equality comparisons which are equivalence relations.",null,null],[4,"Ordering","","An `Ordering` is the result of a comparison between two values.",null,null],[13,"Less","","An ordering where a compared value is less [than another].",4,null],[13,"Equal","","An ordering where a compared value is equal [to another].",4,null],[13,"Greater","","An ordering where a compared value is greater [than another].",4,null],[8,"Ord","","Trait for types that form a total order.",null,null],[10,"cmp","","This method returns an `Ordering` between `self` and `other`.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",null,null],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values if one exists.",6,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"option"}}],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `<` operator.",6,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator.",6,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `>` operator.",6,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator.",6,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[5,"min","","Compare and return the minimum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"max","","Compare and return the maximum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"convert","steed","Traits for conversions between types.",null,null],[8,"AsRef","steed::convert","A cheap, reference-to-reference conversion.",null,null],[10,"as_ref","","Performs the conversion.",7,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"AsMut","","A cheap, mutable reference-to-mutable reference conversion.",null,null],[10,"as_mut","","Performs the conversion.",8,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"Into","","A conversion that consumes `self`, which may or may not be expensive.",null,null],[10,"into","","Performs the conversion.",9,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"From","","Construct `Self` via a conversion.",null,null],[10,"from","","Performs the conversion.",10,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"TryInto","","An attempted conversion that consumes `self`, which may or may not be expensive.",null,null],[16,"Err","","The type returned in the event of a conversion error.",11,null],[10,"try_into","","Performs the conversion.",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"TryFrom","","Attempt to construct `Self` via a conversion.",null,null],[16,"Err","","The type returned in the event of a conversion error.",12,null],[10,"try_from","","Performs the conversion.",12,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[0,"default","steed","The `Default` trait for types which may have meaningful default values.",null,null],[8,"Default","steed::default","A trait for giving a type a useful default value.",null,null],[10,"default","","Returns the \"default value\" for a type.",13,{"inputs":[],"output":{"name":"self"}}],[0,"hash","steed","Generic hashing support.",null,null],[8,"Hash","steed::hash","A hashable type.",null,null],[10,"hash","","Feeds this value into the state given, updating the hasher as necessary.",14,null],[11,"hash_slice","","Feeds a slice of this type into the state provided.",14,null],[8,"Hasher","","A trait which represents the ability to hash an arbitrary stream of bytes.",null,null],[10,"finish","","Completes a round of hashing, producing the output hash generated.",15,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"write","","Writes some data into this `Hasher`.",15,null],[11,"write_u8","","Write a single `u8` into this hasher.",15,null],[11,"write_u16","","Writes a single `u16` into this hasher.",15,null],[11,"write_u32","","Writes a single `u32` into this hasher.",15,null],[11,"write_u64","","Writes a single `u64` into this hasher.",15,null],[11,"write_u128","","Writes a single `u128` into this hasher.",15,null],[11,"write_usize","","Writes a single `usize` into this hasher.",15,null],[11,"write_i8","","Writes a single `i8` into this hasher.",15,null],[11,"write_i16","","Writes a single `i16` into this hasher.",15,null],[11,"write_i32","","Writes a single `i32` into this hasher.",15,null],[11,"write_i64","","Writes a single `i64` into this hasher.",15,null],[11,"write_i128","","Writes a single `i128` into this hasher.",15,null],[11,"write_isize","","Writes a single `isize` into this hasher.",15,null],[8,"BuildHasher","","A `BuildHasher` is typically used as a factory for instances of `Hasher` which a `HashMap` can then use to hash keys independently.",null,null],[16,"Hasher","","Type of the hasher that will be created.",16,null],[10,"build_hasher","","Creates a new hasher.",16,null],[3,"BuildHasherDefault","","The `BuildHasherDefault` structure is used in scenarios where one has a type that implements [`Hasher`] and [`Default`], but needs that type to implement [`BuildHasher`].",null,null],[3,"SipHasher13","","An implementation of SipHash 1-3.",null,null],[3,"SipHasher","","An implementation of SipHash 2-4.",null,null],[3,"SipHasher24","","An implementation of SipHash 2-4.",null,null],[0,"intrinsics","steed","rustc compiler intrinsics.",null,null],[5,"atomic_cxchg","steed::intrinsics","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::SeqCst` as both the `success` and `failure` parameters. For example, `AtomicBool::compare_exchange`.",null,null],[5,"atomic_cxchg_acq","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::Acquire` as both the `success` and `failure` parameters. For example, `AtomicBool::compare_exchange`.",null,null],[5,"atomic_cxchg_rel","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::Release` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, `AtomicBool::compare_exchange`.",null,null],[5,"atomic_cxchg_acqrel","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::AcqRel` as the `success` and `Ordering::Acquire` as the `failure` parameters. For example, `AtomicBool::compare_exchange`.",null,null],[5,"atomic_cxchg_relaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::Relaxed` as both the `success` and `failure` parameters. For example, `AtomicBool::compare_exchange`.",null,null],[5,"atomic_cxchg_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::SeqCst` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, `AtomicBool::compare_exchange`.",null,null],[5,"atomic_cxchg_failacq","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::SeqCst` as the `success` and `Ordering::Acquire` as the `failure` parameters. For example, `AtomicBool::compare_exchange`.",null,null],[5,"atomic_cxchg_acq_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::Acquire` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, `AtomicBool::compare_exchange`.",null,null],[5,"atomic_cxchg_acqrel_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::AcqRel` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, `AtomicBool::compare_exchange`.",null,null],[5,"atomic_cxchgweak","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::SeqCst` as both the `success` and `failure` parameters. For example, `AtomicBool::compare_exchange_weak`.",null,null],[5,"atomic_cxchgweak_acq","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::Acquire` as both the `success` and `failure` parameters. For example, `AtomicBool::compare_exchange_weak`.",null,null],[5,"atomic_cxchgweak_rel","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::Release` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, `AtomicBool::compare_exchange_weak`.",null,null],[5,"atomic_cxchgweak_acqrel","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::AcqRel` as the `success` and `Ordering::Acquire` as the `failure` parameters. For example, `AtomicBool::compare_exchange_weak`.",null,null],[5,"atomic_cxchgweak_relaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::Relaxed` as both the `success` and `failure` parameters. For example, `AtomicBool::compare_exchange_weak`.",null,null],[5,"atomic_cxchgweak_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::SeqCst` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, `AtomicBool::compare_exchange_weak`.",null,null],[5,"atomic_cxchgweak_failacq","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::SeqCst` as the `success` and `Ordering::Acquire` as the `failure` parameters. For example, `AtomicBool::compare_exchange_weak`.",null,null],[5,"atomic_cxchgweak_acq_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::Acquire` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, `AtomicBool::compare_exchange_weak`.",null,null],[5,"atomic_cxchgweak_acqrel_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::AcqRel` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, `AtomicBool::compare_exchange_weak`.",null,null],[5,"atomic_load","","Loads the current value of the pointer. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `load` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::load`.",null,null],[5,"atomic_load_acq","","Loads the current value of the pointer. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `load` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::load`.",null,null],[5,"atomic_load_relaxed","","Loads the current value of the pointer. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `load` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::load`.",null,null],[5,"atomic_load_unordered","","",null,null],[5,"atomic_store","","Stores the value at the specified memory location. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `store` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::store`.",null,null],[5,"atomic_store_rel","","Stores the value at the specified memory location. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `store` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::store`.",null,null],[5,"atomic_store_relaxed","","Stores the value at the specified memory location. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `store` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::store`.",null,null],[5,"atomic_store_unordered","","",null,null],[5,"atomic_xchg","","Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `swap` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::swap`.",null,null],[5,"atomic_xchg_acq","","Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `swap` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::swap`.",null,null],[5,"atomic_xchg_rel","","Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `swap` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::swap`.",null,null],[5,"atomic_xchg_acqrel","","Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `swap` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicBool::swap`.",null,null],[5,"atomic_xchg_relaxed","","Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `swap` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::swap`.",null,null],[5,"atomic_xadd","","Add to the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_add` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicIsize::fetch_add`.",null,null],[5,"atomic_xadd_acq","","Add to the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_add` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicIsize::fetch_add`.",null,null],[5,"atomic_xadd_rel","","Add to the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_add` method by passing `Ordering::Release` as the `order`. For example, `AtomicIsize::fetch_add`.",null,null],[5,"atomic_xadd_acqrel","","Add to the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_add` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicIsize::fetch_add`.",null,null],[5,"atomic_xadd_relaxed","","Add to the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_add` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicIsize::fetch_add`.",null,null],[5,"atomic_xsub","","Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_sub` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicIsize::fetch_sub`.",null,null],[5,"atomic_xsub_acq","","Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_sub` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicIsize::fetch_sub`.",null,null],[5,"atomic_xsub_rel","","Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_sub` method by passing `Ordering::Release` as the `order`. For example, `AtomicIsize::fetch_sub`.",null,null],[5,"atomic_xsub_acqrel","","Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_sub` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicIsize::fetch_sub`.",null,null],[5,"atomic_xsub_relaxed","","Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_sub` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicIsize::fetch_sub`.",null,null],[5,"atomic_and","","Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_and` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::fetch_and`.",null,null],[5,"atomic_and_acq","","Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_and` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::fetch_and`.",null,null],[5,"atomic_and_rel","","Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_and` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::fetch_and`.",null,null],[5,"atomic_and_acqrel","","Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_and` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicBool::fetch_and`.",null,null],[5,"atomic_and_relaxed","","Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_and` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::fetch_and`.",null,null],[5,"atomic_nand","","Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::fetch_nand`.",null,null],[5,"atomic_nand_acq","","Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::fetch_nand`.",null,null],[5,"atomic_nand_rel","","Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::fetch_nand`.",null,null],[5,"atomic_nand_acqrel","","Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicBool::fetch_nand`.",null,null],[5,"atomic_nand_relaxed","","Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::fetch_nand`.",null,null],[5,"atomic_or","","Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_or` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::fetch_or`.",null,null],[5,"atomic_or_acq","","Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_or` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::fetch_or`.",null,null],[5,"atomic_or_rel","","Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_or` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::fetch_or`.",null,null],[5,"atomic_or_acqrel","","Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_or` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicBool::fetch_or`.",null,null],[5,"atomic_or_relaxed","","Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_or` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::fetch_or`.",null,null],[5,"atomic_xor","","Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_xor` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::fetch_xor`.",null,null],[5,"atomic_xor_acq","","Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_xor` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::fetch_xor`.",null,null],[5,"atomic_xor_rel","","Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_xor` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::fetch_xor`.",null,null],[5,"atomic_xor_acqrel","","Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_xor` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicBool::fetch_xor`.",null,null],[5,"atomic_xor_relaxed","","Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_xor` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::fetch_xor`.",null,null],[5,"atomic_max","","",null,null],[5,"atomic_max_acq","","",null,null],[5,"atomic_max_rel","","",null,null],[5,"atomic_max_acqrel","","",null,null],[5,"atomic_max_relaxed","","",null,null],[5,"atomic_min","","",null,null],[5,"atomic_min_acq","","",null,null],[5,"atomic_min_rel","","",null,null],[5,"atomic_min_acqrel","","",null,null],[5,"atomic_min_relaxed","","",null,null],[5,"atomic_umin","","",null,null],[5,"atomic_umin_acq","","",null,null],[5,"atomic_umin_rel","","",null,null],[5,"atomic_umin_acqrel","","",null,null],[5,"atomic_umin_relaxed","","",null,null],[5,"atomic_umax","","",null,null],[5,"atomic_umax_acq","","",null,null],[5,"atomic_umax_rel","","",null,null],[5,"atomic_umax_acqrel","","",null,null],[5,"atomic_umax_relaxed","","",null,null],[5,"atomic_fence","","",null,null],[5,"atomic_fence_acq","","",null,null],[5,"atomic_fence_rel","","",null,null],[5,"atomic_fence_acqrel","","",null,null],[5,"atomic_singlethreadfence","","A compiler-only memory barrier.",null,null],[5,"atomic_singlethreadfence_acq","","",null,null],[5,"atomic_singlethreadfence_rel","","",null,null],[5,"atomic_singlethreadfence_acqrel","","",null,null],[5,"rustc_peek","","Magic intrinsic that derives its meaning from attributes attached to the function.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abort","","Aborts the execution of the process.",null,null],[5,"unreachable","","Tells LLVM that this point in the code is not reachable, enabling further optimizations.",null,null],[5,"assume","","Informs the optimizer that a condition is always true. If the condition is false, the behavior is undefined.",null,null],[5,"likely","","Hints to the compiler that branch condition is likely to be true. Returns the value passed to it.",null,{"inputs":[{"name":"bool"}],"output":{"name":"bool"}}],[5,"unlikely","","Hints to the compiler that branch condition is likely to be false. Returns the value passed to it.",null,{"inputs":[{"name":"bool"}],"output":{"name":"bool"}}],[5,"breakpoint","","Executes a breakpoint trap, for inspection by a debugger.",null,null],[5,"size_of","","The size of a type in bytes.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"move_val_init","","Moves a value to an uninitialized memory location.",null,null],[5,"min_align_of","","",null,{"inputs":[],"output":{"name":"usize"}}],[5,"pref_align_of","","",null,{"inputs":[],"output":{"name":"usize"}}],[5,"size_of_val","","",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"min_align_of_val","","",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"drop_in_place","","Executes the destructor (if any) of the pointed-to value.",null,null],[5,"type_name","","Gets a static string slice containing the name of a type.",null,{"inputs":[],"output":{"name":"str"}}],[5,"type_id","","Gets an identifier which is globally unique to the specified type. This function will return the same value for a type regardless of whichever crate it is invoked in.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"init","","Creates a value initialized to zero.",null,{"inputs":[],"output":{"name":"t"}}],[5,"uninit","","Creates an uninitialized value.",null,{"inputs":[],"output":{"name":"t"}}],[5,"forget","","Moves a value out of scope without running drop glue.",null,null],[5,"transmute","","Reinterprets the bits of a value of one type as another type.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[5,"needs_drop","","Returns `true` if the actual type given as `T` requires drop glue; returns `false` if the actual type provided for `T` implements `Copy`.",null,{"inputs":[],"output":{"name":"bool"}}],[5,"offset","","Calculates the offset from a pointer.",null,null],[5,"arith_offset","","Calculates the offset from a pointer, potentially wrapping.",null,null],[5,"copy_nonoverlapping","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source and destination may *not* overlap.",null,null],[5,"copy","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source and destination may overlap.",null,null],[5,"write_bytes","","Invokes memset on the specified pointer, setting `count * size_of::<T>()` bytes of memory starting at `dst` to `val`.",null,null],[5,"volatile_copy_nonoverlapping_memory","","Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*` intrinsic, with a size of `count` * `size_of::<T>()` and an alignment of `min_align_of::<T>()`",null,null],[5,"volatile_copy_memory","","Equivalent to the appropriate `llvm.memmove.p0i8.0i8.*` intrinsic, with a size of `count` * `size_of::<T>()` and an alignment of `min_align_of::<T>()`",null,null],[5,"volatile_set_memory","","Equivalent to the appropriate `llvm.memset.p0i8.*` intrinsic, with a size of `count` * `size_of::<T>()` and an alignment of `min_align_of::<T>()`.",null,null],[5,"volatile_load","","Perform a volatile load from the `src` pointer. The stabilized version of this intrinsic is `std::ptr::read_volatile`.",null,null],[5,"volatile_store","","Perform a volatile store to the `dst` pointer. The stabilized version of this intrinsic is `std::ptr::write_volatile`.",null,null],[5,"sqrtf32","","Returns the square root of an `f32`",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"sqrtf64","","Returns the square root of an `f64`",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"powif32","","Raises an `f32` to an integer power.",null,{"inputs":[{"name":"f32"},{"name":"i32"}],"output":{"name":"f32"}}],[5,"powif64","","Raises an `f64` to an integer power.",null,{"inputs":[{"name":"f64"},{"name":"i32"}],"output":{"name":"f64"}}],[5,"sinf32","","Returns the sine of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"sinf64","","Returns the sine of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"cosf32","","Returns the cosine of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"cosf64","","Returns the cosine of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"powf32","","Raises an `f32` to an `f32` power.",null,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"powf64","","Raises an `f64` to an `f64` power.",null,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"expf32","","Returns the exponential of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"expf64","","Returns the exponential of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"exp2f32","","Returns 2 raised to the power of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"exp2f64","","Returns 2 raised to the power of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"logf32","","Returns the natural logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"logf64","","Returns the natural logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"log10f32","","Returns the base 10 logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"log10f64","","Returns the base 10 logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"log2f32","","Returns the base 2 logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"log2f64","","Returns the base 2 logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"fmaf32","","Returns `a * b + c` for `f32` values.",null,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"fmaf64","","Returns `a * b + c` for `f64` values.",null,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"fabsf32","","Returns the absolute value of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"fabsf64","","Returns the absolute value of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"copysignf32","","Copies the sign from `y` to `x` for `f32` values.",null,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"copysignf64","","Copies the sign from `y` to `x` for `f64` values.",null,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"floorf32","","Returns the largest integer less than or equal to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"floorf64","","Returns the largest integer less than or equal to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"ceilf32","","Returns the smallest integer greater than or equal to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"ceilf64","","Returns the smallest integer greater than or equal to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"truncf32","","Returns the integer part of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"truncf64","","Returns the integer part of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"rintf32","","Returns the nearest integer to an `f32`. May raise an inexact floating-point exception if the argument is not an integer.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"rintf64","","Returns the nearest integer to an `f64`. May raise an inexact floating-point exception if the argument is not an integer.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"nearbyintf32","","Returns the nearest integer to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"nearbyintf64","","Returns the nearest integer to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"roundf32","","Returns the nearest integer to an `f32`. Rounds half-way cases away from zero.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"roundf64","","Returns the nearest integer to an `f64`. Rounds half-way cases away from zero.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"fadd_fast","","Float addition that allows optimizations based on algebraic rules. May assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"fsub_fast","","Float subtraction that allows optimizations based on algebraic rules. May assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"fmul_fast","","Float multiplication that allows optimizations based on algebraic rules. May assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"fdiv_fast","","Float division that allows optimizations based on algebraic rules. May assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"frem_fast","","Float remainder that allows optimizations based on algebraic rules. May assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"ctpop","","Returns the number of bits set in an integer type `T`",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"ctlz","","Returns the number of leading unset bits (zeroes) in an integer type `T`.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"cttz","","Returns the number of trailing unset bits (zeroes) in an integer type `T`.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"bswap","","Reverses the bytes in an integer type `T`.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"add_with_overflow","","Performs checked integer addition. The stabilized versions of this intrinsic are available on the integer primitives via the `overflowing_add` method. For example, `std::u32::overflowing_add`",null,null],[5,"sub_with_overflow","","Performs checked integer subtraction The stabilized versions of this intrinsic are available on the integer primitives via the `overflowing_sub` method. For example, `std::u32::overflowing_sub`",null,null],[5,"mul_with_overflow","","Performs checked integer multiplication The stabilized versions of this intrinsic are available on the integer primitives via the `overflowing_mul` method. For example, `std::u32::overflowing_mul`",null,null],[5,"unchecked_div","","Performs an unchecked division, resulting in undefined behavior where y = 0 or x = `T::min_value()` and y = -1",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"unchecked_rem","","Returns the remainder of an unchecked division, resulting in undefined behavior where y = 0 or x = `T::min_value()` and y = -1",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_add","","Returns (a + b) mod 2^N, where N is the width of T in bits. The stabilized versions of this intrinsic are available on the integer primitives via the `wrapping_add` method. For example, `std::u32::wrapping_add`",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_sub","","Returns (a - b) mod 2^N, where N is the width of T in bits. The stabilized versions of this intrinsic are available on the integer primitives via the `wrapping_sub` method. For example, `std::u32::wrapping_sub`",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_mul","","Returns (a * b) mod 2^N, where N is the width of T in bits. The stabilized versions of this intrinsic are available on the integer primitives via the `wrapping_mul` method. For example, `std::u32::wrapping_mul`",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"discriminant_value","","Returns the value of the discriminant for the variant in 'v', cast to a `u64`; if `T` has no discriminant, returns 0.",null,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[5,"try","","Rust's \"try catch\" construct which invokes the function pointer `f` with the data pointer `data`.",null,null],[0,"iter","steed","Composable external iteration.",null,null],[3,"Rev","steed::iter","An double-ended iterator with the direction inverted.",null,null],[3,"Cloned","","An iterator that clones the elements of an underlying iterator.",null,null],[3,"Cycle","","An iterator that repeats endlessly.",null,null],[3,"Chain","","An iterator that strings two iterators together.",null,null],[3,"Zip","","An iterator that iterates two other iterators simultaneously.",null,null],[3,"Map","","An iterator that maps the values of `iter` with `f`.",null,null],[3,"Filter","","An iterator that filters the elements of `iter` with `predicate`.",null,null],[3,"FilterMap","","An iterator that uses `f` to both filter and map elements from `iter`.",null,null],[3,"Enumerate","","An iterator that yields the current count and the element during iteration.",null,null],[3,"Peekable","","An iterator with a `peek()` that returns an optional reference to the next element.",null,null],[3,"SkipWhile","","An iterator that rejects elements while `predicate` is true.",null,null],[3,"TakeWhile","","An iterator that only accepts elements while `predicate` is true.",null,null],[3,"Skip","","An iterator that skips over `n` elements of `iter`.",null,null],[3,"Take","","An iterator that only iterates over the first `n` iterations of `iter`.",null,null],[3,"Scan","","An iterator to maintain state while iterating another iterator.",null,null],[3,"FlatMap","","An iterator that maps each element to an iterator, and yields the elements of the produced iterators.",null,null],[3,"Fuse","","An iterator that yields `None` forever after the underlying iterator yields `None` once.",null,null],[3,"Inspect","","An iterator that calls a function with a reference to each element before yielding it.",null,null],[5,"repeat","","Creates a new iterator that endlessly repeats a single element.",null,{"inputs":[{"name":"t"}],"output":{"name":"repeat"}}],[3,"Once","","An iterator that yields an element exactly once.",null,null],[3,"Repeat","","An iterator that repeats an element endlessly.",null,null],[8,"FusedIterator","","An iterator that always continues to yield `None` when exhausted.",null,null],[8,"Step","","Objects that can be stepped over in both directions.",null,null],[10,"step","","Steps `self` if possible.",17,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[10,"steps_between","","Returns the number of steps between two step objects. The count is inclusive of `start` and exclusive of `end`.",17,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[10,"steps_between_by_one","","Same as `steps_between`, but with a `by` of 1",17,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[10,"is_negative","","Tests whether this step is negative or not (going backwards)",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"replace_one","","Replaces this step with `1`, returning itself",17,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"replace_zero","","Replaces this step with `0`, returning itself",17,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"add_one","","Adds one to this step, returning the result",17,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sub_one","","Subtracts one to this step, returning the result",17,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[3,"Empty","","An iterator that yields nothing.",null,null],[8,"ExactSizeIterator","","An iterator that knows its exact length.",null,null],[11,"len","","Returns the exact number of times the iterator will iterate.",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the iterator is empty.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[5,"once","","Creates an iterator that yields an element exactly once.",null,{"inputs":[{"name":"t"}],"output":{"name":"once"}}],[8,"Iterator","","An interface for dealing with iterators.",null,null],[16,"Item","","The type of the elements being iterated over.",19,null],[10,"next","","Advances the iterator and returns the next value.",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",19,null],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","Consumes the iterator, returning the last element.",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","Returns the `n`th element of the iterator.",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",19,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"chain"}}],[11,"zip","","'Zips up' two iterators into a single iterator of pairs.",19,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"zip"}}],[11,"map","","Takes a closure and creates an iterator which calls that closure on each element.",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"filter","","Creates an iterator which uses a closure to determine if an element should be yielded.",19,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"filter"}}],[11,"filter_map","","Creates an iterator that both filters and maps.",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as the next value.",19,{"inputs":[{"name":"self"}],"output":{"name":"enumerate"}}],[11,"peekable","","Creates an iterator which can use `peek` to look at the next element of the iterator without consuming it.",19,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"skip_while","","Creates an iterator that [`skip()`]s elements based on a predicate.",19,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",19,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"skip","","Creates an iterator that skips the first `n` elements.",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"take","","Creates an iterator that yields its first `n` elements.",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"take"}}],[11,"scan","","An iterator adaptor similar to [`fold()`] that holds internal state and produces a new iterator.",19,{"inputs":[{"name":"self"},{"name":"st"},{"name":"f"}],"output":{"name":"scan"}}],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"flatmap"}}],[11,"fuse","","Creates an iterator which ends after the first [`None`].",19,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with each element of an iterator, passing the value on.",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"by_ref","","Borrows an iterator, rather than consuming it.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"collect","","Transforms an iterator into a collection.",19,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"partition","","Consumes an iterator, creating two collections from it.",19,null],[11,"fold","","An iterator adaptor that applies a function, producing a single, final value.",19,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"all","","Tests if every element of the iterator matches a predicate.",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","Tests if any element of the iterator matches a predicate.",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",19,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"position","","Searches for an element in an iterator, returning its index.",19,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"rposition","","Searches for an element in an iterator from the right, returning its index.",19,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"max","","Returns the maximum element of an iterator.",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"min","","Returns the minimum element of an iterator.",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"max_by_key","","Returns the element that gives the maximum value from the specified function.",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"max_by","","Returns the element that gives the maximum value with respect to the specified comparison function.",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by_key","","Returns the element that gives the minimum value from the specified function.",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by","","Returns the element that gives the minimum value with respect to the specified comparison function.",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"rev","","Reverses an iterator's direction.",19,{"inputs":[{"name":"self"}],"output":{"name":"rev"}}],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",19,null],[11,"cloned","","Creates an iterator which [`clone()`]s all of its elements.",19,{"inputs":[{"name":"self"}],"output":{"name":"cloned"}}],[11,"cycle","","Repeats an iterator endlessly.",19,{"inputs":[{"name":"self"}],"output":{"name":"cycle"}}],[11,"sum","","Sums the elements of an iterator.",19,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"product","","Iterates over the entire iterator, multiplying all the elements",19,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those of another.",19,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those of another.",19,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of another.",19,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of another.",19,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically less than those of another.",19,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"le","","Determines if the elements of this `Iterator` are lexicographically less or equal to those of another.",19,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically greater than those of another.",19,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically greater than or equal to those of another.",19,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[8,"IntoIterator","","Conversion into an `Iterator`.",null,null],[16,"Item","","The type of the elements being iterated over.",20,null],[16,"IntoIter","","Which kind of iterator are we turning this into?",20,null],[10,"into_iter","","Creates an iterator from a value.",20,null],[8,"DoubleEndedIterator","","An iterator able to yield elements from both ends.",null,null],[10,"next_back","","Removes and returns an element from the end of the iterator.",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[3,"StepBy","","An adapter for stepping range iterators by a custom amount.",null,null],[8,"Product","","Trait to represent types that can be created by multiplying elements of an iterator.",null,null],[10,"product","","Method which takes an iterator and generates `Self` from the elements by multiplying the items.",22,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[5,"empty","","Creates an iterator that yields nothing.",null,{"inputs":[],"output":{"name":"empty"}}],[8,"Extend","","Extend a collection with the contents of an iterator.",null,null],[10,"extend","","Extends a collection with the contents of an iterator.",23,null],[8,"Sum","","Trait to represent types that can be created by summing up an iterator.",null,null],[10,"sum","","Method which takes an iterator and generates `Self` from the elements by \"summing up\" the items.",24,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[8,"TrustedLen","","An iterator that reports an accurate length using size_hint.",null,null],[8,"FromIterator","","Conversion from an `Iterator`.",null,null],[10,"from_iter","","Creates a value from an iterator.",25,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"marker","steed","Primitive traits and types representing basic properties of types.",null,null],[8,"Send","steed::marker","Types that can be transferred across thread boundaries.",null,null],[8,"Sized","","Types with a constant size known at compile time.",null,null],[8,"Unsize","","Types that can be \"unsized\" to a dynamically-sized type.",null,null],[8,"Copy","","Types whose values can be duplicated simply by copying bits.",null,null],[8,"Sync","","Types for which it is safe to share references between threads.",null,null],[3,"PhantomData","","Zero-sized type used to mark things that \"act like\" they own a `T`.",null,null],[8,"Reflect","","Types that can be reflected over.",null,null],[0,"mem","steed","Basic functions for dealing with memory.",null,null],[5,"forget","steed::mem","Leaks a value: takes ownership and \"forgets\" about the value **without running its destructor**.",null,null],[5,"size_of","","Returns the size of a type in bytes.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"size_of_val","","Returns the size of the pointed-to value in bytes.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"min_align_of","","Returns the [ABI]-required minimum alignment of a type.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"min_align_of_val","","Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"align_of","","Returns the [ABI]-required minimum alignment of a type.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"align_of_val","","Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"zeroed","","Creates a value whose bytes are all zero.",null,{"inputs":[],"output":{"name":"t"}}],[5,"uninitialized","","Bypasses Rust's normal memory-initialization checks by pretending to produce a value of type `T`, while doing nothing at all.",null,{"inputs":[],"output":{"name":"t"}}],[5,"swap","","Swaps the values at two mutable locations, without deinitializing either one.",null,null],[5,"replace","","Replaces the value at a mutable location with a new one, returning the old value, without deinitializing either one.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"drop","","Disposes of a value.",null,null],[5,"transmute_copy","","Interprets `src` as having type `&U`, and then reads `src` without moving the contained value.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[3,"Discriminant","","Opaque type representing the discriminant of an enum.",null,null],[5,"discriminant","","Returns a value uniquely identifying the enum variant in `v`.",null,{"inputs":[{"name":"t"}],"output":{"name":"discriminant"}}],[5,"transmute","","Reinterprets the bits of a value of one type as another type.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[0,"ops","steed","Overloadable operators.",null,null],[8,"Drop","steed::ops","The `Drop` trait is used to run some code when a value goes out of scope. This is sometimes called a 'destructor'.",null,null],[10,"drop","","A method called when the value goes out of scope.",26,null],[8,"Add","","The `Add` trait is used to specify the functionality of `+`.",null,null],[16,"Output","","The resulting type after applying the `+` operator",27,null],[10,"add","","The method for the `+` operator",27,null],[8,"Sub","","The `Sub` trait is used to specify the functionality of `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator",28,null],[10,"sub","","The method for the `-` operator",28,null],[8,"Mul","","The `Mul` trait is used to specify the functionality of `*`.",null,null],[16,"Output","","The resulting type after applying the `*` operator",29,null],[10,"mul","","The method for the `*` operator",29,null],[8,"Div","","The `Div` trait is used to specify the functionality of `/`.",null,null],[16,"Output","","The resulting type after applying the `/` operator",30,null],[10,"div","","The method for the `/` operator",30,null],[8,"Rem","","The `Rem` trait is used to specify the functionality of `%`.",null,null],[16,"Output","","The resulting type after applying the `%` operator",31,null],[10,"rem","","The method for the `%` operator",31,null],[8,"Neg","","The `Neg` trait is used to specify the functionality of unary `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator",32,null],[10,"neg","","The method for the unary `-` operator",32,null],[8,"Not","","The `Not` trait is used to specify the functionality of unary `!`.",null,null],[16,"Output","","The resulting type after applying the `!` operator",33,null],[10,"not","","The method for the unary `!` operator",33,null],[8,"BitAnd","","The `BitAnd` trait is used to specify the functionality of `&`.",null,null],[16,"Output","","The resulting type after applying the `&` operator",34,null],[10,"bitand","","The method for the `&` operator",34,null],[8,"BitOr","","The `BitOr` trait is used to specify the functionality of `|`.",null,null],[16,"Output","","The resulting type after applying the `|` operator",35,null],[10,"bitor","","The method for the `|` operator",35,null],[8,"BitXor","","The `BitXor` trait is used to specify the functionality of `^`.",null,null],[16,"Output","","The resulting type after applying the `^` operator",36,null],[10,"bitxor","","The method for the `^` operator",36,null],[8,"Shl","","The `Shl` trait is used to specify the functionality of `<<`.",null,null],[16,"Output","","The resulting type after applying the `<<` operator",37,null],[10,"shl","","The method for the `<<` operator",37,null],[8,"Shr","","The `Shr` trait is used to specify the functionality of `>>`.",null,null],[16,"Output","","The resulting type after applying the `>>` operator",38,null],[10,"shr","","The method for the `>>` operator",38,null],[8,"AddAssign","","The `AddAssign` trait is used to specify the functionality of `+=`.",null,null],[10,"add_assign","","The method for the `+=` operator",39,null],[8,"SubAssign","","The `SubAssign` trait is used to specify the functionality of `-=`.",null,null],[10,"sub_assign","","The method for the `-=` operator",40,null],[8,"MulAssign","","The `MulAssign` trait is used to specify the functionality of `*=`.",null,null],[10,"mul_assign","","The method for the `*=` operator",41,null],[8,"DivAssign","","The `DivAssign` trait is used to specify the functionality of `/=`.",null,null],[10,"div_assign","","The method for the `/=` operator",42,null],[8,"RemAssign","","The `RemAssign` trait is used to specify the functionality of `%=`.",null,null],[10,"rem_assign","","The method for the `%=` operator",43,null],[8,"BitAndAssign","","The `BitAndAssign` trait is used to specify the functionality of `&=`.",null,null],[10,"bitand_assign","","The method for the `&=` operator",44,null],[8,"BitOrAssign","","The `BitOrAssign` trait is used to specify the functionality of `|=`.",null,null],[10,"bitor_assign","","The method for the `|=` operator",45,null],[8,"BitXorAssign","","The `BitXorAssign` trait is used to specify the functionality of `^=`.",null,null],[10,"bitxor_assign","","The method for the `^=` operator",46,null],[8,"ShlAssign","","The `ShlAssign` trait is used to specify the functionality of `<<=`.",null,null],[10,"shl_assign","","The method for the `<<=` operator",47,null],[8,"ShrAssign","","The `ShrAssign` trait is used to specify the functionality of `>>=`.",null,null],[10,"shr_assign","","The method for the `>>=` operator",48,null],[8,"Index","","The `Index` trait is used to specify the functionality of indexing operations like `container[index]` when used in an immutable context.",null,null],[16,"Output","","The returned type after indexing",49,null],[10,"index","","The method for the indexing (`container[index]`) operation",49,null],[8,"IndexMut","","The `IndexMut` trait is used to specify the functionality of indexing operations like `container[index]` when used in a mutable context.",null,null],[10,"index_mut","","The method for the mutable indexing (`container[index]`) operation",50,null],[3,"RangeFull","","An unbounded range. Use `..` (two dots) for its shorthand.",null,null],[3,"Range","","A (half-open) range which is bounded at both ends: { x | start <= x < end }. Use `start..end` (two dots) for its shorthand.",null,null],[12,"start","","The lower bound of the range (inclusive).",51,null],[12,"end","","The upper bound of the range (exclusive).",51,null],[3,"RangeFrom","","A range which is only bounded below: { x | start <= x }. Use `start..` for its shorthand.",null,null],[12,"start","","The lower bound of the range (inclusive).",52,null],[3,"RangeTo","","A range which is only bounded above: { x | x < end }. Use `..end` (two dots) for its shorthand.",null,null],[12,"end","","The upper bound of the range (exclusive).",53,null],[4,"RangeInclusive","","An inclusive range which is bounded at both ends: { x | start <= x <= end }. Use `start...end` (three dots) for its shorthand.",null,null],[13,"Empty","","Empty range (iteration has finished)",54,null],[12,"at","steed::ops::RangeInclusive","The point at which iteration finished",54,null],[13,"NonEmpty","steed::ops","Non-empty range (iteration will yield value(s))",54,null],[12,"start","steed::ops::RangeInclusive","The lower bound of the range (inclusive).",54,null],[12,"end","","The upper bound of the range (inclusive).",54,null],[3,"RangeToInclusive","steed::ops","An inclusive range which is only bounded above: { x | x <= end }. Use `...end` (three dots) for its shorthand.",null,null],[12,"end","","The upper bound of the range (inclusive)",55,null],[8,"Deref","","The `Deref` trait is used to specify the functionality of dereferencing operations, like `*v`.",null,null],[16,"Target","","The resulting type after dereferencing",56,null],[10,"deref","","The method called to dereference a value",56,null],[8,"DerefMut","","The `DerefMut` trait is used to specify the functionality of dereferencing mutably like `*v = 1;`",null,null],[10,"deref_mut","","The method called to mutably dereference a value",57,null],[8,"Fn","","A version of the call operator that takes an immutable receiver.",null,null],[10,"call","","This is called when the call operator is used.",58,null],[8,"FnMut","","A version of the call operator that takes a mutable receiver.",null,null],[10,"call_mut","","This is called when the call operator is used.",59,null],[8,"FnOnce","","A version of the call operator that takes a by-value receiver.",null,null],[16,"Output","","The returned type after the call operator is used.",60,null],[10,"call_once","","This is called when the call operator is used.",60,null],[8,"CoerceUnsized","","Trait that indicates that this is a pointer or a wrapper for one, where unsizing can be performed on the pointee.",null,null],[8,"Place","","Both `in (PLACE) EXPR` and `box EXPR` desugar into expressions that allocate an intermediate \"place\" that holds uninitialized state.  The desugaring evaluates EXPR, and writes the result at the address returned by the `pointer` method of this trait.",null,null],[10,"pointer","","Returns the address where the input value will be written. Note that the data at this address is generally uninitialized, and thus one should use `ptr::write` for initializing it.",61,null],[8,"Placer","","Interface to implementations of  `in (PLACE) EXPR`.",null,null],[16,"Place","","`Place` is the intermedate agent guarding the uninitialized state for `Data`.",62,null],[10,"make_place","","Creates a fresh place from `self`.",62,null],[8,"InPlace","","Specialization of `Place` trait supporting `in (PLACE) EXPR`.",null,null],[16,"Owner","","`Owner` is the type of the end value of `in (PLACE) EXPR`",63,null],[10,"finalize","","Converts self into the final value, shifting deallocation/cleanup responsibilities (if any remain), over to the returned instance of `Owner` and forgetting self.",63,null],[8,"Boxed","","Core trait for the `box EXPR` form.",null,null],[16,"Data","","The kind of data that is stored in this kind of box.",64,null],[16,"Place","","The place that will negotiate the storage of the data.",64,null],[10,"finalize","","Converts filled place into final owning value, shifting deallocation/cleanup responsibilities (if any remain), over to returned instance of `Self` and forgetting `filled`.",64,null],[8,"BoxPlace","","Specialization of `Place` trait supporting `box EXPR`.",null,null],[10,"make_place","","Creates a globally fresh place.",65,{"inputs":[],"output":{"name":"self"}}],[8,"Carrier","","A trait for types which have success and error states and are meant to work with the question mark operator. When the `?` operator is used with a value, whether the value is in the success or error state is determined by calling `translate`.",null,null],[16,"Success","","The type of the value when computation succeeds.",66,null],[16,"Error","","The type of the value when computation errors out.",66,null],[10,"from_success","","Create a `Carrier` from a success value.",66,null],[10,"from_error","","Create a `Carrier` from an error value.",66,null],[10,"translate","","Translate this `Carrier` to another implementation of `Carrier` with the same associated types.",66,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[0,"ptr","steed","Raw, unsafe pointers, `*const T`, and `*mut T`.",null,null],[5,"null","steed::ptr","Creates a null raw pointer.",null,null],[5,"null_mut","","Creates a null mutable raw pointer.",null,null],[5,"swap","","Swaps the values at two mutable locations of the same type, without deinitializing either. They may overlap, unlike `mem::swap` which is otherwise equivalent.",null,null],[5,"replace","","Replaces the value at `dest` with `src`, returning the old value, without dropping either.",null,null],[5,"read","","Reads the value from `src` without moving it. This leaves the memory in `src` unchanged.",null,null],[5,"read_unaligned","","Reads the value from `src` without moving it. This leaves the memory in `src` unchanged.",null,null],[5,"write","","Overwrites a memory location with the given value without reading or dropping the old value.",null,null],[5,"write_unaligned","","Overwrites a memory location with the given value without reading or dropping the old value.",null,null],[5,"read_volatile","","Performs a volatile read of the value from `src` without moving it. This leaves the memory in `src` unchanged.",null,null],[5,"write_volatile","","Performs a volatile write of a memory location with the given value without reading or dropping the old value.",null,null],[5,"eq","","Compare raw pointers for equality.",null,null],[3,"Unique","","A wrapper around a raw non-null `*mut T` that indicates that the possessor of this wrapper owns the referent. This in turn implies that the `Unique<T>` is `Send`/`Sync` if `T` is `Send`/`Sync`, unlike a raw `*mut T` (which conveys no particular ownership semantics).  It also implies that the referent of the pointer should not be modified without a unique path to the `Unique` reference. Useful for building abstractions like `Vec<T>` or `Box<T>`, which internally use raw pointers to manage the memory that they own.",null,null],[3,"Shared","","A wrapper around a raw non-null `*mut T` that indicates that the possessor of this wrapper has shared ownership of the referent. Useful for building abstractions like `Rc<T>` or `Arc<T>`, which internally use raw pointers to manage the memory that they own.",null,null],[5,"copy_nonoverlapping","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source and destination may *not* overlap.",null,null],[5,"copy","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source and destination may overlap.",null,null],[5,"write_bytes","","Invokes memset on the specified pointer, setting `count * size_of::<T>()` bytes of memory starting at `dst` to `val`.",null,null],[5,"drop_in_place","","Executes the destructor (if any) of the pointed-to value.",null,null],[0,"raw","steed","Contains struct definitions for the layout of compiler built-in types.",null,null],[3,"TraitObject","steed::raw","The representation of a trait object like `&SomeTrait`.",null,null],[12,"data","","",67,null],[12,"vtable","","",67,null],[0,"result","steed","Error handling with the `Result` type.",null,null],[4,"Result","steed::result","`Result` is a type that represents either success (`Ok`) or failure (`Err`).",null,null],[13,"Ok","","Contains the success value",68,null],[13,"Err","","Contains the error value",68,null],[3,"Iter","","An iterator over a reference to the [`Ok`] variant of a [`Result`].",null,null],[3,"IterMut","","An iterator over a mutable reference to the [`Ok`] variant of a [`Result`].",null,null],[3,"IntoIter","","An iterator over the value in a [`Ok`] variant of a [`Result`].",null,null],[0,"option","steed","Optional values.",null,null],[4,"Option","steed::option","The `Option` type. See the module level documentation for more.",null,null],[13,"None","","No value",69,null],[13,"Some","","Some value `T`",69,null],[3,"Iter","","An iterator over a reference of the contained item in an [`Option`].",null,null],[3,"IterMut","","An iterator over a mutable reference of the contained item in an [`Option`].",null,null],[3,"IntoIter","","An iterator over the item contained inside an [`Option`].",null,null],[0,"isize","steed","The pointer-sized signed integer type.",null,null],[17,"MIN","steed::isize","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"i8","steed","The 8-bit signed integer type.",null,null],[17,"MIN","steed::i8","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"i16","steed","The 16-bit signed integer type.",null,null],[17,"MIN","steed::i16","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"i32","steed","The 32-bit signed integer type.",null,null],[17,"MIN","steed::i32","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"i64","steed","The 64-bit signed integer type.",null,null],[17,"MIN","steed::i64","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"usize","steed","The pointer-sized unsigned integer type.",null,null],[17,"MIN","steed::usize","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"u8","steed","The 8-bit unsigned integer type.",null,null],[17,"MIN","steed::u8","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"u16","steed","The 16-bit unsigned integer type.",null,null],[17,"MIN","steed::u16","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"u32","steed","The 32-bit unsigned integer type.",null,null],[17,"MIN","steed::u32","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"u64","steed","The 64-bit unsigned integer type.",null,null],[17,"MIN","steed::u64","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"boxed","steed","A pointer type for heap allocation.",null,null],[17,"HEAP","steed::boxed","A value that represents the heap. This is the default place that the `box` keyword allocates into when no place is supplied.",null,null],[3,"ExchangeHeapSingleton","","This the singleton type used solely for `boxed::HEAP`.",null,null],[3,"Box","","A pointer type for heap allocation.",null,null],[3,"IntermediateBox","","`IntermediateBox` represents uninitialized backing storage for `Box`.",null,null],[8,"FnBox","","`FnBox` is a version of the `FnOnce` intended for use with boxed closure objects. The idea is that where one would normally store a `Box<FnOnce()>` in a data structure, you should use `Box<FnBox()>`. The two traits behave essentially the same, except that a `FnBox` closure can only be called if it is boxed. (Note that `FnBox` may be deprecated in the future if `Box<FnOnce()>` closures become directly usable.)",null,null],[16,"Output","","",70,null],[10,"call_box","","",70,null],[0,"rc","steed","Single-threaded reference-counting pointers.",null,null],[3,"Rc","steed::rc","A single-threaded reference-counting pointer.",null,null],[3,"Weak","","A weak version of [`Rc`][rc].",null,null],[0,"borrow","steed","A module for working with borrowed data.",null,null],[8,"ToOwned","steed::borrow","A generalization of `Clone` to borrowed data.",null,null],[16,"Owned","","",71,null],[10,"to_owned","","Creates owned data from borrowed data, usually by cloning.",71,null],[4,"Cow","","A clone-on-write smart pointer.",null,null],[13,"Borrowed","","Borrowed data.",72,null],[13,"Owned","","Owned data.",72,null],[8,"Borrow","","A trait for borrowing data.",null,null],[10,"borrow","","Immutably borrows from an owned value.",73,{"inputs":[{"name":"self"}],"output":{"name":"borrowed"}}],[8,"BorrowMut","","A trait for mutably borrowing data.",null,null],[10,"borrow_mut","","Mutably borrows from an owned value.",74,{"inputs":[{"name":"self"}],"output":{"name":"borrowed"}}],[0,"fmt","steed","Utilities for formatting and printing `String`s",null,null],[5,"format","steed::fmt","The format function takes a precompiled format string and a list of arguments, to return the resulting formatted string.",null,{"inputs":[{"name":"arguments"}],"output":{"name":"string"}}],[5,"write","","The `write` function takes an output stream, a precompiled format string, and a list of arguments. The arguments will be formatted according to the specified format string into the output stream provided.",null,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[3,"DebugList","","A struct to help with `fmt::Debug` implementations.",null,null],[6,"Result","","The type returned by formatter methods.",null,null],[3,"DebugTuple","","A struct to help with `fmt::Debug` implementations.",null,null],[8,"UpperHex","","Format trait for the `X` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Display","","Format trait for an empty format, `{}`.",null,null],[10,"fmt","","Formats the value using the given formatter.",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"DebugStruct","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"Error","","The error type which is returned from formatting a message into a stream.",null,null],[8,"Write","","A collection of methods that are required to format a message into a stream.",null,null],[10,"write_str","","Writes a slice of bytes into this writer, returning whether the write succeeded.",77,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","Writes a `char` into this writer, returning whether the write succeeded.",77,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","Glue for usage of the `write!` macro with implementors of this trait.",77,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[8,"Binary","","Format trait for the `b` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"LowerExp","","Format trait for the `e` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"DebugSet","","A struct to help with `fmt::Debug` implementations.",null,null],[8,"Debug","","Format trait for the `?` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Arguments","","This structure represents a safely precompiled version of a format string and its arguments. This cannot be generated at runtime because it cannot safely be done so, so no constructors are given and the fields are private to prevent modification.",null,null],[3,"DebugMap","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"Formatter","","A struct to represent both where to emit formatting strings to and how they should be formatted. A mutable version of this is passed to all formatting traits.",null,null],[8,"Octal","","Format trait for the `o` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"LowerHex","","Format trait for the `x` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"UpperExp","","Format trait for the `E` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Pointer","","Format trait for the `p` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"slice","steed","A dynamically-sized view into a contiguous sequence, `[T]`.",null,null],[8,"SliceConcatExt","steed::slice","An extension trait for concatenating slices",null,null],[16,"Output","","The resulting type after concatenation",85,null],[10,"concat","","Flattens a slice of `T` into a single value `Self::Output`.",85,null],[10,"join","","Flattens a slice of `T` into a single value `Self::Output`, placing a given separator between each.",85,null],[10,"connect","","",85,null],[3,"IterMut","","Mutable slice iterator.",null,null],[3,"SplitNMut","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits.",null,null],[3,"Split","","An iterator over subslices separated by elements that match a predicate function.",null,null],[3,"Windows","","An iterator over overlapping subslices of length `size`.",null,null],[3,"Chunks","","An iterator over a slice in (non-overlapping) chunks (`size` elements at a time).",null,null],[3,"RSplitNMut","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits, starting from the end of the slice.",null,null],[5,"from_raw_parts","","Forms a slice from a pointer and a length.",null,null],[3,"Iter","","Immutable slice iterator",null,null],[3,"ChunksMut","","An iterator over a slice in (non-overlapping) mutable chunks (`size` elements at a time). When the slice len is not evenly divided by the chunk size, the last slice of the iteration will be the remainder.",null,null],[3,"RSplitN","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits, starting from the end of the slice.",null,null],[8,"SliceIndex","","A helper trait used for indexing operations.",null,null],[16,"Output","","The output type returned by methods.",86,null],[10,"get","","Returns a shared reference to the output at this location, if in bounds.",86,null],[10,"get_mut","","Returns a mutable reference to the output at this location, if in bounds.",86,null],[10,"get_unchecked","","Returns a shared reference to the output at this location, without performing any bounds checking.",86,null],[10,"get_unchecked_mut","","Returns a mutable reference to the output at this location, without performing any bounds checking.",86,null],[10,"index","","Returns a shared reference to the output at this location, panicking if out of bounds.",86,null],[10,"index_mut","","Returns a mutable reference to the output at this location, panicking if out of bounds.",86,null],[5,"from_raw_parts_mut","","Performs the same functionality as `from_raw_parts`, except that a mutable slice is returned.",null,null],[3,"SplitN","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits.",null,null],[3,"SplitMut","","An iterator over the subslices of the vector which are separated by elements that match `pred`.",null,null],[0,"str","steed","Unicode string slices.",null,null],[3,"EncodeUtf16","steed::str","External iterator for a string's UTF-16 code units.",null,null],[3,"CharIndices","","Iterator for a string's characters and their byte offsets.",null,null],[3,"Split","","Created with the method [`split()`].",null,null],[8,"FromStr","","A trait to abstract the idea of creating a new instance of a type from a string.",null,null],[16,"Err","","The associated error which can be returned from parsing.",87,null],[10,"from_str","","Parses a string `s` to return a value of this type.",87,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[3,"RSplit","","Created with the method [`rsplit()`].",null,null],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without checking that the string contains valid UTF-8.",null,null],[3,"RMatches","","Created with the method [`rmatches()`].",null,null],[3,"Chars","","Iterator for the char (representing *Unicode Scalar Values*) of a string",null,null],[3,"LinesAny","","Created with the method [`lines_any()`].",null,null],[3,"Matches","","Created with the method [`matches()`].",null,null],[3,"Lines","","Created with the method [`lines()`].",null,null],[0,"pattern","","The string Pattern API.",null,null],[8,"Pattern","steed::str::pattern","A string pattern.",null,null],[16,"Searcher","","Associated searcher for this pattern",88,null],[10,"into_searcher","","Constructs the associated searcher from `self` and the `haystack` to search in.",88,null],[11,"is_contained_in","","Checks whether the pattern matches anywhere in the haystack",88,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the haystack",88,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the haystack",88,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[4,"SearchStep","","Result of calling `Searcher::next()` or `ReverseSearcher::next_back()`.",null,null],[13,"Match","","Expresses that a match of the pattern has been found at `haystack[a..b]`.",89,null],[13,"Reject","","Expresses that `haystack[a..b]` has been rejected as a possible match of the pattern.",89,null],[13,"Done","","Expresses that every byte of the haystack has been visted, ending the iteration.",89,null],[8,"Searcher","","A searcher for a string pattern.",null,null],[10,"haystack","","Getter for the underlaying string to be searched in",90,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[10,"next","","Performs the next search step starting from the front.",90,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","Find the next `Match` result. See `next()`",90,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","Find the next `Reject` result. See `next()`",90,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"ReverseSearcher","","A reverse searcher for a string pattern.",null,null],[10,"next_back","","Performs the next search step starting from the back.",91,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","Find the next `Match` result. See `next_back()`",91,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","Find the next `Reject` result. See `next_back()`",91,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"DoubleEndedSearcher","","A marker trait to express that a `ReverseSearcher` can be used for a `DoubleEndedIterator` implementation.",null,null],[3,"CharSearcher","","Associated type for `<char as Pattern<'a>>::Searcher`.",null,null],[3,"CharSliceSearcher","","Associated type for `<&[char] as Pattern<'a>>::Searcher`.",null,null],[3,"CharPredicateSearcher","","Associated type for `<F as Pattern<'a>>::Searcher`.",null,null],[3,"StrSearcher","","Associated type for `<&str as Pattern<'a>>::Searcher`.",null,null],[3,"RSplitTerminator","steed::str","Created with the method [`rsplit_terminator()`].",null,null],[3,"RMatchIndices","","Created with the method [`rmatch_indices()`].",null,null],[5,"from_utf8","","Converts a slice of bytes to a string slice.",null,null],[3,"RSplitN","","Created with the method [`rsplitn()`].",null,null],[3,"SplitWhitespace","","An iterator over the non-whitespace substrings of a string, separated by any amount of whitespace.",null,null],[3,"Bytes","","External iterator for a string's bytes. Use with the `std::iter` module.",null,null],[3,"Utf8Error","","Errors which can occur when attempting to interpret a sequence of `u8` as a string.",null,null],[3,"SplitN","","Created with the method [`splitn()`].",null,null],[3,"SplitTerminator","","Created with the method [`split_terminator()`].",null,null],[3,"MatchIndices","","Created with the method [`match_indices()`].",null,null],[3,"ParseBoolError","","An error returned when parsing a `bool` from a string fails.",null,null],[0,"string","steed","A UTF-8 encoded, growable string.",null,null],[3,"String","steed::string","A UTF-8 encoded, growable string.",null,null],[3,"FromUtf8Error","","A possible error value when converting a `String` from a UTF-8 byte vector.",null,null],[3,"FromUtf16Error","","A possible error value when converting a `String` from a UTF-16 byte slice.",null,null],[4,"ParseError","","An error when parsing a `String`.",null,null],[8,"ToString","","A trait for converting a value to a `String`.",null,null],[10,"to_string","","Converts the given value to a `String`.",92,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[3,"Drain","","A draining iterator for `String`.",null,null],[0,"vec","steed","A contiguous growable array type with heap-allocated contents, written `Vec<T>` but pronounced 'vector.'",null,null],[3,"Vec","steed::vec","A contiguous growable array type, written `Vec<T>` but pronounced 'vector'.",null,null],[3,"IntoIter","","An iterator that moves out of a vector.",null,null],[3,"Drain","","A draining iterator for `Vec<T>`.",null,null],[3,"PlaceBack","","A place for insertion at the back of a `Vec`.",null,null],[0,"char","steed","A character type.",null,null],[3,"ToLowercase","steed::char","Returns an iterator that yields the lowercase equivalent of a `char`.",null,null],[3,"ToUppercase","","Returns an iterator that yields the uppercase equivalent of a `char`.",null,null],[3,"DecodeUtf16","","An iterator that decodes UTF-16 encoded code points from an iterator of `u16`s.",null,null],[3,"DecodeUtf16Error","","An iterator that decodes UTF-16 encoded code points from an iterator of `u16`s.",null,null],[5,"decode_utf16","","Create an iterator over the UTF-16 encoded code points in `iter`, returning unpaired surrogates as `Err`s.",null,{"inputs":[{"name":"i"}],"output":{"name":"decodeutf16"}}],[17,"REPLACEMENT_CHARACTER","","`U+FFFD REPLACEMENT CHARACTER` (�) is used in Unicode to represent a decoding error.",null,null],[5,"from_digit","","Converts a digit in the given radix to a `char`.",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[5,"decode_utf8","","Decodes an `Iterator` of bytes as UTF-8.",null,{"inputs":[{"name":"i"}],"output":{"name":"decodeutf8"}}],[5,"from_u32","","Converts a `u32` to a `char`.",null,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[3,"EscapeUnicode","","Returns an iterator that yields the hexadecimal Unicode escape of a character, as `char`s.",null,null],[3,"CharTryFromError","","The error type returned when a conversion from u32 to char fails.",null,null],[3,"DecodeUtf8","","An iterator over an iterator of bytes of the characters the bytes represent as UTF-8",null,null],[17,"MAX","","The highest valid code point a `char` can have.",null,null],[3,"EscapeDefault","","An iterator that yields the literal escape code of a `char`.",null,null],[5,"from_u32_unchecked","","Converts a `u32` to a `char`, ignoring validity.",null,{"inputs":[{"name":"u32"}],"output":{"name":"char"}}],[3,"EscapeDebug","","An iterator that yields the literal escape code of a `char`.",null,null],[17,"UNICODE_VERSION","","The version of Unicode that the unicode parts of `CharExt` and `UnicodeStrPrelude` traits are based on.",null,null],[0,"prelude","steed","The Rust Prelude.",null,null],[0,"v1","steed::prelude","The first version of the prelude of The Rust Standard Library.",null,null],[0,"fs","steed","",null,null],[3,"File","steed::fs","",null,null],[3,"OpenOptions","","",null,null],[11,"create","","NOTE `path` must be null terminated",93,null],[11,"open","","NOTE `path` must be null terminated",93,null],[11,"drop","","",93,{"inputs":[{"name":"self"}],"output":null}],[11,"read","","",93,null],[11,"write","","",93,null],[11,"new","","",94,{"inputs":[],"output":{"name":"self"}}],[11,"read","","",94,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"write","","",94,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"append","","",94,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"truncate","","",94,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"create","","",94,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"open","","",94,null],[0,"io","steed","",null,null],[3,"Error","steed::io","",null,null],[3,"Stderr","","",null,null],[3,"Stdin","","",null,null],[3,"Stdout","","",null,null],[5,"stderr","","",null,{"inputs":[],"output":{"name":"stderr"}}],[5,"stdin","","",null,{"inputs":[],"output":{"name":"stdin"}}],[5,"stdout","","",null,{"inputs":[],"output":{"name":"stdout"}}],[6,"Result","","",null,null],[8,"Read","","",null,null],[10,"read","","",95,null],[8,"Write","","",null,null],[10,"write","","",96,null],[11,"write_all","","",96,null],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_raw_os_error","","",97,{"inputs":[{"name":"i32"}],"output":{"name":"error"}}],[11,"write","","",98,null],[11,"write_str","","",98,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"read","","",99,null],[11,"write","","",100,null],[11,"write_str","","",100,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[0,"process","steed","",null,null],[5,"exit","steed::process","",null,null],[0,"collections","steed","Collection types.",null,null],[4,"Bound","steed::collections","An endpoint of a range of keys.",null,null],[13,"Included","","An inclusive bound.",101,null],[13,"Excluded","","An exclusive bound.",101,null],[13,"Unbounded","","An infinite endpoint. Indicates that there is no bound in this direction.",101,null],[3,"BinaryHeap","","A priority queue implemented with a binary heap.",null,null],[3,"BTreeMap","","A map based on a B-Tree.",null,null],[3,"BTreeSet","","A set based on a B-Tree.",null,null],[3,"LinkedList","","A doubly-linked list with owned nodes.",null,null],[3,"VecDeque","","`VecDeque` is a growable ring buffer, which can be used as a double-ended queue efficiently.",null,null],[0,"binary_heap","","A priority queue implemented with a binary heap.",null,null],[3,"BinaryHeap","steed::collections::binary_heap","A priority queue implemented with a binary heap.",null,null],[3,"PeekMut","","A container object that represents the result of the [`peek_mut()`] method on `BinaryHeap`. See its documentation for details.",null,null],[3,"Iter","","`BinaryHeap` iterator.",null,null],[3,"IntoIter","","An iterator that moves out of a `BinaryHeap`.",null,null],[3,"Drain","","An iterator that drains a `BinaryHeap`.",null,null],[0,"btree_map","steed::collections","A map based on a B-Tree.",null,null],[3,"Values","steed::collections::btree_map","An iterator over a BTreeMap's values.",null,null],[3,"Keys","","An iterator over a BTreeMap's keys.",null,null],[3,"Range","","An iterator over a sub-range of BTreeMap's entries.",null,null],[3,"ValuesMut","","A mutable iterator over a BTreeMap's values.",null,null],[3,"BTreeMap","","A map based on a B-Tree.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied. This enum is constructed from the [`entry`] method on [`BTreeMap`].",null,null],[13,"Vacant","","A vacant Entry",102,null],[13,"Occupied","","An occupied Entry",102,null],[3,"RangeMut","","A mutable iterator over a sub-range of BTreeMap's entries.",null,null],[3,"VacantEntry","","A vacant Entry. It is part of the [`Entry`] enum.",null,null],[3,"OccupiedEntry","","An occupied Entry. It is part of the [`Entry`] enum.",null,null],[3,"IntoIter","","An owning iterator over a BTreeMap's entries.",null,null],[3,"Iter","","An iterator over a BTreeMap's entries.",null,null],[3,"IterMut","","A mutable iterator over a BTreeMap's entries.",null,null],[0,"btree_set","steed::collections","A set based on a B-Tree.",null,null],[3,"Difference","steed::collections::btree_set","A lazy iterator producing elements in the set difference (in-order).",null,null],[3,"Union","","A lazy iterator producing elements in the set union (in-order).",null,null],[3,"Range","","An iterator over a sub-range of `BTreeSet`'s items.",null,null],[3,"SymmetricDifference","","A lazy iterator producing elements in the set symmetric difference (in-order).",null,null],[3,"IntoIter","","An owning iterator over a `BTreeSet`'s items.",null,null],[3,"Iter","","An iterator over a `BTreeSet`'s items.",null,null],[3,"Intersection","","A lazy iterator producing elements in the set intersection (in-order).",null,null],[3,"BTreeSet","","A set based on a B-Tree.",null,null],[0,"linked_list","steed::collections","A doubly-linked list with owned nodes.",null,null],[3,"LinkedList","steed::collections::linked_list","A doubly-linked list with owned nodes.",null,null],[3,"Iter","","An iterator over references to the elements of a `LinkedList`.",null,null],[3,"IterMut","","An iterator over mutable references to the elements of a `LinkedList`.",null,null],[3,"IntoIter","","An iterator over the elements of a `LinkedList`.",null,null],[3,"FrontPlace","","A place for insertion at the front of a `LinkedList`.",null,null],[3,"BackPlace","","A place for insertion at the back of a `LinkedList`.",null,null],[0,"vec_deque","steed::collections","VecDeque is a double-ended queue, which is implemented with the help of a growing ring buffer.",null,null],[3,"VecDeque","steed::collections::vec_deque","`VecDeque` is a growable ring buffer, which can be used as a double-ended queue efficiently.",null,null],[3,"Iter","","`VecDeque` iterator.",null,null],[3,"IterMut","","`VecDeque` mutable iterator.",null,null],[3,"IntoIter","","A by-value VecDeque iterator",null,null],[3,"Drain","","A draining VecDeque iterator",null,null],[0,"range","steed::collections","Range syntax.",null,null],[8,"RangeArgument","steed::collections::range","**RangeArgument** is implemented by Rust's built-in range types, produced by range syntax like `..`, `a..`, `..b` or `c..d`.",null,null],[11,"start","","Start index (inclusive)",103,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"end","","End index (exclusive)",103,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"error","steed","Traits for working with Errors.",null,null],[8,"Error","steed::error","Base functionality for all errors in Rust.",null,null],[10,"description","","A short description of the error.",104,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","The lower-level cause of this error, if any.",104,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","steed::boxed","",105,{"inputs":[{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",105,{"inputs":[{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",105,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",105,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",105,{"inputs":[{"name":"str"}],"output":{"name":"box"}}],[11,"from","","",105,{"inputs":[{"name":"str"}],"output":{"name":"box"}}],[11,"description","steed::str","",106,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",107,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","steed::string","",108,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",109,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",110,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","steed::char","",111,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","steed::boxed","",105,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",105,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"description","steed::fmt","",112,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","steed::cell","",113,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",114,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","steed::char","",115,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is","steed::error","Returns true if the boxed type is the same as `T`",104,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or `None` if it isn't.",104,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or `None` if it isn't.",104,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",104,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",104,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",104,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",104,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",104,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",104,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",104,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",104,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",104,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[0,"num","steed","Additional functionality for numerics.",null,null],[8,"Zero","steed::num","Types that have a \"zero\" value.",null,null],[10,"zero","","The \"zero\" (usually, additive identity) for this type.",116,{"inputs":[],"output":{"name":"self"}}],[8,"One","","Types that have a \"one\" value.",null,null],[10,"one","","The \"one\" (usually, multiplicative identity) for this type.",117,{"inputs":[],"output":{"name":"self"}}],[4,"FpCategory","","A classification of floating point numbers.",null,null],[13,"Nan","","\"Not a Number\", often obtained by dividing by zero.",118,null],[13,"Infinite","","Positive or negative infinity.",118,null],[13,"Zero","","Positive or negative zero.",118,null],[13,"Subnormal","","De-normalized floating point representation (less precise than `Normal`).",118,null],[13,"Normal","","A regular floating point number.",118,null],[3,"ParseIntError","","An error which can be returned when parsing an integer.",null,null],[3,"ParseFloatError","","An error which can be returned when parsing a float.",null,null],[3,"TryFromIntError","","The error type returned when a checked integral type conversion fails.",null,null],[3,"Wrapping","","Provides intentionally-wrapped arithmetic on `T`.",null,null],[12,"0","","",119,null],[0,"time","steed","Temporal quantification.",null,null],[3,"Duration","steed::time","A duration type to represent a span of time, typically used for system timeouts.",null,null],[3,"SystemTimeError","","An error returned from the `duration_since` method on `SystemTime`, used to learn how far in the opposite direction a system time lies.",null,null],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"eq","","",120,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",120,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",120,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",120,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",120,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",120,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",120,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"cmp","","",120,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",120,null],[11,"new","","Creates a new `Duration` from the specified number of seconds and additional nanosecond precision.",120,{"inputs":[{"name":"u64"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"from_secs","","Creates a new `Duration` from the specified number of seconds.",120,{"inputs":[{"name":"u64"}],"output":{"name":"duration"}}],[11,"from_millis","","Creates a new `Duration` from the specified number of milliseconds.",120,{"inputs":[{"name":"u64"}],"output":{"name":"duration"}}],[11,"as_secs","","Returns the number of whole seconds represented by this duration.",120,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"subsec_nanos","","Returns the nanosecond precision represented by this duration.",120,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"checked_add","","Checked duration addition. Computes `self + other`, returning `None` if overflow occurred.",120,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Checked duration subtraction. Computes `self + other`, returning `None` if the result would be negative or if underflow occurred.",120,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_mul","","Checked duration multiplication. Computes `self * other`, returning `None` if underflow or overflow occurred.",120,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"checked_div","","Checked duration division. Computes `self / other`, returning `None` if `other == 0` or the operation results in underflow or overflow.",120,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"add","","",120,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"add_assign","","",120,{"inputs":[{"name":"self"},{"name":"duration"}],"output":null}],[11,"sub","","",120,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub_assign","","",120,{"inputs":[{"name":"self"},{"name":"duration"}],"output":null}],[11,"mul","","",120,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"mul_assign","","",120,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"div","","",120,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"div_assign","","",120,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"clone","","",121,{"inputs":[{"name":"self"}],"output":{"name":"systemtimeerror"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"duration","","Returns the positive duration which represents how far forward the second system time was from the first.",121,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"description","","",121,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"vec","steed","Creates a `Vec` containing the arguments.",null,null],[14,"print","","",null,null],[14,"println","","",null,null],[11,"is","steed::any","Returns true if the boxed type is the same as `T`.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or `None` if it isn't.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or `None` if it isn't.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","steed::boxed","",105,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",105,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next","","",105,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",105,null],[11,"nth","","",105,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"default","","Creates a `Box<T>`, with the `Default` value for T.",105,{"inputs":[],"output":{"name":"box"}}],[11,"default","","",105,{"inputs":[],"output":{"name":"box"}}],[11,"default","steed::rc","Creates a new `Rc<T>`, with the `Default` value for `T`.",122,{"inputs":[],"output":{"name":"rc"}}],[11,"default","","Constructs a new `Weak<T>`, without an accompanying instance of `T`.",123,{"inputs":[],"output":{"name":"weak"}}],[11,"hash","steed::boxed","",105,null],[11,"hash","steed::rc","",122,null],[11,"make_place","steed::boxed","",124,{"inputs":[],"output":{"name":"intermediatebox"}}],[11,"eq","","",105,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",105,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"eq","steed::rc","Equality for two `Rc`s.",122,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Rc`s.",122,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"pointer","steed::boxed","",124,null],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","steed::rc","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","steed::boxed","",105,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"option"}}],[11,"lt","","",105,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",105,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",105,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",105,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"partial_cmp","steed::rc","Partial comparison for two `Rc`s.",122,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Rc`s.",122,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"le","","'Less than or equal to' comparison for two `Rc`s.",122,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Rc`s.",122,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater than or equal to' comparison for two `Rc`s.",122,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"from","steed::boxed","",105,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from","steed::rc","",122,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"call_once","steed::boxed","",105,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",105,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"r"}}],[11,"finalize","","",124,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",105,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",105,null],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"clone","steed::rc","Makes a clone of the `Rc` pointer.",122,{"inputs":[{"name":"self"}],"output":{"name":"rc"}}],[11,"clone","","Makes a clone of the `Weak` pointer.",123,{"inputs":[{"name":"self"}],"output":{"name":"weak"}}],[11,"clone","steed::boxed","",125,{"inputs":[{"name":"self"}],"output":{"name":"exchangeheapsingleton"}}],[11,"deref","","",105,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","steed::rc","",122,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","steed::boxed","",124,null],[11,"drop","steed::rc","Drops the `Rc`.",122,null],[11,"drop","","Drops the `Weak` pointer.",123,null],[11,"finalize","steed::boxed","",105,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"as_ref","","",105,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","steed::rc","",122,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","steed::boxed","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","steed::rc","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","steed::boxed","",105,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"borrow","","",105,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow","steed::rc","",122,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"cmp","steed::boxed","",105,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"cmp","steed::rc","Comparison for two `Rc`s.",122,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"ordering"}}],[11,"deref_mut","steed::boxed","",105,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"make_place","","",125,{"inputs":[{"name":"self"}],"output":{"name":"intermediatebox"}}],[11,"as_mut","","",105,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","steed::rc","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow_mut","steed::boxed","",105,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"next","steed::str","",126,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","steed::char","",127,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",128,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",129,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",129,null],[11,"next_back","steed::str","",126,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","steed::char","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",111,{"inputs":[{"name":"self"},{"name":"decodeutf16error"}],"output":{"name":"bool"}}],[11,"ne","","",111,{"inputs":[{"name":"self"},{"name":"decodeutf16error"}],"output":{"name":"bool"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",129,{"inputs":[{"name":"self"}],"output":{"name":"decodeutf16"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"decodeutf16error"}}],[11,"haystack","steed::str::pattern","",130,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",130,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",130,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","",130,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"haystack","","",131,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",131,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",131,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","",131,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"haystack","","",132,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",132,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",132,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","",132,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"haystack","","",133,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",133,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",133,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"add","steed::num","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",119,null],[11,"add","","",119,null],[11,"add","","",119,null],[11,"add","","",119,null],[11,"add","","",119,null],[11,"add","","",119,null],[11,"add","","",119,null],[11,"add","","",119,null],[11,"add","","",119,null],[11,"add","","",119,null],[11,"add","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",119,null],[11,"add","","",119,null],[11,"from_iter","steed::option","Takes each element in the `Iterator`: if it is `None`, no further elements are taken, and the `None` is returned. Should no `None` occur, a container with the values of each `Option` is returned.",69,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"from_iter","steed::result","Takes each element in the `Iterator`: if it is an `Err`, no further elements are taken, and the `Err` is returned. Should no `Err` occur, a container with the values of each `Result` is returned.",68,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"deref","steed::ptr","",134,null],[11,"deref","","",135,null],[11,"deref","steed::cell","",136,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",137,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"product","steed::result","",68,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"product","steed::num","",119,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",119,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",119,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",119,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",119,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",119,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",119,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",119,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",119,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",119,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",119,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",119,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",119,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",119,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",119,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",119,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",119,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",119,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",119,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",119,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",119,null],[11,"bitor_assign","","",119,null],[11,"bitor_assign","","",119,null],[11,"bitor_assign","","",119,null],[11,"bitor_assign","","",119,null],[11,"bitor_assign","","",119,null],[11,"bitor_assign","","",119,null],[11,"bitor_assign","","",119,null],[11,"bitor_assign","","",119,null],[11,"bitor_assign","","",119,null],[11,"bitor_assign","","",119,null],[11,"bitor_assign","","",119,null],[11,"cmp","steed::cmp","",4,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","steed::cell","",138,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"ordering"}}],[11,"cmp","","",139,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"ordering"}}],[11,"cmp","steed::num","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"cmp","steed::marker","",140,{"inputs":[{"name":"self"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"cmp","steed::option","",69,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"cmp","steed::result","",68,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"cmp","steed::fmt","",112,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"ordering"}}],[11,"next","steed::char","",141,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",141,null],[11,"count","","",141,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",141,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",142,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",142,null],[11,"count","","",142,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",142,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",142,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",143,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",143,null],[11,"next","","",144,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","steed::iter","",145,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",145,null],[11,"next","","",145,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",145,null],[11,"next","","",145,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",145,null],[11,"next","steed::ops","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",51,null],[11,"next","","",52,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",54,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",54,null],[11,"next","steed::iter","",146,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",146,null],[11,"next","","",147,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",147,null],[11,"next","","",148,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",148,null],[11,"next","","",149,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",149,null],[11,"next","","",150,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",150,null],[11,"fold","","",150,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"next","","",151,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",151,null],[11,"next","","",152,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",152,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fold","","",152,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"nth","","",152,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"find","","",152,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"last","","",152,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",152,null],[11,"next","","",153,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",153,null],[11,"next","","",154,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",154,null],[11,"fold","","",154,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"next","","",155,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",155,null],[11,"next","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",156,null],[11,"next","","Overflow Behavior",157,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",157,null],[11,"nth","","",157,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",157,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",158,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",158,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",158,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",158,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",158,null],[11,"next","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",159,null],[11,"next","","",160,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",160,null],[11,"next","","",161,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",161,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",161,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",161,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",161,null],[11,"next","","",162,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",162,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",162,null],[11,"next","","",163,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",163,null],[11,"next","","",164,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",164,null],[11,"next","","",165,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",165,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",165,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",165,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",165,null],[11,"next","","",165,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",165,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",165,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",165,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",165,null],[11,"next","","",166,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",166,null],[11,"next","steed::option","",167,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",167,null],[11,"next","","",168,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",168,null],[11,"next","","",169,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",169,null],[11,"next","steed::result","",170,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",170,null],[11,"next","","",171,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",171,null],[11,"next","","",172,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",172,null],[11,"next","steed::slice","",173,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",173,null],[11,"next","","",174,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",174,null],[11,"next","","",175,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",175,null],[11,"count","","",175,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",175,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",175,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",176,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",176,null],[11,"count","","",176,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",176,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",176,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",177,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",177,null],[11,"count","","",177,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",177,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",177,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","steed::str","",178,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",178,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",178,null],[11,"last","","",178,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",179,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",179,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",179,null],[11,"last","","",179,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",180,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",180,null],[11,"count","","",180,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",180,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",180,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","","",181,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",181,null],[11,"next","","",182,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",182,null],[11,"next","steed::slice","",183,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",183,null],[11,"count","","",183,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",183,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",183,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",184,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",184,null],[11,"count","","",184,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",184,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",184,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",185,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",185,null],[11,"next","","",186,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",186,null],[11,"next","","",187,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",187,null],[11,"next","","",188,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",188,null],[11,"next","steed::str","",189,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",190,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",191,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",192,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",193,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",194,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",195,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",196,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",197,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",198,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"add_assign","steed::num","",119,null],[11,"add_assign","","",119,null],[11,"add_assign","","",119,null],[11,"add_assign","","",119,null],[11,"add_assign","","",119,null],[11,"add_assign","","",119,null],[11,"add_assign","","",119,null],[11,"add_assign","","",119,null],[11,"add_assign","","",119,null],[11,"add_assign","","",119,null],[11,"add_assign","","",119,null],[11,"add_assign","","",119,null],[11,"shr","","",119,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",119,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",119,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",119,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",119,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",119,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",119,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",119,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",119,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",119,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",119,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",119,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",119,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",119,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",119,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",119,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",119,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",119,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",119,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",119,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",119,null],[11,"bitxor","","",119,null],[11,"bitxor","","",119,null],[11,"bitxor","","",119,null],[11,"bitxor","","",119,null],[11,"bitxor","","",119,null],[11,"bitxor","","",119,null],[11,"bitxor","","",119,null],[11,"bitxor","","",119,null],[11,"bitxor","","",119,null],[11,"bitxor","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",119,null],[11,"bitxor","","",119,null],[11,"build_hasher","steed::hash","",199,{"inputs":[{"name":"self"}],"output":{"name":"h"}}],[11,"bitor","steed::num","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",119,null],[11,"bitor","","",119,null],[11,"bitor","","",119,null],[11,"bitor","","",119,null],[11,"bitor","","",119,null],[11,"bitor","","",119,null],[11,"bitor","","",119,null],[11,"bitor","","",119,null],[11,"bitor","","",119,null],[11,"bitor","","",119,null],[11,"bitor","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",119,null],[11,"bitor","","",119,null],[11,"sum","steed::result","",68,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"sum","steed::num","",119,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",119,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",119,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",119,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",119,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",119,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",119,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",119,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",119,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",119,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",119,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",119,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",119,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",119,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",119,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",119,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",119,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",119,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",119,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",119,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"bitand","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",119,null],[11,"bitand","","",119,null],[11,"bitand","","",119,null],[11,"bitand","","",119,null],[11,"bitand","","",119,null],[11,"bitand","","",119,null],[11,"bitand","","",119,null],[11,"bitand","","",119,null],[11,"bitand","","",119,null],[11,"bitand","","",119,null],[11,"bitand","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",119,null],[11,"bitand","","",119,null],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bitand_assign","","",119,null],[11,"bitand_assign","","",119,null],[11,"bitand_assign","","",119,null],[11,"bitand_assign","","",119,null],[11,"bitand_assign","","",119,null],[11,"bitand_assign","","",119,null],[11,"bitand_assign","","",119,null],[11,"bitand_assign","","",119,null],[11,"bitand_assign","","",119,null],[11,"bitand_assign","","",119,null],[11,"bitand_assign","","",119,null],[11,"bitand_assign","","",119,null],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",200,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",201,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",202,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","steed::cell","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","steed::char","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","steed::str","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","steed::fmt","",203,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","steed::cmp","",4,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"partial_cmp","steed::cell","",138,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"option"}}],[11,"lt","","",138,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"le","","",138,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"gt","","",138,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"ge","","",138,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",139,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"option"}}],[11,"lt","","",139,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"le","","",139,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"gt","","",139,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"ge","","",139,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"partial_cmp","steed::num","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"partial_cmp","steed::marker","",140,{"inputs":[{"name":"self"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"partial_cmp","steed::option","",69,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",69,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",69,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",69,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",69,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"partial_cmp","steed::result","",68,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",68,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",68,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",68,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",68,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"partial_cmp","steed::fmt","",112,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"option"}}],[11,"next_back","steed::str::pattern","",130,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",130,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","",130,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",131,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",131,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","",131,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",132,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",132,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","",132,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",133,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",133,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eq","steed::mem","",204,{"inputs":[{"name":"self"},{"name":"discriminant"}],"output":{"name":"bool"}}],[11,"eq","steed::cell","",138,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"eq","","",139,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"eq","steed::num","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"eq","","",200,{"inputs":[{"name":"self"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"ne","","",200,{"inputs":[{"name":"self"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"eq","","",118,{"inputs":[{"name":"self"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"eq","","",202,{"inputs":[{"name":"self"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",202,{"inputs":[{"name":"self"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"eq","steed::marker","",140,{"inputs":[{"name":"self"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"eq","steed::ops","",205,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"rangeinclusive"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"rangeinclusive"}],"output":{"name":"bool"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"rangetoinclusive"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"rangetoinclusive"}],"output":{"name":"bool"}}],[11,"eq","steed::cmp","",4,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"eq","steed::any","",206,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",206,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"eq","steed::cell","",1,{"inputs":[{"name":"self"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"eq","steed::char","",115,{"inputs":[{"name":"self"},{"name":"chartryfromerror"}],"output":{"name":"bool"}}],[11,"ne","","",115,{"inputs":[{"name":"self"},{"name":"chartryfromerror"}],"output":{"name":"bool"}}],[11,"eq","steed::option","",69,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","steed::result","",68,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","steed::str::pattern","",89,{"inputs":[{"name":"self"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"self"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"eq","steed::str","",106,{"inputs":[{"name":"self"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",106,{"inputs":[{"name":"self"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"eq","","",107,{"inputs":[{"name":"self"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",107,{"inputs":[{"name":"self"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"eq","steed::fmt","",112,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"rem_assign","steed::num","",119,null],[11,"rem_assign","","",119,null],[11,"rem_assign","","",119,null],[11,"rem_assign","","",119,null],[11,"rem_assign","","",119,null],[11,"rem_assign","","",119,null],[11,"rem_assign","","",119,null],[11,"rem_assign","","",119,null],[11,"rem_assign","","",119,null],[11,"rem_assign","","",119,null],[11,"rem_assign","","",119,null],[11,"rem_assign","","",119,null],[11,"default","steed::cell","Creates a `Cell<T>`, with the `Default` value for T.",138,{"inputs":[],"output":{"name":"cell"}}],[11,"default","","Creates a `RefCell<T>`, with the `Default` value for T.",139,{"inputs":[],"output":{"name":"refcell"}}],[11,"default","","Creates an `UnsafeCell`, with the `Default` value for T.",207,{"inputs":[],"output":{"name":"unsafecell"}}],[11,"default","steed::iter","",147,{"inputs":[],"output":{"name":"empty"}}],[11,"default","steed::option","Returns None.",69,{"inputs":[],"output":{"name":"option"}}],[11,"default","steed::hash","",199,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"default","steed::num","",119,{"inputs":[],"output":{"name":"wrapping"}}],[11,"default","steed::marker","",140,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"default","steed::hash","",208,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"default","","",209,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"default","","",210,{"inputs":[],"output":{"name":"siphasher"}}],[11,"default","steed::fmt","",112,{"inputs":[],"output":{"name":"error"}}],[11,"from_success","steed::result","",68,{"inputs":[{"name":"u"}],"output":{"name":"result"}}],[11,"from_error","","",68,{"inputs":[{"name":"v"}],"output":{"name":"result"}}],[11,"translate","","",68,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","steed::mem","",204,{"inputs":[{"name":"self"}],"output":{"name":"discriminant"}}],[11,"clone","steed::ptr","",135,{"inputs":[{"name":"self"}],"output":{"name":"shared"}}],[11,"clone","steed::cell","",138,{"inputs":[{"name":"self"}],"output":{"name":"cell"}}],[11,"clone","","",139,{"inputs":[{"name":"self"}],"output":{"name":"refcell"}}],[11,"clone","steed::iter","",147,{"inputs":[{"name":"self"}],"output":{"name":"empty"}}],[11,"clone","steed::option","",167,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","steed::result","",170,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","steed::slice","",183,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","","",173,{"inputs":[{"name":"self"}],"output":{"name":"split"}}],[11,"clone","","",175,{"inputs":[{"name":"self"}],"output":{"name":"windows"}}],[11,"clone","","",176,{"inputs":[{"name":"self"}],"output":{"name":"chunks"}}],[11,"clone","steed::hash","",199,{"inputs":[{"name":"self"}],"output":{"name":"buildhasherdefault"}}],[11,"clone","steed::num","",119,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"clone","","",200,{"inputs":[{"name":"self"}],"output":{"name":"parsefloaterror"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[11,"clone","","",201,{"inputs":[{"name":"self"}],"output":{"name":"tryfrominterror"}}],[11,"clone","","",202,{"inputs":[{"name":"self"}],"output":{"name":"parseinterror"}}],[11,"clone","steed::marker","",140,{"inputs":[{"name":"self"}],"output":{"name":"phantomdata"}}],[11,"clone","steed::ops","",205,{"inputs":[{"name":"self"}],"output":{"name":"rangefull"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"rangefrom"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"rangeto"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"rangeinclusive"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"rangetoinclusive"}}],[11,"clone","steed::cmp","",4,{"inputs":[{"name":"self"}],"output":{"name":"ordering"}}],[11,"clone","steed::any","",206,{"inputs":[{"name":"self"}],"output":{"name":"typeid"}}],[11,"clone","steed::cell","",1,{"inputs":[{"name":"self"}],"output":{"name":"borrowstate"}}],[11,"clone","steed::char","",115,{"inputs":[{"name":"self"}],"output":{"name":"chartryfromerror"}}],[11,"clone","","",141,{"inputs":[{"name":"self"}],"output":{"name":"escapeunicode"}}],[11,"clone","","",142,{"inputs":[{"name":"self"}],"output":{"name":"escapedefault"}}],[11,"clone","","",143,{"inputs":[{"name":"self"}],"output":{"name":"escapedebug"}}],[11,"clone","","",144,{"inputs":[{"name":"self"}],"output":{"name":"decodeutf8"}}],[11,"clone","steed::iter","",145,{"inputs":[{"name":"self"}],"output":{"name":"stepby"}}],[11,"clone","","",146,{"inputs":[{"name":"self"}],"output":{"name":"repeat"}}],[11,"clone","","",148,{"inputs":[{"name":"self"}],"output":{"name":"once"}}],[11,"clone","","",149,{"inputs":[{"name":"self"}],"output":{"name":"rev"}}],[11,"clone","","",150,{"inputs":[{"name":"self"}],"output":{"name":"cloned"}}],[11,"clone","","",151,{"inputs":[{"name":"self"}],"output":{"name":"cycle"}}],[11,"clone","","",152,{"inputs":[{"name":"self"}],"output":{"name":"chain"}}],[11,"clone","","",153,{"inputs":[{"name":"self"}],"output":{"name":"zip"}}],[11,"clone","","",154,{"inputs":[{"name":"self"}],"output":{"name":"map"}}],[11,"clone","","",155,{"inputs":[{"name":"self"}],"output":{"name":"filter"}}],[11,"clone","","",156,{"inputs":[{"name":"self"}],"output":{"name":"filtermap"}}],[11,"clone","","",157,{"inputs":[{"name":"self"}],"output":{"name":"enumerate"}}],[11,"clone","","",158,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"clone","","",159,{"inputs":[{"name":"self"}],"output":{"name":"skipwhile"}}],[11,"clone","","",160,{"inputs":[{"name":"self"}],"output":{"name":"takewhile"}}],[11,"clone","","",161,{"inputs":[{"name":"self"}],"output":{"name":"skip"}}],[11,"clone","","",162,{"inputs":[{"name":"self"}],"output":{"name":"take"}}],[11,"clone","","",163,{"inputs":[{"name":"self"}],"output":{"name":"scan"}}],[11,"clone","","",164,{"inputs":[{"name":"self"}],"output":{"name":"flatmap"}}],[11,"clone","","",165,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"clone","","",166,{"inputs":[{"name":"self"}],"output":{"name":"inspect"}}],[11,"clone","steed::option","",69,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",169,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","steed::raw","",67,{"inputs":[{"name":"self"}],"output":{"name":"traitobject"}}],[11,"clone","steed::result","",68,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","steed::str::pattern","",89,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"clone","","",130,{"inputs":[{"name":"self"}],"output":{"name":"charsearcher"}}],[11,"clone","","",131,{"inputs":[{"name":"self"}],"output":{"name":"charslicesearcher"}}],[11,"clone","","",132,{"inputs":[{"name":"self"}],"output":{"name":"charpredicatesearcher"}}],[11,"clone","","",133,{"inputs":[{"name":"self"}],"output":{"name":"strsearcher"}}],[11,"clone","steed::str","",106,{"inputs":[{"name":"self"}],"output":{"name":"parseboolerror"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"utf8error"}}],[11,"clone","","",178,{"inputs":[{"name":"self"}],"output":{"name":"chars"}}],[11,"clone","","",179,{"inputs":[{"name":"self"}],"output":{"name":"charindices"}}],[11,"clone","","",180,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"clone","","",189,{"inputs":[{"name":"self"}],"output":{"name":"split"}}],[11,"clone","","",190,{"inputs":[{"name":"self"}],"output":{"name":"rsplit"}}],[11,"clone","","",191,{"inputs":[{"name":"self"}],"output":{"name":"splitterminator"}}],[11,"clone","","",192,{"inputs":[{"name":"self"}],"output":{"name":"rsplitterminator"}}],[11,"clone","","",193,{"inputs":[{"name":"self"}],"output":{"name":"splitn"}}],[11,"clone","","",194,{"inputs":[{"name":"self"}],"output":{"name":"rsplitn"}}],[11,"clone","","",195,{"inputs":[{"name":"self"}],"output":{"name":"matchindices"}}],[11,"clone","","",196,{"inputs":[{"name":"self"}],"output":{"name":"rmatchindices"}}],[11,"clone","","",197,{"inputs":[{"name":"self"}],"output":{"name":"matches"}}],[11,"clone","","",198,{"inputs":[{"name":"self"}],"output":{"name":"rmatches"}}],[11,"clone","","",181,{"inputs":[{"name":"self"}],"output":{"name":"lines"}}],[11,"clone","","",182,{"inputs":[{"name":"self"}],"output":{"name":"linesany"}}],[11,"clone","steed::hash","",208,{"inputs":[{"name":"self"}],"output":{"name":"siphasher13"}}],[11,"clone","","",209,{"inputs":[{"name":"self"}],"output":{"name":"siphasher24"}}],[11,"clone","","",210,{"inputs":[{"name":"self"}],"output":{"name":"siphasher"}}],[11,"clone","steed::fmt","",112,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"clone","","",203,{"inputs":[{"name":"self"}],"output":{"name":"arguments"}}],[11,"write","steed::hash","",210,null],[11,"finish","","",210,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",208,null],[11,"finish","","",208,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",209,null],[11,"finish","","",209,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"shr_assign","steed::num","",119,null],[11,"shr_assign","","",119,null],[11,"shr_assign","","",119,null],[11,"shr_assign","","",119,null],[11,"shr_assign","","",119,null],[11,"shr_assign","","",119,null],[11,"shr_assign","","",119,null],[11,"shr_assign","","",119,null],[11,"shr_assign","","",119,null],[11,"shr_assign","","",119,null],[11,"fmt","steed::ptr","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","steed::num","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"not","","",119,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"not","","",119,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"not","","",119,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"not","","",119,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"not","","",119,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"not","","",119,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"not","","",119,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"not","","",119,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"not","","",119,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"not","","",119,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"not","","",119,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"not","","",119,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"next_back","steed::ops","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",54,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","steed::iter","",146,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",147,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",148,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",149,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",150,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",152,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",153,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",154,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",155,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",157,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",161,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",164,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",165,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",165,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",166,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","steed::option","",167,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",168,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",169,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","steed::result","",170,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",171,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",172,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","steed::slice","",173,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",174,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",175,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",176,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",177,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","steed::str","",178,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",179,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",180,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",181,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",182,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","steed::slice","",183,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",184,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","steed::str","",189,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",190,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",191,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",192,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",195,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",196,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",197,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",198,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","steed::num","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","steed::mem","",204,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","steed::ops","",205,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","steed::any","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","steed::cell","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","steed::iter","",147,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",155,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",156,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",159,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",160,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",163,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",164,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",166,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","steed::slice","",183,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",184,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",173,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",174,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",185,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",186,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",187,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",188,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","steed::str::pattern","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","steed::hash","",199,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","steed::fmt","",203,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","steed::marker","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","steed::cell","",138,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",139,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",137,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",207,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","steed::num","",200,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",201,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",202,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","steed::cmp","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","steed::any","",206,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","steed::cell","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","steed::char","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",141,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",142,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",143,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",144,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","steed::iter","",145,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",146,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",148,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",149,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",150,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",151,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",152,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",153,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",157,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",158,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",161,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",162,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",165,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","steed::option","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",167,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",168,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",169,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","steed::result","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",170,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",171,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",172,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","steed::slice","",175,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",176,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",177,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","steed::str::pattern","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",130,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","steed::str","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",178,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",179,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",180,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",189,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",190,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",191,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",192,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",193,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",194,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",195,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",196,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",197,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",198,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",181,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",182,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","steed::hash","",208,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",209,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",210,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","steed::fmt","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"div_assign","steed::num","",119,null],[11,"div_assign","","",119,null],[11,"div_assign","","",119,null],[11,"div_assign","","",119,null],[11,"div_assign","","",119,null],[11,"div_assign","","",119,null],[11,"div_assign","","",119,null],[11,"div_assign","","",119,null],[11,"div_assign","","",119,null],[11,"div_assign","","",119,null],[11,"div_assign","","",119,null],[11,"div_assign","","",119,null],[11,"deref_mut","steed::cell","",137,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"write_str","steed::fmt","",211,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",211,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",211,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"shl_assign","steed::num","",119,null],[11,"shl_assign","","",119,null],[11,"shl_assign","","",119,null],[11,"shl_assign","","",119,null],[11,"shl_assign","","",119,null],[11,"shl_assign","","",119,null],[11,"shl_assign","","",119,null],[11,"shl_assign","","",119,null],[11,"shl_assign","","",119,null],[11,"shl_assign","","",119,null],[11,"get","steed::ops","",51,null],[11,"get_mut","","",51,null],[11,"get_unchecked","","",51,null],[11,"get_unchecked_mut","","",51,null],[11,"index","","",51,null],[11,"index_mut","","",51,null],[11,"get","","",53,null],[11,"get_mut","","",53,null],[11,"get_unchecked","","",53,null],[11,"get_unchecked_mut","","",53,null],[11,"index","","",53,null],[11,"index_mut","","",53,null],[11,"get","","",52,null],[11,"get_mut","","",52,null],[11,"get_unchecked","","",52,null],[11,"get_unchecked_mut","","",52,null],[11,"index","","",52,null],[11,"index_mut","","",52,null],[11,"get","","",205,null],[11,"get_mut","","",205,null],[11,"get_unchecked","","",205,null],[11,"get_unchecked_mut","","",205,null],[11,"index","","",205,null],[11,"index_mut","","",205,null],[11,"get","","",54,null],[11,"get_mut","","",54,null],[11,"get_unchecked","","",54,null],[11,"get_unchecked_mut","","",54,null],[11,"index","","",54,null],[11,"index_mut","","",54,null],[11,"get","","",55,null],[11,"get_mut","","",55,null],[11,"get_unchecked","","",55,null],[11,"get_unchecked_mut","","",55,null],[11,"index","","",55,null],[11,"index_mut","","",55,null],[11,"mul_assign","steed::num","",119,null],[11,"mul_assign","","",119,null],[11,"mul_assign","","",119,null],[11,"mul_assign","","",119,null],[11,"mul_assign","","",119,null],[11,"mul_assign","","",119,null],[11,"mul_assign","","",119,null],[11,"mul_assign","","",119,null],[11,"mul_assign","","",119,null],[11,"mul_assign","","",119,null],[11,"mul_assign","","",119,null],[11,"mul_assign","","",119,null],[11,"into_iter","steed::option","Returns a consuming iterator over the possibly contained value.",69,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","steed::result","Returns a consuming iterator over the possibly contained value.",68,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"hash","steed::mem","",204,null],[11,"hash","steed::num","",119,null],[11,"hash","steed::marker","",140,null],[11,"hash","steed::ops","",205,null],[11,"hash","","",51,null],[11,"hash","","",52,null],[11,"hash","","",53,null],[11,"hash","","",54,null],[11,"hash","","",55,null],[11,"hash","steed::cmp","",4,null],[11,"hash","steed::any","",206,null],[11,"hash","steed::option","",69,null],[11,"hash","steed::result","",68,null],[11,"hash","steed::fmt","",112,null],[11,"fmt","steed::num","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bitxor_assign","","",119,null],[11,"bitxor_assign","","",119,null],[11,"bitxor_assign","","",119,null],[11,"bitxor_assign","","",119,null],[11,"bitxor_assign","","",119,null],[11,"bitxor_assign","","",119,null],[11,"bitxor_assign","","",119,null],[11,"bitxor_assign","","",119,null],[11,"bitxor_assign","","",119,null],[11,"bitxor_assign","","",119,null],[11,"bitxor_assign","","",119,null],[11,"bitxor_assign","","",119,null],[11,"from","steed::cell","",138,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"from","","",139,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"from","","",207,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"from","steed::option","",69,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"neg","steed::num","",119,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"neg","","",119,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"neg","","",119,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"neg","","",119,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"neg","","",119,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"neg","","",119,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"neg","","",119,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"neg","","",119,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"neg","","",119,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"neg","","",119,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"neg","","",119,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"neg","","",119,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"len","steed::char","",141,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",142,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","steed::iter","",147,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",148,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",149,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",149,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","",150,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",150,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","",154,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",154,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","",157,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",157,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","",165,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",165,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","",166,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",166,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","steed::slice","",183,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","",184,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","steed::str","",180,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",180,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","steed::num","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"rem","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",119,null],[11,"rem","","",119,null],[11,"rem","","",119,null],[11,"rem","","",119,null],[11,"rem","","",119,null],[11,"rem","","",119,null],[11,"rem","","",119,null],[11,"rem","","",119,null],[11,"rem","","",119,null],[11,"rem","","",119,null],[11,"rem","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",119,null],[11,"rem","","",119,null],[11,"as_ref","steed::slice","",183,null],[11,"div","steed::num","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",119,null],[11,"div","","",119,null],[11,"div","","",119,null],[11,"div","","",119,null],[11,"div","","",119,null],[11,"div","","",119,null],[11,"div","","",119,null],[11,"div","","",119,null],[11,"div","","",119,null],[11,"div","","",119,null],[11,"div","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",119,null],[11,"div","","",119,null],[11,"mul","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",119,null],[11,"mul","","",119,null],[11,"mul","","",119,null],[11,"mul","","",119,null],[11,"mul","","",119,null],[11,"mul","","",119,null],[11,"mul","","",119,null],[11,"mul","","",119,null],[11,"mul","","",119,null],[11,"mul","","",119,null],[11,"mul","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",119,null],[11,"mul","","",119,null],[11,"sub_assign","","",119,null],[11,"sub_assign","","",119,null],[11,"sub_assign","","",119,null],[11,"sub_assign","","",119,null],[11,"sub_assign","","",119,null],[11,"sub_assign","","",119,null],[11,"sub_assign","","",119,null],[11,"sub_assign","","",119,null],[11,"sub_assign","","",119,null],[11,"sub_assign","","",119,null],[11,"sub_assign","","",119,null],[11,"sub_assign","","",119,null],[11,"sub","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",119,null],[11,"sub","","",119,null],[11,"sub","","",119,null],[11,"sub","","",119,null],[11,"sub","","",119,null],[11,"sub","","",119,null],[11,"sub","","",119,null],[11,"sub","","",119,null],[11,"sub","","",119,null],[11,"sub","","",119,null],[11,"sub","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",119,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",119,null],[11,"sub","","",119,null],[11,"is_empty","steed::collections::binary_heap","",212,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","",213,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","",214,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","steed::collections::btree_map","",215,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",216,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",217,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",218,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",219,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",220,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","steed::collections::btree_set","",221,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",222,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","steed::vec","",223,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","",224,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","steed::collections::vec_deque","",225,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","",226,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","",227,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next","steed::collections::binary_heap","",212,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",212,null],[11,"next","","",213,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",213,null],[11,"next","","",214,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",214,null],[11,"next","steed::collections::btree_map","",215,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",215,null],[11,"next","","",216,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",216,null],[11,"next","","",217,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",217,null],[11,"next","","",218,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",218,null],[11,"next","","",219,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",219,null],[11,"next","","",228,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",220,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",220,null],[11,"next","","",229,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","steed::collections::btree_set","",221,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",221,null],[11,"next","","",222,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",222,null],[11,"next","","",230,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",231,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",231,null],[11,"next","","",232,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",232,null],[11,"next","","",233,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",233,null],[11,"next","","",234,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",234,null],[11,"next","steed::collections::linked_list","",235,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",235,null],[11,"next","","",236,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",236,null],[11,"next","","",237,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",237,null],[11,"next","steed::str","",238,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",238,null],[11,"next","steed::string","",239,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",239,null],[11,"next","steed::vec","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",223,null],[11,"count","","",223,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",224,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",224,null],[11,"next","steed::collections::vec_deque","",225,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",225,null],[11,"fold","","",225,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"next","","",226,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",226,null],[11,"fold","","",226,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"next","","",227,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",227,null],[11,"next","","",240,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",240,null],[11,"add_assign","steed::borrow","",72,null],[11,"add_assign","","",72,null],[11,"add_assign","steed::string","",241,null],[11,"default","steed::collections::binary_heap","Creates an empty `BinaryHeap<T>`.",242,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"default","steed::collections::btree_map","Creates an empty `BTreeMap<K, V>`.",243,{"inputs":[],"output":{"name":"btreemap"}}],[11,"default","steed::collections::btree_set","Makes an empty `BTreeSet<T>` with a reasonable choice of B.",244,{"inputs":[],"output":{"name":"btreeset"}}],[11,"default","steed::borrow","Creates an owned Cow<'a, B> with the default value for the contained owned value.",72,{"inputs":[],"output":{"name":"cow"}}],[11,"default","steed::collections::linked_list","Creates an empty `LinkedList<T>`.",245,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"default","steed::string","Creates an empty `String`.",241,{"inputs":[],"output":{"name":"string"}}],[11,"default","steed::vec","Creates an empty `Vec<T>`.",246,{"inputs":[],"output":{"name":"vec"}}],[11,"default","steed::collections::vec_deque","Creates an empty `VecDeque<T>`.",247,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"hash","steed::collections::btree_map","",243,null],[11,"hash","steed::borrow","",72,null],[11,"hash","steed::collections::linked_list","",245,null],[11,"hash","steed::string","",241,null],[11,"hash","steed::vec","",246,null],[11,"hash","steed::collections::vec_deque","",247,null],[11,"hash","steed::collections::btree_set","",244,null],[11,"hash","steed::collections","",101,null],[11,"index","steed::collections::btree_map","",243,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"v"}}],[11,"index","steed::string","",241,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"str"}}],[11,"index","","",241,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",241,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",241,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index","","",241,{"inputs":[{"name":"self"},{"name":"rangeinclusive"}],"output":{"name":"str"}}],[11,"index","","",241,{"inputs":[{"name":"self"},{"name":"rangetoinclusive"}],"output":{"name":"str"}}],[11,"index","steed::vec","",246,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",246,null],[11,"index","","",246,null],[11,"index","","",246,null],[11,"index","","",246,null],[11,"index","","",246,null],[11,"index","","",246,null],[11,"index","steed::collections::vec_deque","",247,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"a"}}],[11,"index_mut","steed::string","",241,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"str"}}],[11,"index_mut","","",241,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index_mut","","",241,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index_mut","","",241,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index_mut","","",241,{"inputs":[{"name":"self"},{"name":"rangeinclusive"}],"output":{"name":"str"}}],[11,"index_mut","","",241,{"inputs":[{"name":"self"},{"name":"rangetoinclusive"}],"output":{"name":"str"}}],[11,"index_mut","steed::vec","",246,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",246,null],[11,"index_mut","","",246,null],[11,"index_mut","","",246,null],[11,"index_mut","","",246,null],[11,"index_mut","","",246,null],[11,"index_mut","","",246,null],[11,"index_mut","steed::collections::vec_deque","",247,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"a"}}],[11,"eq","steed::collections::btree_map","",243,{"inputs":[{"name":"self"},{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"eq","steed::borrow","",72,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","steed::collections::linked_list","",245,{"inputs":[{"name":"self"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"ne","","",245,{"inputs":[{"name":"self"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"eq","steed::string","",241,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",241,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",110,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"eq","steed::collections::vec_deque","",247,{"inputs":[{"name":"self"},{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"eq","steed::collections::btree_set","",244,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ne","","",244,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"eq","steed::string","",241,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",241,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",241,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",241,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","steed::borrow","",72,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","steed::string","",241,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",241,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","steed::vec","",246,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",246,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","steed::borrow","",72,null],[11,"ne","","",72,null],[11,"eq","","",72,null],[11,"ne","","",72,null],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","steed::vec","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"eq","steed::collections","",101,{"inputs":[{"name":"self"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"ne","","",101,{"inputs":[{"name":"self"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"pointer","steed::collections::linked_list","",248,null],[11,"pointer","","",249,null],[11,"pointer","steed::vec","",250,null],[11,"from_str","steed::string","",241,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"partial_cmp","steed::collections::btree_map","",243,{"inputs":[{"name":"self"},{"name":"btreemap"}],"output":{"name":"option"}}],[11,"partial_cmp","steed::borrow","",72,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"option"}}],[11,"partial_cmp","steed::collections::linked_list","",245,{"inputs":[{"name":"self"},{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"partial_cmp","steed::vec","",246,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"option"}}],[11,"partial_cmp","steed::collections::vec_deque","",247,{"inputs":[{"name":"self"},{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"partial_cmp","steed::collections::btree_set","",244,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"option"}}],[11,"lt","","",244,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"le","","",244,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"gt","","",244,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ge","","",244,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"partial_cmp","steed::string","",241,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"option"}}],[11,"lt","","",241,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"le","","",241,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"gt","","",241,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ge","","",241,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"from","steed::collections::binary_heap","",242,{"inputs":[{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","steed::vec","",246,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from","steed::string","",241,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"from","","",241,{"inputs":[{"name":"cow"}],"output":{"name":"string"}}],[11,"from","steed::borrow","",72,{"inputs":[{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",72,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"from","steed::vec","",246,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"from","","",246,null],[11,"from","","",246,{"inputs":[{"name":"cow"}],"output":{"name":"vec"}}],[11,"from","","",246,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[11,"from","steed::borrow","",72,null],[11,"from","","",72,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"from","steed::collections::vec_deque","",247,{"inputs":[{"name":"vec"}],"output":{"name":"vecdeque"}}],[11,"from","steed::vec","",246,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vec"}}],[11,"into_iter","steed::collections::binary_heap","Creates a consuming iterator, that is, one that moves each value out of the binary heap in arbitrary order. The binary heap cannot be used after calling this.",242,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","steed::collections::btree_map","",243,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","steed::collections::btree_set","Gets an iterator for moving out the BtreeSet's contents.",244,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","steed::collections::linked_list","Consumes the list into an iterator yielding elements by value.",245,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","steed::vec","Creates a consuming iterator, that is, one that moves each value out of the vector (from start to end). The vector cannot be used after calling this.",246,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","steed::collections::vec_deque","Consumes the list into a front-to-back iterator yielding elements by value.",247,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"finalize","steed::collections::linked_list","",248,null],[11,"finalize","","",249,null],[11,"finalize","steed::vec","",250,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","steed::collections::binary_heap","",242,{"inputs":[{"name":"self"}],"output":{"name":"binaryheap"}}],[11,"clone_from","","",242,null],[11,"clone","","",212,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","steed::collections::btree_map","",243,{"inputs":[{"name":"self"}],"output":{"name":"btreemap"}}],[11,"clone","","",215,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","","",218,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"clone","","",219,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"clone","","",228,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"clone","steed::collections::btree_set","",221,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","","",230,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"clone","","",231,{"inputs":[{"name":"self"}],"output":{"name":"difference"}}],[11,"clone","","",232,{"inputs":[{"name":"self"}],"output":{"name":"symmetricdifference"}}],[11,"clone","","",233,{"inputs":[{"name":"self"}],"output":{"name":"intersection"}}],[11,"clone","","",234,{"inputs":[{"name":"self"}],"output":{"name":"union"}}],[11,"clone","steed::borrow","",72,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"clone","steed::collections::linked_list","",235,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","","",245,{"inputs":[{"name":"self"}],"output":{"name":"linkedlist"}}],[11,"clone","steed::string","",241,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"clone_from","","",241,null],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"clone","steed::vec","",246,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"clone_from","","",246,null],[11,"clone","","",223,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","steed::collections::vec_deque","",247,{"inputs":[{"name":"self"}],"output":{"name":"vecdeque"}}],[11,"clone","","",225,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","steed::collections::binary_heap","",213,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","steed::collections::btree_set","",244,{"inputs":[{"name":"self"}],"output":{"name":"btreeset"}}],[11,"clone","steed::collections::linked_list","",237,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","steed::str","",238,{"inputs":[{"name":"self"}],"output":{"name":"encodeutf16"}}],[11,"clone","steed::collections::vec_deque","",227,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","steed::collections","",101,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"from_iter","steed::collections::binary_heap","",242,{"inputs":[{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"from_iter","steed::collections::btree_map","",243,{"inputs":[{"name":"t"}],"output":{"name":"btreemap"}}],[11,"from_iter","steed::collections::btree_set","",244,{"inputs":[{"name":"i"}],"output":{"name":"btreeset"}}],[11,"from_iter","steed::collections::linked_list","",245,{"inputs":[{"name":"i"}],"output":{"name":"linkedlist"}}],[11,"from_iter","steed::string","",241,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",241,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",241,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","steed::borrow","",72,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"from_iter","","",72,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"from_iter","","",72,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"from_iter","steed::vec","",246,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"from_iter","steed::borrow","",72,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"from_iter","steed::collections::vec_deque","",247,{"inputs":[{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"add","steed::borrow","",72,null],[11,"add","","",72,null],[11,"add","steed::string","",241,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"drop","steed::collections::binary_heap","",251,null],[11,"drop","steed::collections::btree_map","",243,null],[11,"drop","","",217,null],[11,"drop","steed::collections::linked_list","",245,null],[11,"drop","steed::string","",239,null],[11,"drop","steed::vec","",246,null],[11,"drop","","",223,null],[11,"drop","","",224,null],[11,"drop","steed::collections::vec_deque","",247,null],[11,"drop","","",240,null],[11,"deref","steed::collections::binary_heap","",251,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","steed::borrow","",72,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"deref","steed::string","",241,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","steed::vec","",246,null],[11,"as_ref","steed::borrow","",72,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","steed::string","",241,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_ref","","",241,null],[11,"as_ref","steed::vec","",246,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"as_ref","","",246,null],[11,"fmt","steed::collections::binary_heap","",242,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","steed::collections::btree_map","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",252,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",253,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",243,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","steed::collections::btree_set","",244,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","steed::borrow","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","steed::collections::linked_list","",245,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","steed::string","",241,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","steed::vec","",246,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",223,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","steed::collections::vec_deque","",247,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","steed::string","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","steed::collections","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","steed::collections::binary_heap","",212,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",213,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",214,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","steed::collections::btree_map","",215,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",216,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",217,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",218,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",219,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",220,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",228,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",229,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","steed::collections::btree_set","",221,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",222,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",230,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","steed::collections::linked_list","",235,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",236,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",237,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","steed::string","",239,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","steed::vec","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",224,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","steed::collections::vec_deque","",225,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",226,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",227,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",240,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"borrow","steed::borrow","",72,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"borrow","steed::vec","",246,null],[11,"borrow","steed::string","",241,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cmp","steed::collections::btree_map","",243,{"inputs":[{"name":"self"},{"name":"btreemap"}],"output":{"name":"ordering"}}],[11,"cmp","steed::borrow","",72,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"ordering"}}],[11,"cmp","steed::collections::linked_list","",245,{"inputs":[{"name":"self"},{"name":"linkedlist"}],"output":{"name":"ordering"}}],[11,"cmp","steed::vec","",246,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"cmp","steed::collections::vec_deque","",247,{"inputs":[{"name":"self"},{"name":"vecdeque"}],"output":{"name":"ordering"}}],[11,"cmp","steed::collections::btree_set","",244,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"ordering"}}],[11,"cmp","steed::string","",241,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"ordering"}}],[11,"extend","steed::collections::binary_heap","",242,null],[11,"extend","","",242,null],[11,"extend","steed::collections::btree_map","",243,null],[11,"extend","","",243,null],[11,"extend","steed::collections::btree_set","",244,null],[11,"extend","","",244,null],[11,"extend","steed::collections::linked_list","",245,null],[11,"extend","","",245,null],[11,"extend","steed::string","",241,null],[11,"extend","","",241,null],[11,"extend","","",241,null],[11,"extend","","",241,null],[11,"extend","steed::vec","",246,null],[11,"extend","","",246,null],[11,"extend","steed::collections::vec_deque","",247,null],[11,"extend","","",247,null],[11,"deref_mut","steed::collections::binary_heap","",251,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","steed::string","",241,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref_mut","steed::vec","",246,null],[11,"write_str","steed::string","",241,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",241,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"make_place","steed::collections::linked_list","",248,{"inputs":[{"name":"self"}],"output":{"name":"frontplace"}}],[11,"make_place","","",249,{"inputs":[{"name":"self"}],"output":{"name":"backplace"}}],[11,"make_place","steed::vec","",250,{"inputs":[{"name":"self"}],"output":{"name":"placeback"}}],[11,"start","steed::ops","",52,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"end","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"start","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"end","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_mut","steed::vec","",246,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"as_mut","","",246,null],[11,"fmt","steed::borrow","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","steed::string","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",241,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow_mut","steed::vec","",246,null],[11,"of","steed::any","Returns the `TypeId` of the type this generic function has been instantiated with.",206,{"inputs":[],"output":{"name":"typeid"}}],[11,"new","steed::cell","Creates a new `Cell` containing the given value.",138,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",138,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",138,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",138,{"inputs":[{"name":"self"}],"output":{"name":"unsafecell"}}],[11,"as_ptr","","Returns a raw pointer to the underlying data in this cell.",138,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",138,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"new","","Creates a new `RefCell` containing `value`.",139,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",139,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",139,{"inputs":[{"name":"self"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",139,{"inputs":[{"name":"self"}],"output":{"name":"ref"}}],[11,"try_borrow","","Immutably borrows the wrapped value, returning an error if the value is currently mutably borrowed.",139,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",139,{"inputs":[{"name":"self"}],"output":{"name":"refmut"}}],[11,"try_borrow_mut","","Mutably borrows the wrapped value, returning an error if the value is currently borrowed.",139,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",139,{"inputs":[{"name":"self"}],"output":{"name":"unsafecell"}}],[11,"as_ptr","","Returns a raw pointer to the underlying data in this cell.",139,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",139,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",136,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",136,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum variant.",137,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified value.",207,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",207,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",207,null],[11,"reverse","steed::cmp","Reverse the `Ordering`.",4,{"inputs":[{"name":"self"}],"output":{"name":"ordering"}}],[11,"then","","Chains two orderings.",4,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"then_with","","Chains the ordering with the given function.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"ordering"}}],[11,"new","steed::hash","Creates a new `SipHasher13` with the two initial keys set to 0.",208,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"new_with_keys","","Creates a `SipHasher13` that is keyed off the provided keys.",208,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher13"}}],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",210,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",210,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"new","","Creates a new `SipHasher24` with the two initial keys set to 0.",209,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"new_with_keys","","Creates a `SipHasher24` that is keyed off the provided keys.",209,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher24"}}],[11,"peek","steed::iter","Returns a reference to the next() value without advancing the iterator.",158,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"contains","steed::ops","Examples",51,{"inputs":[{"name":"self"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the given amount at each iteration.",51,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"contains","","Examples",52,{"inputs":[{"name":"self"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"step_by","","Creates an iterator starting at the same point, but stepping by the given amount at each iteration.",52,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"contains","","Examples",53,{"inputs":[{"name":"self"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"contains","","Examples",54,{"inputs":[{"name":"self"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the given amount at each iteration.",54,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"contains","","Examples",55,{"inputs":[{"name":"self"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"new","steed::ptr","Creates a new `Unique`.",134,null],[11,"get","","Dereferences the content.",134,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",134,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"new","","Creates a new `Shared`.",135,null],[11,"is_ok","steed::result","Returns true if the result is `Ok`.",68,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`.",68,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result<T, E>` to [`Option<T>`].",68,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result<T, E>` to [`Option<E>`].",68,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result<T, E>` to `Result<&T, &E>`.",68,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result<T, E>` to `Result<&mut T, &mut E>`.",68,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to a contained `Ok` value, leaving an `Err` value untouched.",68,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a contained `Err` value, leaving an `Ok` value untouched.",68,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",68,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",68,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",68,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",68,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",68,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",68,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`. Else, it returns `optb`.",68,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`. If the value is an `Err` then it calls `op` with its value.",68,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",68,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",68,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",68,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"unwrap_or_default","","Returns the contained value or a default",68,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"is_some","steed::option","Returns `true` if the option is a `Some` value.",69,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value.",69,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`.",69,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`.",69,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",69,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is `Some(v)`.",69,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",69,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",69,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value.",69,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any), or returns a `default` (if not).",69,{"inputs":[{"name":"self"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any), or computes a `default` (if not).",69,{"inputs":[{"name":"self"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a [`Result<T, E>`], mapping `Some(v)` to [`Ok(v)`] and `None` to [`Err(err)`][Err].",69,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a [`Result<T, E>`], mapping `Some(v)` to [`Ok(v)`] and `None` to [`Err(err())`][Err].",69,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",69,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",69,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",69,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the wrapped value and returns the result.",69,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",69,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and returns the result.",69,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",69,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the option.",69,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",69,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"new","steed::boxed","Allocates memory on the heap and then places `x` into it.",105,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",105,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",105,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",105,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",105,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","steed::rc","Constructs a new `Rc<T>`.",122,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"try_unwrap","","Returns the contained value, if the `Rc` has exactly one strong reference.",122,{"inputs":[{"name":"rc"}],"output":{"name":"result"}}],[11,"would_unwrap","","Checks whether [`Rc::try_unwrap`][try_unwrap] would return [`Ok`].",122,{"inputs":[{"name":"rc"}],"output":{"name":"bool"}}],[11,"into_raw","","Consumes the `Rc`, returning the wrapped pointer.",122,null],[11,"from_raw","","Constructs an `Rc` from a raw pointer.",122,null],[11,"downgrade","","Creates a new [`Weak`][weak] pointer to this value.",122,{"inputs":[{"name":"rc"}],"output":{"name":"weak"}}],[11,"weak_count","","Gets the number of [`Weak`][weak] pointers to this value.",122,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"strong_count","","Gets the number of strong (`Rc`) pointers to this value.",122,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"is_unique","","Returns true if there are no other `Rc` or [`Weak`][weak] pointers to this inner value.",122,{"inputs":[{"name":"rc"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the inner value, if there are no other `Rc` or [`Weak`][weak] pointers to the same value.",122,{"inputs":[{"name":"rc"}],"output":{"name":"option"}}],[11,"ptr_eq","","Returns true if the two `Rc`s point to the same value (not just values that compare as equal).",122,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"make_mut","","Makes a mutable reference into the given `Rc`.",122,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"new","","Constructs a new `Weak<T>`, without an accompanying instance of `T`.",123,{"inputs":[],"output":{"name":"weak"}}],[11,"upgrade","","Upgrades the `Weak` pointer to an [`Rc`][rc], if possible.",123,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_mut","steed::borrow","Acquires a mutable reference to the owned form of the data.",72,null],[11,"into_owned","","Extracts the owned data.",72,null],[11,"entry","steed::fmt","Adds a new entry to the list output.",254,{"inputs":[{"name":"self"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",254,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",254,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",255,{"inputs":[{"name":"self"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",255,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated struct output.",256,{"inputs":[{"name":"self"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",256,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the set output.",257,{"inputs":[{"name":"self"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",257,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",257,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",258,{"inputs":[{"name":"self"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",258,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",258,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been emitted into a str. The str should *not* contain the sign for the integer, that will be added by this method.",211,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer after applying the relevant formatting flags specified. The flags recognized for generic strings are:",211,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this formatter.",211,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",211,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",211,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fill","","Character used as 'fill' whenever there is alignment",211,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",211,{"inputs":[{"name":"self"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",211,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",211,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",211,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",211,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",211,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",211,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of `fmt::Debug` implementations for structs.",211,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of `fmt::Debug` implementations for tuple structs.",211,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of `fmt::Debug` implementations for list-like structures.",211,{"inputs":[{"name":"self"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of `fmt::Debug` implementations for set-like structures.",211,{"inputs":[{"name":"self"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of `fmt::Debug` implementations for map-like structures.",211,{"inputs":[{"name":"self"}],"output":{"name":"debugmap"}}],[11,"into_slice","steed::slice","View the underlying data as a subslice of the original data.",184,null],[11,"as_slice","","View the underlying data as a subslice of the original data.",183,null],[11,"as_str","steed::str","View the underlying data as a subslice of the original data.",179,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",178,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was verified.",107,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","steed::string","Creates a new empty `String`.",241,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",241,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",241,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",241,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `Err` if `v` contains any invalid data.",241,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing invalid data with the replacement character (U+FFFD).",241,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",241,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the string contains valid UTF-8.",241,{"inputs":[{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",241,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"as_str","","Extracts a string slice containing the entire string.",241,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_mut_str","","Extracts a string slice containing the entire string.",241,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"push_str","","Appends a given string slice onto the end of this `String`.",241,null],[11,"capacity","","Returns this `String`'s capacity, in bytes.",241,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Ensures that this `String`'s capacity is at least `additional` bytes larger than its length.",241,null],[11,"reserve_exact","","Ensures that this `String`'s capacity is `additional` bytes larger than its length.",241,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",241,null],[11,"push","","Appends the given `char` to the end of this `String`.",241,null],[11,"as_bytes","","Returns a byte slice of this `String`'s contents.",241,null],[11,"truncate","","Shortens this `String` to the specified length.",241,null],[11,"pop","","Removes the last character from the string buffer and returns it.",241,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",241,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"char"}}],[11,"insert","","Inserts a character into this `String` at a byte position.",241,null],[11,"insert_str","","Inserts a string slice into this `String` at a byte position.",241,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",241,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of this `String`, in bytes.",241,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",241,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split_off","","Divide one string into two at an index.",241,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"string"}}],[11,"clear","","Truncates this `String`, removing all contents.",241,null],[11,"drain","","Create a draining iterator that removes the specified range in the string and yields the removed chars.",241,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_boxed_str","","Converts this `String` into a `Box<str>`.",241,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",108,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",108,{"inputs":[{"name":"self"}],"output":{"name":"utf8error"}}],[11,"new","steed::vec","Constructs a new, empty `Vec<T>`.",246,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified capacity.",246,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of another vector.",246,null],[11,"capacity","","Returns the number of elements the vector can hold without reallocating.",246,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given `Vec<T>`. The collection may reserve more space to avoid frequent reallocations.",246,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `Vec<T>`. Does nothing if the capacity is already sufficient.",246,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",246,null],[11,"into_boxed_slice","","Converts the vector into [`Box<[T]>`][owned slice].",246,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"truncate","","Shortens the vector, keeping the first `len` elements and dropping the rest.",246,null],[11,"as_slice","","Extracts a slice containing the entire vector.",246,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",246,null],[11,"set_len","","Sets the length of a vector.",246,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing it with the last element.",246,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all elements after it to the right.",246,null],[11,"remove","","Removes and returns the element at position `index` within the vector, shifting all elements after it to the left.",246,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",246,null],[11,"dedup_by_key","","Removes consecutive elements in the vector that resolve to the same key.",246,null],[11,"dedup_by","","Removes consecutive elements in the vector that resolve to the same key.",246,null],[11,"push","","Appends an element to the back of a collection.",246,null],[11,"pop","","Removes the last element from a vector and returns it, or [`None`] if it is empty.",246,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",246,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector and yields the removed items.",246,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",246,null],[11,"len","","Returns the number of elements in the vector.",246,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",246,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the collection into two at the given index.",246,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",246,null],[11,"extend_from_slice","","Clones and appends all elements in a slice to the `Vec`.",246,null],[11,"place_back","","Returns a place for insertion at the back of the `Vec`.",246,{"inputs":[{"name":"self"}],"output":{"name":"placeback"}}],[11,"dedup","","Removes consecutive repeated elements in the vector.",246,null],[11,"as_slice","","Returns the remaining items of this iterator as a slice.",223,null],[11,"as_mut_slice","","Returns the remaining items of this iterator as a mutable slice.",223,null],[11,"unpaired_surrogate","steed::char","Returns the unpaired surrogate which caused this error.",111,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"new","steed::collections::binary_heap","Creates an empty `BinaryHeap` as a max-heap.",242,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity. This preallocates enough memory for `capacity` elements, so that the `BinaryHeap` does not have to be reallocated until it contains at least that many values.",242,{"inputs":[{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in arbitrary order.",242,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",242,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"peek_mut","","Returns a mutable reference to the greatest item in the binary heap, or `None` if it is empty.",242,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",242,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `BinaryHeap`. Does nothing if the capacity is already sufficient.",242,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the `BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",242,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",242,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it is empty.",242,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push","","Pushes an item onto the binary heap.",242,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in an optimized fashion.",242,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in an optimized fashion. The push is done regardless of whether the binary heap was empty.",242,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector in arbitrary order.",242,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted (ascending) order.",242,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of the binary heap.",242,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Checks if the binary heap is empty.",242,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",242,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"clear","","Drops all items from the binary heap.",242,null],[11,"append","","Moves all the elements of `other` into `self`, leaving `other` empty.",242,null],[11,"new","steed::collections::btree_map","Makes a new empty BTreeMap with a reasonable choice for B.",243,{"inputs":[],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",243,null],[11,"get","","Returns a reference to the value corresponding to the key.",243,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",243,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",243,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",243,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",243,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",243,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting at min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative infinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\". Thus range(Unbounded, Unbounded) will yield the whole collection.",243,{"inputs":[{"name":"self"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting at min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative infinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\". Thus range(Unbounded, Unbounded) will yield the whole collection.",243,{"inputs":[{"name":"self"},{"name":"bound"},{"name":"bound"}],"output":{"name":"rangemut"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",243,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"entry"}}],[11,"split_off","","Splits the collection into two at the given key. Returns everything after the given key, including the key.",243,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"btreemap"}}],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",243,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, sorted by key.",243,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",243,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Gets an iterator over the values of the map, in order by key.",243,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"values_mut","","Gets a mutable iterator over the values of the map, in order by key.",243,{"inputs":[{"name":"self"}],"output":{"name":"valuesmut"}}],[11,"len","","Returns the number of elements in the map.",243,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",243,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","steed::collections::btree_set","Makes a new `BTreeSet` with a reasonable choice of B.",244,{"inputs":[],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator that visits the values in the `BTreeSet` in ascending order.",244,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting at min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative infinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\". Thus range(Unbounded, Unbounded) will yield the whole collection.",244,{"inputs":[{"name":"self"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"difference","","Visits the values representing the difference, in ascending order.",244,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",244,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visits the values representing the intersection, in ascending order.",244,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"intersection"}}],[11,"union","","Visits the values representing the union, in ascending order.",244,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",244,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",244,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Clears the set, removing all values.",244,null],[11,"contains","","Returns `true` if the set contains a value.",244,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",244,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`. This is equivalent to checking for an empty intersection.",244,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",244,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",244,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set.",244,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given one. Returns the replaced value.",244,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was present in the set.",244,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",244,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",244,null],[11,"split_off","","Splits the collection into two at the given key. Returns everything after the given key, including the key.",244,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"btreeset"}}],[11,"new","steed::collections::linked_list","Creates an empty `LinkedList`.",245,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",245,null],[11,"iter","","Provides a forward iterator.",245,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Provides a forward iterator with mutable references.",245,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",245,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of the `LinkedList`.",245,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clear","","Removes all elements from the `LinkedList`.",245,null],[11,"contains","","Returns `true` if the `LinkedList` contains an element equal to the given value.",245,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"front","","Provides a reference to the front element, or `None` if the list is empty.",245,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list is empty.",245,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the list is empty.",245,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list is empty.",245,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push_front","","Adds an element first in the list.",245,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is empty.",245,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push_back","","Appends an element to the back of a list",245,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if it is empty.",245,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index, including the index.",245,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"linkedlist"}}],[11,"front_place","","Returns a place for insertion at the front of the list.",245,{"inputs":[{"name":"self"}],"output":{"name":"frontplace"}}],[11,"back_place","","Returns a place for insertion at the back of the list.",245,{"inputs":[{"name":"self"}],"output":{"name":"backplace"}}],[11,"new","steed::collections::vec_deque","Creates an empty `VecDeque`.",247,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",247,{"inputs":[{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",247,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",247,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap","","Swaps elements at indices `i` and `j`.",247,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without reallocating.",247,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `VecDeque`. Does nothing if the capacity is already sufficient.",247,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given `VecDeque`. The collection may reserve more space to avoid frequent reallocations.",247,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",247,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",247,null],[11,"iter","","Returns a front-to-back iterator.",247,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",247,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the `VecDeque`.",247,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the `VecDeque`.",247,null],[11,"len","","Returns the number of elements in the `VecDeque`.",247,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the buffer contains no elements",247,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","Create a draining iterator that removes the specified range in the `VecDeque` and yields the removed items.",247,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the buffer, removing all values.",247,null],[11,"contains","","Returns `true` if the `VecDeque` contains an element equal to the given value.",247,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"front","","Provides a reference to the front element, or `None` if the sequence is empty.",247,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the sequence is empty.",247,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the sequence is empty.",247,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the sequence is empty.",247,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is empty.",247,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push_front","","Inserts an element first in the sequence.",247,null],[11,"push_back","","Appends an element to the back of a buffer",247,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if it is empty.",247,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the last element.",247,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the first element.",247,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element at `index` within the `VecDeque`, shifting all elements with indices greater than or equal to `index` towards the back.",247,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`. Whichever end is closer to the removal point will be moved to make room, and all the affected elements will be moved to new positions. Returns `None` if `index` is out of bounds.",247,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"split_off","","Splits the collection into two at the given index.",247,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",247,null],[11,"retain","","Retains only the elements specified by the predicate.",247,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len, either by removing excess elements or by appending copies of a value to the back.",247,null],[11,"pop","steed::collections::binary_heap","Removes the peeked value from the heap and returns it.",251,{"inputs":[{"name":"peekmut"}],"output":{"name":"t"}}],[11,"or_insert","steed::collections::btree_map","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",102,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",102,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"v"}}],[11,"key","","Returns a reference to this entry's key.",102,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"key","","Gets a reference to the key that would be used when inserting a value through the VacantEntry.",252,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"into_key","","Take ownership of the key.",252,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"insert","","Sets the value of the entry with the `VacantEntry`'s key, and returns a mutable reference to it.",252,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"key","","Gets a reference to the key in the entry.",253,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"remove_pair","","Deprecated, renamed to `remove_entry`",253,null],[11,"remove_entry","","Take ownership of the key and value from the map.",253,null],[11,"get","","Gets a reference to the value in the entry.",253,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",253,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",253,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the `OccupiedEntry`'s key, and returns the entry's old value.",253,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",253,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"insert_next","steed::collections::linked_list","Inserts the given element just after the element most recently returned by `.next()`. The inserted element does not appear in the iteration.",236,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",236,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"description","steed::num","",202,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",201,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",200,{"inputs":[{"name":"self"}],"output":{"name":"str"}}]],"paths":[[8,"Any"],[4,"BorrowState"],[8,"Clone"],[8,"PartialEq"],[4,"Ordering"],[8,"Ord"],[8,"PartialOrd"],[8,"AsRef"],[8,"AsMut"],[8,"Into"],[8,"From"],[8,"TryInto"],[8,"TryFrom"],[8,"Default"],[8,"Hash"],[8,"Hasher"],[8,"BuildHasher"],[8,"Step"],[8,"ExactSizeIterator"],[8,"Iterator"],[8,"IntoIterator"],[8,"DoubleEndedIterator"],[8,"Product"],[8,"Extend"],[8,"Sum"],[8,"FromIterator"],[8,"Drop"],[8,"Add"],[8,"Sub"],[8,"Mul"],[8,"Div"],[8,"Rem"],[8,"Neg"],[8,"Not"],[8,"BitAnd"],[8,"BitOr"],[8,"BitXor"],[8,"Shl"],[8,"Shr"],[8,"AddAssign"],[8,"SubAssign"],[8,"MulAssign"],[8,"DivAssign"],[8,"RemAssign"],[8,"BitAndAssign"],[8,"BitOrAssign"],[8,"BitXorAssign"],[8,"ShlAssign"],[8,"ShrAssign"],[8,"Index"],[8,"IndexMut"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[8,"Deref"],[8,"DerefMut"],[8,"Fn"],[8,"FnMut"],[8,"FnOnce"],[8,"Place"],[8,"Placer"],[8,"InPlace"],[8,"Boxed"],[8,"BoxPlace"],[8,"Carrier"],[3,"TraitObject"],[4,"Result"],[4,"Option"],[8,"FnBox"],[8,"ToOwned"],[4,"Cow"],[8,"Borrow"],[8,"BorrowMut"],[8,"UpperHex"],[8,"Display"],[8,"Write"],[8,"Binary"],[8,"LowerExp"],[8,"Debug"],[8,"Octal"],[8,"LowerHex"],[8,"UpperExp"],[8,"Pointer"],[8,"SliceConcatExt"],[8,"SliceIndex"],[8,"FromStr"],[8,"Pattern"],[4,"SearchStep"],[8,"Searcher"],[8,"ReverseSearcher"],[8,"ToString"],[3,"File"],[3,"OpenOptions"],[8,"Read"],[8,"Write"],[3,"Error"],[3,"Stderr"],[3,"Stdin"],[3,"Stdout"],[4,"Bound"],[4,"Entry"],[8,"RangeArgument"],[8,"Error"],[3,"Box"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"DecodeUtf16Error"],[3,"Error"],[3,"BorrowError"],[3,"BorrowMutError"],[3,"CharTryFromError"],[8,"Zero"],[8,"One"],[4,"FpCategory"],[3,"Wrapping"],[3,"Duration"],[3,"SystemTimeError"],[3,"Rc"],[3,"Weak"],[3,"IntermediateBox"],[3,"ExchangeHeapSingleton"],[3,"SplitWhitespace"],[3,"ToLowercase"],[3,"ToUppercase"],[3,"DecodeUtf16"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"Unique"],[3,"Shared"],[3,"Ref"],[3,"RefMut"],[3,"Cell"],[3,"RefCell"],[3,"PhantomData"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EscapeDebug"],[3,"DecodeUtf8"],[3,"StepBy"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Split"],[3,"SplitMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"Lines"],[3,"LinesAny"],[3,"Iter"],[3,"IterMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"BuildHasherDefault"],[3,"ParseFloatError"],[3,"TryFromIntError"],[3,"ParseIntError"],[3,"Arguments"],[3,"Discriminant"],[3,"RangeFull"],[3,"TypeId"],[3,"UnsafeCell"],[3,"SipHasher13"],[3,"SipHasher24"],[3,"SipHasher"],[3,"Formatter"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"],[3,"Iter"],[3,"IntoIter"],[3,"IntoIter"],[3,"Drain"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Range"],[3,"RangeMut"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"EncodeUtf16"],[3,"Drain"],[3,"Drain"],[3,"String"],[3,"BinaryHeap"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"LinkedList"],[3,"Vec"],[3,"VecDeque"],[3,"FrontPlace"],[3,"BackPlace"],[3,"PlaceBack"],[3,"PeekMut"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"DebugList"],[3,"DebugTuple"],[3,"DebugStruct"],[3,"DebugSet"],[3,"DebugMap"]]};
searchIndex["unborrow"] = {"doc":"","items":[[14,"unborrow","unborrow","Explicitly precompute a method's arguments before the call so that borrowck sees them the same way that trans does.",null,null]],"paths":[]};
initSearch(searchIndex);
